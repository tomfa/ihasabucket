{"version":3,"file":"static/webpack/static/development/pages/index.js.288d932d744659e3ce52.hot-update.js","sources":["webpack:///./components/Infrastructure/utils.ts"],"sourcesContent":["import {\n  BUCKET_TYPE,\n  getInputDescription,\n  getOutput,\n  INPUT,\n} from '../../enums';\n\ntype Props = {\n  webApp: boolean;\n  staging: boolean;\n  shared: boolean;\n  staticPage: boolean;\n};\n\ntype TerraformPackage = {\n  mainTfContent: string[];\n  description?: string;\n};\n\nconst getMainTfContent = ({\n  webApp,\n  staging,\n  shared,\n  staticPage,\n}: Props): string[] => {\n  const source = webApp\n    ? 'git::https://github.com/tomfa/terraform.git//webapp'\n    : \"'git::https://github.com/tomfa/terraform.git//files\";\n\n  const parameters: { [param: string]: string } = {\n    bucket_name: `var.${INPUT.BUCKET_NAME}`,\n    aws_region: `var.${INPUT.AWS_REGION}`,\n  };\n  if (webApp) {\n    parameters.error_path = '\"/index.html\"';\n    parameters.error_code = staticPage ? '404' : '200';\n  } else {\n    parameters.acl = shared ? '\"public-read\"' : '\"private\"';\n  }\n\n  const genericBucketName = webApp ? 'web-app' : 'file-storage';\n  const modules = staging\n    ? [\n        {\n          name: `${genericBucketName}-production`,\n          parameters,\n        },\n        {\n          name: `${genericBucketName}-staging`,\n          parameters: {\n            ...parameters,\n            bucket_name: `\"\\\\$\\{var.bucket_name}.staging\"`,\n          },\n        },\n      ]\n    : [{ name: genericBucketName, parameters }];\n\n  const lines: string[] = [];\n  const isUsed = (inputVariable: string): boolean =>\n    !!modules.find(\n      (m) =>\n        !!Object.values(m.parameters).find((p) =>\n          p.includes(`var.${inputVariable}`)\n        )\n    );\n  Object.values(INPUT)\n    .filter(isUsed)\n    .forEach((input: INPUT) => {\n      const description = getInputDescription(input);\n      if (!description) {\n        lines.push(`variable \"${input}\" {}`);\n      } else {\n        lines.push(`variable \"${input}\" {`);\n        lines.push(`  description = \"${description}\"`);\n        lines.push(`}`);\n      }\n    });\n  modules.forEach((module) => {\n    lines.push('');\n    lines.push(`module \"${module.name}\" {`);\n    lines.push(`  source = \"${source}\"`);\n    Object.entries(module.parameters).forEach(([key, value]) => {\n      lines.push(`  ${key} = ${value}`);\n    });\n    lines.push(`}`);\n  });\n  lines.push('');\n  getOutput({\n    bucketType: webApp ? BUCKET_TYPE.WEBAPP : BUCKET_TYPE.FILE_STORAGE,\n    hasStaging: staging,\n  }).forEach((output) => {\n    lines.push(`output \"${output.label}\" {`);\n    lines.push(`  value = ${output.value}`);\n    lines.push('}');\n  });\n  return lines;\n};\n\nconst getTerraPackageDescription = ({\n  webApp,\n  staging,\n  shared,\n  staticPage,\n}: Props): string => {\n  const count = staging ? 'two sets of' : 'a';\n  const usecase = getUseCaseDescription({ webApp, staticPage, shared });\n  const iamUserInfo = staging\n    ? 'Two sets of AWS keys will be created that are able to upload to the buckets. One for test and one for production environment'\n    : 'A set of AWS keys will be created that is able to upload to the bucket';\n  return `Once run, it will create ${count} S3 bucket ${webApp ? '+ Cloudfront ': ''}, configured ${usecase}. ${iamUserInfo}. Generated keys will be shown as output in the terminal.`;\n};\n\nconst getUseCaseDescription = ({\n  webApp,\n  staticPage,\n  shared,\n}: {\n  webApp: boolean;\n  shared: boolean;\n  staticPage: boolean;\n}): string => {\n  if (webApp) {\n    if (staticPage) {\n      return 'to serve a solid statically generated web app';\n    }\n    return 'to serve a blazingly fast single-page web app';\n  }\n  if (shared) {\n    return 'for hosting publicly available files';\n  }\n  return 'for storing and serving files for authorized requests';\n};\n\nexport const getTerraFormPackage = (props: Props): TerraformPackage => {\n  return {\n    mainTfContent: getMainTfContent(props),\n    description: getTerraPackageDescription(props),\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAkBA;AAKA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAFA;AAKA;AACA;AAEA;AAFA;AAFA;AAQA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AADA;AAFA;AACA;AAMA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;A","sourceRoot":""}
{"version":3,"file":"static/webpack/static/development/pages/index.js.05f666b663300b51a5d7.hot-update.js","sources":["webpack:///./components/code/Code.tsx","webpack:///./sections/Infrastructure.tsx"],"sourcesContent":["/* eslint-disable react/no-array-index-key */\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { copyToClipBoard } from '../../utils/clipboard';\nimport Mute from '../Mute.style';\nimport { Colored } from '../utils';\nimport { useTheme } from '../../styles/theme';\nimport Pre from './Pre.style';\nimport PreButton from './PreButton.style';\n\ntype Props = { mainTfContent: string[]; bucketName: string, intro?: string };\n\nconst Code = ({ mainTfContent: lines, bucketName, intro }: Props) => {\n  const theme = useTheme();\n  const [hasCopied, setHasCopied] = useState<boolean>(false);\n  const copy = useCallback(() => {\n    copyToClipBoard(lines);\n    setHasCopied(true);\n  }, [lines]);\n\n  useEffect(() => setHasCopied(false), [lines, bucketName]);\n\n  return (\n    <Pre>\n      {intro ? <Mute>\n        {intro}\n        {'\\n'}\n      </Mute> : null}\n      {lines.map((line, i) => {\n        if (line.trim().startsWith('#')) {\n          return (\n            <Mute key={i}>\n              {line}\n              {'\\n'}\n            </Mute>\n          );\n        }\n        return (\n          <span key={i}>\n            {line}\n            {'\\n'}\n          </span>\n        );\n      })}\n      <PreButton onClick={copy}>\n        {(hasCopied && (\n          <span>\n            Copied! <Colored color={theme.colors.success}>âœ“</Colored>\n          </span>\n        )) ||\n          'Copy to clipboard'}\n      </PreButton>\n    </Pre>\n  );\n};\n\nexport default Code;\n","/* eslint-disable react/no-array-index-key */\n\nimport { useEffect, useState } from 'react';\nimport Description from '../components/forms/Description.style';\nimport Header from '../components/Header.style';\nimport { getTerraFormPackage } from '../utils/terraform';\nimport LoadingIcon from '../components/icons/LoadingIcon';\nimport Code from '../components/code/Code';\nimport { ShareLink } from '../components/ShareLink';\nimport { trail } from '../utils/splitbee';\nimport useQuestions, { useSummary } from '../questions/useQuestions';\nimport { Section } from '../components/utils';\nimport { getShareTitle } from '../utils/sharing';\n\nconst Infrastructure = () => {\n  const { hasAnsweredAll } = useQuestions();\n  const props = useSummary();\n  const [loading, setLoading] = useState<boolean>(true);\n  useEffect(() => trail('completed', props), []);\n  useEffect(() => {\n    if (hasAnsweredAll) {\n      setTimeout(() => setLoading(false), 800);\n    }\n  }, [hasAnsweredAll]);\n  if (!hasAnsweredAll) {\n    return null;\n  }\n  if (loading) {\n    return <LoadingIcon />;\n  }\n  const { footerText, sections } = getTerraFormPackage(props);\n\n  return (\n    <>\n      <Header as={'h1'}>Bucket is served!</Header>\n      Just run the code below, or share this{' '}\n      <ShareLink text={getShareTitle(props)}>configuration url</ShareLink> for\n      later.\n      {sections.map((section) => (\n          <Code\n            bucketName={props.bucketName}\n            intro={section.description}\n            mainTfContent={section.tfContent}\n          />\n      ))}\n      <Description style={{ fontWeight: 'bold' }}>\n        The script above will plan the infrastructure and prompt you for\n        confirmation.\n      </Description>\n      {footerText.map((text, i) => (\n        <Description key={i}>{text}</Description>\n      ))}\n    </>\n  );\n};\n\nexport default () => (\n  <Section id=\"infrastructure\" tight>\n    <Infrastructure />\n  </Section>\n);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxDA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAhBA;AAAA;AAAA;AACA;AAiBA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;;;;A","sourceRoot":""}
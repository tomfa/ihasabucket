{"version":3,"file":"static/webpack/static/development/pages/index.js.1601126c516e7655fc57.hot-update.js","sources":["webpack:///./questions/useQuestions.ts","webpack:///./utils/useUrlState.ts"],"sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { QUESTION_ID } from '../enums';\nimport { Answer, AnswerMap } from '../types';\nimport { Data, useUrlState } from '../utils/useUrlState';\nimport { trail } from '../utils/splitbee';\nimport {\n  getDefaultAnswer,\n  getQuestionsToRender,\n  normalizeAnswer,\n} from './utils';\nimport { questions } from './data';\n\nconst useQuestions = () => {\n  const [hasReceivedInput, setHasReceivedInput] = useState<boolean>(false);\n  const [answeredQuestions, setAnsweredQuestions] = useState<QUESTION_ID[]>([]);\n  const { urlData, updateUrlData } = useUrlState();\n  const [answers, setAnswers] = useState<AnswerMap>({} as AnswerMap);\n  useEffect(() => {\n    if (hasReceivedInput) {\n      return;\n    }\n    const defaultAnswers = getInitialAnswers(urlData);\n    setAnswers(defaultAnswers);\n\n    const urlAnsweredQuestions = getQuestionsInUrlData(urlData);\n    setAnsweredQuestions(urlAnsweredQuestions);\n  }, [urlData, answeredQuestions, hasReceivedInput]);\n  const renderQuestions = useMemo(\n    () => getQuestionsToRender(answers, answeredQuestions),\n    [answeredQuestions, answers]\n  );\n  const hasAnsweredAll = !renderQuestions.find(\n    (q) => !answeredQuestions.includes(q.id)\n  );\n  const updateAnswer = useCallback(\n    (questionId: QUESTION_ID, answer: Answer) => {\n      setHasReceivedInput(true);\n      updateUrlData({ [String(questionId)]: normalizeAnswer(answer) });\n      setAnswers((prevAnswers) => ({\n        ...prevAnswers,\n        [questionId]: answer,\n      }));\n    },\n    [setAnswers, updateUrlData]\n  );\n  const answerQuestion = useCallback(\n    (questionId: QUESTION_ID, answer: Answer) => {\n      updateAnswer(questionId, answer);\n      setAnsweredQuestions((qs) => {\n        if (qs.includes(questionId)) {\n          return qs;\n        }\n        trail(questionId, { answer });\n        return [...qs, questionId];\n      });\n    },\n    [updateAnswer]\n  );\n  return {\n    answers,\n    renderQuestions,\n    updateAnswer,\n    answerQuestion,\n    hasAnsweredAll,\n  };\n};\n\nconst getInitialAnswers = (urlData: Data) =>\n  questions.reduce(\n    (map, question) => ({\n      ...map,\n      [question.id]: getDefaultAnswer(\n        question,\n        urlData[question.id] !== undefined\n          ? String(urlData[question.id])\n          : undefined\n      ),\n    }),\n    {} as AnswerMap\n  );\n\nconst getQuestionsInUrlData = (urlData: Data) => {\n  const urlQuestions = Object.keys(urlData) as QUESTION_ID[];\n\n  const hasAnsweredEmptyBucketName =\n    urlQuestions.length && !urlQuestions.includes(QUESTION_ID.bucketName);\n  if (hasAnsweredEmptyBucketName) {\n    urlQuestions.push(QUESTION_ID.bucketName);\n  }\n  return urlQuestions;\n};\n\nexport default useQuestions;\n","import qs, { ParsedUrlQuery } from 'querystring';\nimport { NextRouter, useRouter } from 'next/router';\nimport { useCallback, useEffect, useState } from 'react';\n\ntype DataValue = string | boolean | number;\nexport type Data = { [key: string]: DataValue | DataValue[] };\n\nexport const useUrlState = () => {\n  const router: NextRouter = useRouter();\n  const [urlData, setUrlData] = useState<Data>(getDataFromUrlQuery(router.query));\n  useEffect(() => {\n    const newData = getDataFromUrlQuery(router.query);\n    if (hasChanged(urlData, newData)) {\n      setUrlData(newData);\n    }\n  }, [JSON.stringify(router.query)]);\n  const updateUrlData = useCallback(\n    (data: Data) => {\n      const newData = filterInvalidValues({\n        ...mapToQuery(urlData),\n        ...mapToQuery(data),\n      });\n      setUrlData(newData);\n      router.push(`/?` + qs.stringify(newData));\n    },\n    [urlData]\n  );\n  return { urlData, updateUrlData };\n};\n\nconst filterInvalidValues = (data: ParsedUrlQuery): ParsedUrlQuery =>\n  Object.entries(data).reduce((map, [key, value]) => {\n    if (value) {\n      return { ...map, [key]: value };\n    }\n    return map;\n  }, {});\n\nfunction valueIsNumber(value: string) {\n  return !Number.isNaN(parseInt(value));\n}\n\nconst parseToValue = (value: string): DataValue => {\n  if (value.toLowerCase() === 'false') {\n    return false;\n  }\n  if (value.toLowerCase() === 'true') {\n    return true;\n  }\n  if (valueIsNumber(value)) {\n    return parseInt(value);\n  }\n  return value;\n};\n\nconst mapToQuery = (data: Data): ParsedUrlQuery => {\n  return Object.entries(data).reduce((map, [key, value]) => {\n    const stringValue =\n      value instanceof Array ? value.map((v) => String(v)) : String(value);\n    return {\n      ...map,\n      [key]: stringValue,\n    };\n  }, {});\n};\n\nconst getDataFromUrlQuery = (parsedUrlQuery: ParsedUrlQuery): Data => {\n  // Note: This ignores empty string values, e.g. would not support ?webapp\n  const urlState: Data = {};\n  Object.entries(parsedUrlQuery).forEach(([query, value]) => {\n    if (value) {\n      if (value instanceof Array) {\n        urlState[query] = value.map(parseToValue);\n      } else {\n        urlState[query] = parseToValue(value);\n      }\n    }\n  });\n  return urlState;\n};\n\nconst hasChanged = (oldData: Data, newData: Data): boolean => {\n  return JSON.stringify(oldData) !== JSON.stringify(newData);\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AACA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAIA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AAEA;AAAA;AAFA;AACA;AAaA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7FA;AACA;AACA;AAKA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AANA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}
{"version":3,"file":"static/webpack/static/development/pages/index.js.a9c79351f08f4c5ae120.hot-update.js","sources":["webpack:///./pages/index.tsx","webpack:///./sections/FAQ/Deployment.tsx","webpack:///./sections/FAQ/FAQAccordian.tsx","webpack:///./sections/FAQ/FAQAnswer.styles.tsx","webpack:///./sections/FAQ/QuestionTitle.styles.tsx","webpack:///./sections/FAQ/index.tsx"],"sourcesContent":["import { PageWrapper } from '../components/utils';\nimport Header from '../sections/HeaderSection';\nimport Footer from '../sections/Footer';\nimport Intro from '../sections/Intro';\nimport Questionare from '../sections/Questionare';\nimport { QuestionProvider } from '../questions/useQuestions';\nimport Infrastructure from '../sections/Infrastructure';\nimport Prerequisites from '../sections/Prerequisites';\nimport FAQ from \"../sections/FAQ\";\n\nexport default function Home() {\n  return (\n    <PageWrapper>\n      <QuestionProvider>\n        <Header />\n        <Intro />\n        <Questionare />\n        <Infrastructure />\n        <Prerequisites />\n        <FAQ />\n        <Footer />\n      </QuestionProvider>\n    </PageWrapper>\n  );\n}\n","import * as React from 'react';\nimport { useState } from 'react';\nimport { QuestionSummary } from '../../utils/terraform/types';\nimport DropDown from '../../components/forms/Dropdown';\nimport { Option } from '../../types';\nimport Pre from '../../components/code/Pre.style';\n\nconst local: Option = { value: 'local', label: 'Command line' };\nconst github: Option = { value: 'github', label: 'Github Actions' };\nconst circleCI: Option = { value: 'circleCI', label: 'Circle CI' };\nconst wercker: Option = { value: 'wercker', label: 'Oracle Wercker' };\nconst gitlab: Option = { value: 'gitlab', label: 'Gitlab CI' };\n\nconst deploymentOptions: Array<Option> = [\n  local,\n  github,\n  gitlab,\n  circleCI,\n  wercker,\n];\n\nconst Deployment = ({ summary }: { summary: QuestionSummary }) => {\n  const [ci, setCi] = useState<Option>(github);\n  return (\n    <>\n      <p>Depends where you want to deploy it from.</p>\n      <DropDown\n        id={'deployment'}\n        options={deploymentOptions}\n        selectedOption={ci}\n        onChange={setCi}\n        title={''}\n      />\n      {ci === local && <LocalDeployment summary={summary} />}\n      {ci === wercker && <WerckerDeployment summary={summary} />}\n      {ci === github && <GithubDeployment summary={summary} />}\n      {ci === gitlab && <GitlabDeployment summary={summary} />}\n      {ci === circleCI && <CircleCIDeployment summary={summary} />}\n    </>\n  );\n};\n\nconst LocalDeployment = ({ summary }: { summary: QuestionSummary }) => (\n  <>\n    <p>\n      1. Download and install the{' '}\n      <a href=\"https://aws.amazon.com/cli/\">AWS CLI</a>.\n    </p>\n    <p>2. Add the following to your package.json</p>\n    <Pre>\n      &quot;scripts&quot;: &#123;\n      <br />\n      {'  '}...\n      <br />\n      {'  '}&quot;deploy&quot;: &quot;aws s3 sync build/ s3://\n      {summary.bucketName || 'my-beautiful-bucket'}&quot;\n      <br />\n      &#125;\n      <br />\n    </Pre>\n    <p>\n      This will sync the local folder build to s3. You might have to adjust that\n      for your own setup.\n    </p>\n    <p>\n      With the script above, you will be able to deploy to S3 using{' '}\n      <code>yarn deploy</code> locally, given that you have your AWS credentials\n      in the environment.\n    </p>\n  </>\n);\n\nconst WerckerDeployment = ({ summary }: { summary: QuestionSummary }) => (\n  <>\n    <p>\n      1. Add the following code to your <code>wercker.yml</code>\n    </p>\n    <Pre>\n      deploy_frontend:\n      <br />\n      {'  '}steps:\n      <br />\n      {'    '}- script:\n      <br />\n      {'      '}name: install dependencies\n      <br />\n      {'      '}code: yarn\n      <br />\n      {'    '}- script:\n      <br />\n      {'      '}name: build frontend\n      <br />\n      {'      '}code: npm run build\n      <br />\n      {'    '}- s3sync:\n      <br />\n      {'      '}source_dir: build\n      <br />\n      {'      '}delete-removed: true\n      <br />\n      {'      '}key-id: $AWS_ACCESS_KEY_ID\n      <br />\n      {'      '}key-secret: $AWS_SECRET_ACCESS_KEY\n      <br />\n      {'      '}bucket-url: s3://$AWS_S3_BUCKET_NAME\n      <br />\n      {'    '}- script:\n      <br />\n      {'      '}name: invalidate cloudfront cache\n      <br />\n      {'      '}code: |\n      <br />\n      {'        '}if [[ -n &quot;$AWS_CDN_DISTRIBUTION_ID&quot; ]]; then\n      <br />\n      {'          '}sudo apt-get update\n      <br />\n      {'          '}sudo apt-get install unzip -y\n      <br />\n      {'          '}sudo apt-get install libpython-dev -y\n      <br />\n      {'          '}wget https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\n      <br />\n      {'          '}unzip awscli-bundle.zip\n      <br />\n      {'          '}sudo ./awscli-bundle/install -i /usr/local/aws -b\n      /usr/local/bin/aws\n      <br />\n      {'          '}rm -rf awscli-bundle*\n      <br />\n      {'          '}aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID\n      <br />\n      {'          '}aws configure set aws_secret_access_key\n      $AWS_SECRET_ACCESS_KEY\n      <br />\n      {'          '}aws cloudfront create-invalidation --distribution-id\n      $AWS_CDN_DISTRIBUTION_ID --paths &quot;/&#42;&quot;\n      <br />\n      {'        '}fi\n    </Pre>\n    <p>\n      Set this pipeline up in{' '}\n      <a href=\"https://app.wercker.com\">app.wercker.com</a> with the required\n      keys, and add a workflow to run it on master.\n    </p>\n  </>\n);\n\nconst GithubDeployment = ({ summary }: { summary: QuestionSummary }) => (\n  <>\n    <p>\n      1. Add the following file to your repo: <code>.github/workflows/main.yml</code>\n    </p>\n    <Pre>\n      name: Production Build\n      <br />on:\n      <br />{'  '}pull_request:\n      <br />{'  '}push:\n      <br />{'  '}{'  '}branches:\n      <br />{'  '}{'  '}{'  '}- master\n      <br />jobs:\n      <br />{'  '}build:\n      <br />{'  '}{'  '}runs-on: ubuntu-latest\n<br />\n      <br />{'  '}{'  '}strategy:\n      <br />{'  '}{'  '}{'  '}matrix:\n      <br />{'  '}{'  '}{'  '}{'  '}node-version: [13.x]\n<br />\n      <br />{'  '}{'  '}steps:\n      <br />{'  '}{'  '}- uses: actions/checkout@v1\n      <br />{'  '}{'  '}- name: Use Node.js $&#123;&#123; matrix.node-version &#125;&#125;\n      <br />{'  '}{'  '}uses: actions/setup-node@v1\n      <br />{'  '}{'  '}with:\n      <br />{'  '}{'  '}{'  '}node-version: $&#123;&#123; matrix.node-version &#125;&#125;\n      <br />{'  '}{'  '}- name: Yarn Install\n      <br />{'  '}{'  '}{'  '}run: |\n      <br />{'  '}{'  '}{'  '}{'  '}yarn install\n      <br />{'  '}{'  '}- name: Production Build\n      <br />{'  '}{'  '}{'  '}run: |\n      <br />{'  '}{'  '}{'  '}{'  '}yarn build\n      <br />{'  '}{'  '}- name: Deploy to S3\n      <br />{'  '}{'  '}{'  '}uses: jakejarvis/s3-sync-action@master\n      <br />{'  '}{'  '}{'  '}with:\n      <br />{'  '}{'  '}{'  '}{'  '}args: --acl public-read --delete\n      <br />{'  '}{'  '}{'  '}env:\n      <br />{'  '}{'  '}{'  '}{'  '}AWS_S3_BUCKET: $&#123;&#123; secrets.AWS_PRODUCTION_BUCKET_NAME &#125;&#125;\n      <br />{'  '}{'  '}{'  '}{'  '}AWS_ACCESS_KEY_ID: $&#123;&#123; secrets.AWS_ACCESS_KEY_ID &#125;&#125;\n      <br />{'  '}{'  '}{'  '}{'  '}AWS_SECRET_ACCESS_KEY: $&#123;&#123; secrets.AWS_SECRET_ACCESS_KEY &#125;&#125;\n      <br />{'  '}{'  '}{'  '}{'  '}AWS_REGION: &quot;{summary.region}&quot;\n      <br />{'  '}{'  '}{'  '}{'  '}SOURCE_DIR: &quot;public&quot;\n    </Pre>\n    <p>\n      Set this up in the Actions tab in your Github repo.\n    </p>\n  </>\n);\n\nexport const GitlabDeployment  = ({ summary }: { summary: QuestionSummary }) => (\n  <>\n    <p>See <a href=\"https://hackernoon.com/using-gitlab-ci-cd-to-auto-deploy-your-vue-js-application-to-aws-s3-9affe1eb3457\">this article</a> for some hints.</p>\n    <Pre>\n      deploy prod:\n      <br />{' '}image: python:latest\n      <br />{' '}stage: deploy\n      <br />{' '}only:\n      <br />{'   '}- tags\n      <br />{' '}script:\n      <br />{'   '}- pip install awscli\n      <br />{'   '}- aws s3 sync ./dist s3://YOUR_BUCKET_NAME\n    </Pre>\n    </>\n\n)\n\nexport const CircleCIDeployment  = ({ summary }: { summary: QuestionSummary }) => (\n  <p>See <a href=\"https://circleci.com/developer/orbs/orb/circleci/aws-s3#commands-sync\">CircleCI S3 Orbs</a></p>\n)\n\n\n\nexport default Deployment;\n","import { useState } from 'react';\nimport QuestionTitle from \"./QuestionTitle.styles\";\nimport FAQAnswer from \"./FAQAnswer.styles\";\nimport { FAQuestion } from \"./types\";\n\nconst FAQAccordian = ({ question }: { question: FAQuestion }) => {\n  const [isOpen, setOpen] = useState<boolean>(false);\n\n  const children =\n    typeof question.answer === 'string'\n      ? divideText(question.answer)\n      : question.answer;\n  return (\n    <div id={question.id}>\n      <QuestionTitle onClick={() => setOpen((open) => !open)}>\n        {question.title}\n      </QuestionTitle>\n      <FAQAnswer open={isOpen}>{children}</FAQAnswer>\n    </div>\n  );\n};\n\nconst divideText = (text: string) => {\n  return (\n    <>\n      {text.split('\\n').map((t, i) => (\n        // eslint-disable-next-line react/no-array-index-key\n        <p key={i}>{t}</p>\n      ))}\n    </>\n  );\n};\n\n\nexport default FAQAccordian;\n","import styled from 'styled-components';\n\nconst FAQAnswer = styled.div`\n  padding-left: 1rem;\n  border-left: 2px solid grey;\n  display: ${(p) => (p.open ? 'block' : 'none')};\n`;\n\nexport default FAQAnswer;\n","import styled from 'styled-components';\nimport * as React from 'react';\nimport FAQAnswer from './FAQAnswer.styles';\n\nconst QuestionTitle = styled.button`\n  width: 100%;\n  background: none;\n  border: 2px dashed transparent;\n  outline: none;\n  text-align: left;\n  font-size: 1.3rem;\n  padding: 0;\n  margin-top: 0.3rem;\n\n  &:focus,\n  &:active {\n    color: ${(p) => p.color || p.theme.colors.secondary};\n\n    & + ${FAQAnswer} {\n      border-left-color: ${(p) => p.color || p.theme.colors.secondary};\n    }\n  }\n`;\n\nexport default QuestionTitle;\n","import Header from '../../components/Header.style';\nimport Pre from '../../components/code/Pre.style';\nimport useQuestions, { useSummary } from '../../questions/useQuestions';\nimport { Section } from '../../components/utils';\nimport { QuestionSummary } from '../../utils/terraform/types';\nimport Deployment from './Deployment';\nimport FAQAccordian from './FAQAccordian';\nimport { FAQuestion } from './types';\n\nconst FAQ = () => {\n  const { hasAnsweredAll } = useQuestions();\n  const summary = useSummary();\n  if (!hasAnsweredAll) {\n    return null;\n  }\n  const faqData = getFAQuestions(summary);\n  return (\n    <Section id=\"faq\">\n      <Header>Frequently asked questions</Header>\n      {faqData.map((q) => (\n        <FAQAccordian key={q.id} question={q} />\n      ))}\n    </Section>\n  );\n};\n\nconst getFAQuestions = (summary: QuestionSummary): FAQuestion[] => {\n  return [\n    {\n      id: 'faq:deploy',\n      title: 'How do I deploy to this S3 bucket?',\n      answer: <Deployment summary={summary} />,\n    },\n    {\n      id: 'faq:charged',\n      title: 'How much will I be charged?',\n      answer: (\n        <>\n          <p>Very little.</p>\n          <p>\n            S3 and Cloudfront are basic, cheap infrastructure. Since AWS charges\n            per use, it&apos;s impossible to say exactly, but 1$ per month would\n            likely covers 1000 monthly users for a lightweight web app.\n          </p>\n          <p>\n            If you have recently signed up for AWS, the expenses will commonly\n            be included in the free tier and you won&apos;t pay anything at all.\n          </p>\n          <p>\n            For more details on file hosting and data transfer fees, see {' '}\n            <a href=\"https://aws.amazon.com/s3/pricing/\">\n              aws.amazon.com/s3/pricing\n            </a>.\n          </p>\n        </>\n      ),\n    },\n    {\n      id: 'faq:pre-deploy-change',\n      title: 'Can I change the input before I deploy it?',\n      answer: (\n        <>\n          <p>Yes, go right ahead!</p>\n          <p>\n            Hopefully, the arguments and code is self-explainatory. If not,\n            check out{' '}\n            <a href=\"http://github.com/tomfa/terraform\">\n              github.com/tomfa/terraform\n            </a>{' '}\n            or the{' '}\n            <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest\">\n              Terraform registry\n            </a>\n            , which contains the modules which the repo uses.\n          </p>\n        </>\n      ),\n    },\n    {\n      id: 'faq:stuck-on-validation',\n      title: 'My deployment is stuck on verification of certificate.',\n      answer: (\n        <>\n          <p>\n            The script will stop and wait for the certificate settings to be\n            verified to be correct before continuing.\n          </p>\n          <p>\n            If you use AWS DNS,{' '}\n            {summary.configureDns && (\n              <strong>which it looks like you do –</strong>\n            )}\n            go to your domain registrar, then configure the DNS servers to point\n            to the newly created Route 53 zone that this script has created. You\n            can find the DNS servers that you must point to in the{' '}\n            <a href=\"https://console.aws.amazon.com/route53/v2/hostedzones#\">\n              AWS console &gt; Route 53\n            </a>\n            .\n          </p>\n          <p>\n            If you use a different DNS,{' '}\n            {!summary.configureDns && summary.createCertificates && (\n              <strong>which it looks like you do – </strong>\n            )}\n            you must add DNS records there to match the records wanted from AWS\n            Certificate manager. These records can be found at{' '}\n            <a href=\"https://console.aws.amazon.com/route53/v2/hostedzones#\">\n              AWS console &gt; Certificate Manager\n            </a>\n          </p>\n          <p>\n            Both of these methods require DNS propagation before they take\n            effect, so you might have to wait an hour or even a day. The script\n            times out after 45 min, but you can re-run it tomorrow, and it will\n            continue where it left off.\n          </p>\n          <p>\n            A last resort, can be to add the following line inside terraform\n            code:\n            <Pre>\n              module &quot;certificate&quot; &#123; <br />\n              {'  '}... <br />\n              {'  '}validation_method = EMAIL <br />\n              &#125;\n            </Pre>\n            Note that you will have to respond to an email sent to\n            postmaster@your-bucket-domain for the validation to go through, and\n            that this process will have to be re-run every 3 years or so.\n          </p>\n        </>\n      ),\n    },\n    {\n      id: 'faq:name-taken',\n      title: 'My bucket name was taken',\n      answer: (\n        <>\n          <p>\n            You can rename your bucket and try again. If you want to keep your\n            the domain name, simply replace the bucket_name variables in the\n            script, but keep the domain variables, and run the script again.\n          </p>\n          <p>\n            Tip: you can go to replace-me.s3.amazonaws.com to check if a given\n            bucket is available. If it&apos;s not take, it will reply with error\n            message <code>The specified bucket does not exist</code>\n          </p>\n        </>\n      ),\n    },\n    {\n      id: 'faq:deploy-twice',\n      title: 'What happens if I deploy it twice?',\n      answer: (\n        <>\n          <p>\n            If you still have your <code>terraform.tfstate</code> file, it will\n            check the AWS resources, and check that they still match the code.\n            If necessary, it will ask for confirmation before changing the\n            infrastructure to match the code.\n          </p>\n          <p>\n            If you don&apos;t have your state file, it will attempt to recreate\n            everything. It will likely fail due to a duplicate bucket name,\n            unless you&apos;ve changed that.\n          </p>\n        </>\n      ),\n    },\n    {\n      id: 'faq:post-deploy-change',\n      title: 'Can I change the input and redeploy?',\n      answer: (\n        <>\n          <p>\n            Yes. You can change the region, bucket name and most other things.\n            {summary.createCertificates && (\n              <>\n                Note that if you make changes that affect the certificate it\n                might be re-created.{' '}\n                {!summary.configureDns && (\n                  <>\n                    Since you seem to not be using AWS for DNS, you will then\n                    have to reconfigure the DNS pointers to the certificate\n                    afterwards.\n                  </>\n                )}\n              </>\n            )}\n          </p>\n          <p>\n            When you want to apply the changes, just re-run{' '}\n            <code>terraform apply</code>.\n          </p>\n        </>\n      ),\n    },\n    {\n      id: 'faq:terraform-destroy',\n      title: 'How can I remove everything I just created?',\n      answer: (\n        <p>\n          <code>terraform destroy</code> will take down all created\n          infrastructure, as long as you have kept the{' '}\n          <code>terraform.tfstate</code> file. If not, you will have to delete\n          it from the <a href=\"https://console.aws.amazon.com/\">AWS console</a>.\n        </p>\n      ),\n    },\n    {\n      id: 'faq:generated-files',\n      title: 'What do I do with the generated files?',\n      answer: (\n        <>\n          <h4>Short answer:</h4>\n          <p>\n            Save <code>terraform.tfstate</code> for use later. The{' '}\n            <code>.terraform</code> folder is basically a cache, and can be\n            deleted.\n          </p>\n          <h4>Longer answer:</h4>\n          <p>\n            After you have run <code>terraform apply</code>, a folder will be\n            created named <code>.terraform</code> along with a file named{' '}\n            <code>terraform.tfstate</code>\n          </p>\n          <p>\n            If you save <code>terraform.tfstate</code> you can make changes in\n            the code, and re-apply to make those changes take effect in the\n            infrastructure. This file is also needed to perform{' '}\n            <code>terraform destroy</code> in case you wish to take down the\n            infrastructure.\n          </p>\n          <p>\n            It&apos;s OK to delete everything as well, but then you&apos;ll have\n            to make further changes using the{' '}\n            <a href=\"https://console.aws.amazon.com\">AWS console</a>.\n          </p>\n        </>\n      ),\n    },\n  ];\n};\n\nexport default FAQ;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;;;;;;;;;;;;;;;ACxxrgDA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAXA;AAiBA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;;;;;;;;;;;;;;;;;;;;;;AC3NA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAMA;AACA;AAEA;;;;;;;;;;;;AClCA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAGA;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAYA;AAAA;AAGA;AAAA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;ACxjBA;AAyBA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbA;AAsBA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA7CA;AAwDA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbA;AAmBA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAXA;AAoBA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAvBA;AA6BA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAaA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA3BA;AAiCA;AACA;AACA;;;;A","sourceRoot":""}
{"version":3,"file":"static/webpack/static/development/pages/index.js.767bfb40c51c34fab6bb.hot-update.js","sources":["webpack:///./components/Footer/index.tsx","webpack:///./components/forms/SubmitButton.styles.tsx","webpack:///./components/utils.tsx","webpack:///./pages/index.tsx","webpack:///./styles/theme.ts"],"sourcesContent":["import { SectionBackground } from '../utils';\nimport { useTheme } from '../../styles/theme';\nimport FooterLinks from './FooterLinks.style';\nimport Link from './Link';\nimport FooterAside from './FooterAside.style';\nimport FooterHeader from './FooterHeader.style';\nimport FooterSection from './FooterSection.style';\n\nconst Footer = () => {\n  const theme = useTheme();\n  return (\n    <SectionBackground\n      backgroundColor={theme.colors.bgSecondary}\n      color={theme.colors.textSecondary}\n      marginTop={'3rem'}>\n      <FooterSection>\n        <FooterAside>\n          <FooterHeader>Wat</FooterHeader>\n          <p>\n            I love Heroku, Vercel seems awesome, Squarespace is a great product.\n            All respect to those who maintain their own servers at DigitalOcean.\n          </p>\n          <p>\n            But when it comes to simply hosting a Webapp or static files, AWS S3\n            is usually faster, cheaper, more realible and easier â€“ as long as\n            you stay clear of the AWS console.\n          </p>\n          <p>Let me help you with that.</p>\n        </FooterAside>\n        <FooterAside right>\n          <FooterHeader>Articles</FooterHeader>\n          <FooterLinks>\n            <Link\n              href={\n                'https://medium.com/trackstack/deploying-a-react-app-to-aws-s3-with-github-actions-b1cb9ba75c95'\n              }>\n              Deploying Webapps to S3\n            </Link>\n            <Link href={'https://github.com/tomfa/s3-uploader'}>\n              Allowing user upload to S3\n            </Link>\n            <Link\n              href={\n                'https://learn.hashicorp.com/tutorials/terraform/github-actions'\n              }>\n              Terraform CI deploy\n            </Link>\n          </FooterLinks>\n\n          <FooterHeader>Links</FooterHeader>\n          <FooterLinks>\n            <Link href={'https://github.com/tomfa/ihasabucket'}>Github</Link>\n            <Link href={'https://linkedin.com/in/fagerbekk'}>LinkedIn</Link>\n            <Link href={'https://tomfa.github.io'}>Homepage</Link>\n          </FooterLinks>\n        </FooterAside>\n      </FooterSection>\n    </SectionBackground>\n  );\n};\n\nexport default Footer;\n","import styled from 'styled-components';\n\nconst SubmitButton = styled.button`\n  color: ${(p) => p.theme.colors.textSecondary};\n  background-color: ${(p) =>\n    p.complete ? p.theme.colors.primary : p.theme.colors.secondary};\n  border: none;\n  flex: 0.5;\n  position: relative;\n\n  outline-style: dashed;\n  outline-width: 2px;\n  cursor: pointer;\n\n  &:focus,\n  &:active {\n    outline-color: ${(p) => p.theme.colors.primary};\n  }\n\n  &:before {\n    content: '';\n    display: block;\n    width: 10px;\n    height: 20px;\n    border: 3px solid white;\n    position: absolute;\n    left: calc(50% - 10px);\n    top: 12px;\n    -webkit-transition: all 0.12s, border-color 0.08s;\n    transition: all 0.12s, border-color 0.08s;\n    border-top-color: transparent;\n    border-left-color: transparent;\n    transform: rotate(45deg);\n  }\n`;\n\nexport default SubmitButton;\n","import styled from 'styled-components';\n\nexport const SectionBackground = styled.div`\n  width: 100%;\n  background-color: ${(props) => props.backgroundColor};\n  color: ${(props) => props.color};\n  margin-top: ${(props) => props.marginTop};\n`;\n\nexport const Section = styled.section`\n  max-width: ${(p) => p.theme.layout.maxWidth}px;\n  width: 100vw;\n  margin: 0 auto;\n  padding: 2rem;\n\n  @media (max-width: 350px) {\n    padding: 1rem;\n  }\n`;\n\nexport const PageWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100vw;\n`;\n\nexport const Colored = styled.span`\n  color: ${(p) => p.color || p.theme.colors.primary};\n`;\n\nexport const sleep = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n","import { useCallback, useState } from 'react';\nimport { Colored, PageWrapper, Section } from '../components/utils';\nimport Header from '../components/HeaderSection';\nimport BlockQuote from '../components/BlockQuote';\nimport RadioGroup from '../components/forms/RadioGroup';\nimport CheckboxGroup from '../components/forms/CheckboxGroup';\nimport {\n  CheckboxSelectionMap,\n  generateDefaultCheckboxSelectedOptions,\n  generateDefaultRadioSelectedOptions,\n  questions,\n  RadioSelectionMap,\n  TextAnswerMap,\n} from '../utils/questions';\nimport Infrastructure from '../components/Infrastructure';\nimport { BOOL_VALUE, QUESTION_ID, VALUES } from '../enums';\nimport Footer from '../components/Footer';\nimport {\n  DropdownQuestion,\n  InputQuestion,\n  Question,\n  RadioQuestion,\n} from '../types';\nimport TextInput from '../components/forms/TextInput';\nimport DropDown from '../components/forms/Dropdown';\nimport questionData from '../utils/questionData';\n\nexport default function Home() {\n  return (\n    <PageWrapper>\n      <Header />\n      <Intro />\n      <Questionare />\n      <Footer />\n    </PageWrapper>\n  );\n}\n\nconst Intro = () => (\n  <Section>\n    <BlockQuote\n      author={'Lolrus, the bucket walrus'}\n      source={'At the launch of AWS S3 in 2006'}>\n      <>\n        Hosting a<Colored> webapp </Colored>\n        or need to store uploads? Put them in S3 buckets. It&apos;s\n        <Colored> cheap </Colored>\n        and\n        <Colored> reliable</Colored>. With CloudFront cache, it&apos;ll be\n        blazingly <Colored>fast</Colored>. Let&apos;s see how\n        <Colored> easy </Colored>\n        it can be.\n      </>\n    </BlockQuote>\n  </Section>\n);\n\nconst Questionare = () => {\n  const [selectedRadioOptions, setSelectedRadioOptions] = useState<\n    RadioSelectionMap\n  >(generateDefaultRadioSelectedOptions(questions));\n  const [selectedCheckboxOptions, setSelectedCheckboxOptions] = useState<\n    CheckboxSelectionMap\n  >(generateDefaultCheckboxSelectedOptions(questions));\n  const [textAnswers, setTextAnswers] = useState<TextAnswerMap>({});\n  const [questionRenderCount, setQuestionRenderCount] = useState<number>(0);\n  const hasSelected = useCallback(\n    (questionId: QUESTION_ID, value: string | VALUES): boolean => {\n      if (value === VALUES.NOT_EMPTY) {\n        return hasAnswered(questionId);\n      }\n      const question = questions.find((q) => q.id === questionId);\n      if (!question) {\n        throw Error(`Missing question for ${questionId}`);\n      }\n      if (question.type === 'text') {\n        return textAnswers[questionId] && textAnswers[questionId] === value;\n      }\n      if (!question.options.filter((o) => o.value === value)) {\n        throw Error(`Question ${questionId} does not have option ${value}`);\n      }\n      if (question.type === 'radio' || question.type === 'dropdown') {\n        return selectedRadioOptions[question.id]?.value === value;\n      }\n      if (question.type === 'checkbox') {\n        return !!selectedCheckboxOptions[question.id].find(\n          (o) => o.value === value\n        );\n      }\n    },\n    [selectedRadioOptions, selectedCheckboxOptions, questions]\n  );\n  const getTextAnswer = (question: InputQuestion) => {\n    return textAnswers[question.id];\n  };\n  const getRadioAnswer = (question: DropdownQuestion | RadioQuestion) => {\n    return selectedRadioOptions[question.id];\n  };\n\n  const hasAnswered = useCallback(\n    (questionId: QUESTION_ID): boolean => {\n      const question = questions.find((q) => q.id === questionId);\n      if (!question) {\n        throw Error(`Missing question for ${questionId}`);\n      }\n      if (question.type === 'radio' || question.type === 'dropdown') {\n        return selectedRadioOptions[question.id]?.value != null;\n      }\n      if (question.type === 'checkbox') {\n        return selectedCheckboxOptions[question.id].length > 0;\n      }\n      if (question.type === 'text') {\n        return Object.keys(textAnswers).includes(questionId);\n      }\n    },\n    [selectedRadioOptions, selectedCheckboxOptions, questions]\n  );\n  const shouldSkip = useCallback(\n    (question: Question): boolean =>\n      question.showIf &&\n      !!question.showIf.find((c) => !hasSelected(c.questionId, c.value)),\n    [hasSelected]\n  );\n  const hasAnsweredAll = !questions.find(\n    (q) => !hasAnswered(q.id) && !shouldSkip(q)\n  );\n  return (\n    <Section>\n      {questions.slice(0, questionRenderCount + 1).map((question) => {\n        const indexOfAllQuestions = questions.indexOf(question);\n        const isLast = indexOfAllQuestions === questionRenderCount;\n        if (shouldSkip(question)) {\n          if (isLast) {\n            setQuestionRenderCount((q) => q + 1);\n          }\n          return null;\n        }\n        if (question.type === 'radio') {\n          const answerValue = selectedRadioOptions[question.id] || null;\n          return (\n            <RadioGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answerValue}\n              onChange={(value) => {\n                setQuestionRenderCount((c) =>\n                  Math.max(c, indexOfAllQuestions + 1)\n                );\n                setSelectedRadioOptions((prev) => ({\n                  ...prev,\n                  [question.id]: value,\n                }));\n              }}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'checkbox') {\n          return (\n            <CheckboxGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOptions={selectedCheckboxOptions[question.id] || []}\n              onChange={(value) => {\n                setQuestionRenderCount((c) =>\n                  Math.max(c, indexOfAllQuestions + 1)\n                );\n                setSelectedCheckboxOptions((prev) => ({\n                  ...prev,\n                  [question.id]: value,\n                }));\n              }}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'text') {\n          return (\n            <TextInput\n              id={question.id}\n              key={question.id}\n              placeholder={question.placeholder}\n              placeholders={question.placeholders}\n              onSubmit={(value) => {\n                setTextAnswers((prev) => ({\n                  ...prev,\n                  [question.id]: value,\n                }));\n                setQuestionRenderCount((c) =>\n                  Math.max(c, indexOfAllQuestions + 1)\n                );\n              }}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'dropdown') {\n          const answerValue = selectedRadioOptions[question.id] || null;\n          return (\n            <DropDown\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answerValue}\n              onChange={(value) => {\n                setSelectedRadioOptions((prev) => ({\n                  ...prev,\n                  [question.id]: value,\n                }));\n                setQuestionRenderCount((c) =>\n                  Math.max(c, indexOfAllQuestions + 1)\n                );\n              }}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        throw new Error(`Unexpected question type ${question.type}`);\n      })}\n      {hasAnsweredAll && (\n        <Infrastructure\n          webApp={hasSelected(QUESTION_ID.storageType, 'webapp')}\n          shared={hasSelected(QUESTION_ID.aclPublic, BOOL_VALUE.TRUE)}\n          staging={hasSelected(QUESTION_ID.stagingEnv, BOOL_VALUE.TRUE)}\n          staticPage={hasSelected(QUESTION_ID.webappIsStatic, BOOL_VALUE.TRUE)}\n          bucketName={getTextAnswer(questionData['domain-name'])}\n          region={getRadioAnswer(questionData[QUESTION_ID.region]).value}\n        />\n      )}\n    </Section>\n  );\n};\n","import { useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\n\nexport const theme = {\n  fonts: {\n    primary:\n      '-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,\\n' +\n      '    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif',\n    secondary: \"'Barlow Condensed', sans-serif\",\n  },\n  colors: {\n    primary: '#fd9228',\n    secondary: '',\n    bgPrimary: '#fdf6e6',\n    bgSecondary: '#111111',\n    textPrimary: '#000000',\n    textSecondary: '#fafafa',\n    textMuted: '#888888',\n    links: '#0070f3',\n  },\n  layout: {\n    maxWidth: 640,\n  },\n};\n\nexport const useTheme = (): typeof theme => {\n  const themeContext = useContext(ThemeContext);\n  return (themeContext as unknown) as typeof theme;\n};\n\nexport default theme;\n"],"mappings":"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","sourceRoot":""}
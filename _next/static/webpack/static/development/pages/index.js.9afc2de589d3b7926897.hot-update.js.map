{"version":3,"file":"static/webpack/static/development/pages/index.js.9afc2de589d3b7926897.hot-update.js","sources":["webpack:///./components/Footer/FooterHeader.tsx","webpack:///./components/Footer/FooterLinks.style.tsx","webpack:///./components/Footer/FooterSection.tsx","webpack:///./components/Footer/Link.tsx","webpack:///./components/Footer/index.tsx","webpack:///./components/Header.style.tsx","webpack:///./pages/index.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport Header from \"../Header.style\";\n\nconst FooterHeader = styled(Header)`\n  color: ${p => p.theme.colors.textSecondary};\n  flex: 1;\n  font-size: 1.3rem\n`;\n\nexport default FooterHeader;\n","import styled from 'styled-components';\nconst FooterLinks = styled.ul`\nlist-style: none;\n`;\n\nexport default FooterLinks;\n","import styled from 'styled-components';\nconst FooterSection = styled.aside`\n  flex: 1;\n  text-align: ${props => props.right && 'right'};\n`;\n\nexport default FooterSection;\n","import styled from 'styled-components';\nimport { ReactNode } from 'react';\nconst ListItem = styled.li``;\n\nconst ListItemLink = styled.a`\n  color: white;\n  \n  &:focus {\n    outline: none;\n    color: black;\n  }\n`;\n\nconst Link = ({ url, children }: { url: string; children: ReactNode }) => (\n  <ListItem>\n    <ListItemLink href={url}>{children}</ListItemLink>\n  </ListItem>\n);\n\nexport default Link;\n","import { Section, SectionBackground } from '../utils';\nimport { useTheme } from '../../styles/theme';\nimport FooterLinks from './FooterLinks.style';\nimport Link from './Link';\nimport FooterSection from './FooterSection';\nimport FooterHeader from './FooterHeader';\n\nconst Footer = () => {\n  const theme = useTheme();\n  return (\n    <SectionBackground\n      backgroundColor={theme.colors.primary}\n      color={theme.colors.textSecondary}>\n      <Section style={{ flexDirection: 'row', display: 'flex' }}>\n        <FooterSection>\n          <FooterHeader>Wat</FooterHeader>\n          <p>\n            I love Heroku, I am curious about Vercel, Squarespace is a great\n            product.\n          </p>\n          <p>\n            But when it comes to simply hosting a Webapp or static files, AWS S3\n            is simply better â€“ as long as you stay clear of the AWS console.\n          </p>\n          <p>Let me help you with that.</p>\n        </FooterSection>\n        <FooterSection right>\n          <FooterHeader>Articles</FooterHeader>\n          <FooterLinks>\n            <Link url={'https://vg.no'}>Deploying Webapps to S3</Link>\n            <Link url={'https://vg.no'}>Allowing user upload to S3</Link>\n          </FooterLinks>\n\n          <FooterHeader>Links</FooterHeader>\n          <FooterLinks>\n            <Link url={'https://github.com/tomfa/ihasabucket'}>Github</Link>\n            <Link url={'https://linkedin.com/in/fagerbekk'}>LinkedIn</Link>\n            <Link url={'https://tomfa.github.io'}>Homepage</Link>\n          </FooterLinks>\n        </FooterSection>\n      </Section>\n    </SectionBackground>\n  );\n};\n\nexport default Footer;\n","import styled from 'styled-components';\n\nconst Header = styled.h4`\n  color: ${(p) => p.color || p.theme.colors.textPrimary};\n  font-size: 2rem;\n  margin-bottom: 0.6em;\n  margin-top: 0;\n\n  @media (max-width: 450px) {\n    font-size: 1.4rem;\n  }\n`;\n\nexport default Header;\n","import { useCallback, useState } from 'react';\nimport { Colored, Main, PageWrapper, Section } from '../components/utils';\nimport Header from '../components/HeaderSection';\nimport BlockQuote from '../components/BlockQuote';\nimport RadioGroup from '../components/forms/RadioGroup';\nimport CheckboxGroup from '../components/forms/CheckboxGroup';\nimport {\n  CheckboxSelectionMap,\n  generateDefaultCheckboxSelectedOptions,\n  generateDefaultRadioSelectedOptions,\n  questions,\n  RadioSelectionMap,\n} from '../utils/questions';\nimport Infrastructure from '../components/Infrastructure';\nimport { BOOL_VALUE, QUESTION_ID } from '../enums';\nimport Footer from \"../components/Footer\";\n\nexport default function Home() {\n  const [selectedRadioOptions, setSelectedRadioOptions] = useState<\n    RadioSelectionMap\n  >(generateDefaultRadioSelectedOptions(questions));\n  const [selectedCheckboxOptions, setSelectedCheckboxOptions] = useState<\n    CheckboxSelectionMap\n  >(generateDefaultCheckboxSelectedOptions(questions));\n  const hasSeleted = useCallback(\n    (questionId: QUESTION_ID, value: string): boolean => {\n      const question = questions.find((q) => q.id === questionId);\n      if (!question) {\n        throw Error(`Missing question for ${questionId}`);\n      }\n      if (!question.options.filter((o) => o.value === value)) {\n        throw Error(`Question ${questionId} does not have option ${value}`);\n      }\n      if (question.type === 'radio') {\n        return selectedRadioOptions[question.id]?.value === value;\n      }\n      if (question.type === 'checkbox') {\n        return !!selectedCheckboxOptions[question.id].find(\n          (o) => o.value === value\n        );\n      }\n    },\n    [selectedRadioOptions, selectedCheckboxOptions, questions]\n  );\n\n  return (\n    <PageWrapper>\n      <Header />\n      <Main>\n        <BlockQuote\n          author={'Lolrus, the bucket walrus'}\n          source={'At the launch of AWS S3 in 2006'}>\n          <>\n            Hosting a<Colored> webapp </Colored>\n            or need to store uploads? Put them in S3 buckets. It&apos;s\n            <Colored> cheap </Colored>\n            and\n            <Colored> reliable</Colored>. Let me show how\n            <Colored> easy </Colored>\n            it is.\n          </>\n        </BlockQuote>\n      </Main>\n      <Section>\n        {questions.map((question) => {\n          if (question.type === 'radio') {\n            return (\n              <RadioGroup\n                id={question.id}\n                key={question.id}\n                options={question.options}\n                selectedOption={selectedRadioOptions[question.id] || null}\n                onChange={(value) =>\n                  setSelectedRadioOptions((prev) => ({\n                    ...prev,\n                    [question.id]: value,\n                  }))\n                }\n                title={question.title}\n                description={question.description}\n              />\n            );\n          }\n          if (question.type === 'checkbox') {\n            return (\n              <CheckboxGroup\n                id={question.id}\n                key={question.id}\n                options={question.options}\n                selectedOptions={selectedCheckboxOptions[question.id] || []}\n                onChange={(value) =>\n                  setSelectedCheckboxOptions((prev) => ({\n                    ...prev,\n                    [question.id]: value,\n                  }))\n                }\n                title={question.title}\n                description={question.description}\n              />\n            );\n          }\n          throw new Error(`Unexpected question type ${question.type}`);\n        })}\n        <Infrastructure\n          webApp={hasSeleted(QUESTION_ID.storageType, 'webapp')}\n          shared={hasSeleted(QUESTION_ID.aclPublic, BOOL_VALUE.TRUE)}\n          staging={hasSeleted(QUESTION_ID.stagingEnv, BOOL_VALUE.TRUE)}\n          staticPage={hasSeleted(QUESTION_ID.webappIsStatic, BOOL_VALUE.TRUE)}\n        />\n      </Section>\n      <Footer />\n    </PageWrapper>\n  );\n}\n"],"mappings":"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","sourceRoot":""}
{"version":3,"file":"static/webpack/static/development/pages/index.js.695cbb7be5cd4232875b.hot-update.js","sources":["webpack:///./questions/useQuestions.ts"],"sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { QUESTION_ID } from '../enums';\nimport { Answer, AnswerMap } from '../types';\nimport { Data, useUrlState } from '../utils/useUrlState';\nimport { trail } from '../utils/splitbee';\nimport {\n  getDefaultAnswer,\n  getQuestionsToRender,\n  normalizeAnswer,\n} from './utils';\nimport { questions } from './data';\n\nconst useQuestions = () => {\n  const [hasReceivedInput, setHasReceivedInput] = useState<boolean>(false);\n  const [answeredQuestions, setAnsweredQuestions] = useState<QUESTION_ID[]>([]);\n  const { urlData, updateUrlData } = useUrlState();\n  const [answers, setAnswers] = useState<AnswerMap>({} as AnswerMap);\n\n  useEffect(() => {\n    const initialDefaultAnswersLoaded = Object.keys(answers).length > 0;\n    const hasUrlData = Object.keys(urlData).length > 0;\n    const hasAnsweredQuestions = answeredQuestions.length > 0;\n    if (hasReceivedInput || hasAnsweredQuestions) {\n      return;\n    }\n    if (!initialDefaultAnswersLoaded) {\n      const defaultAnswers = getInitialAnswers();\n      setAnswers(defaultAnswers);\n      return;\n    }\n    if (!hasUrlData) {\n      return;\n    }\n    const urlAnsweredQuestions = getQuestionsInUrlData(urlData);\n    const urlAnswers = getInitialAnswers(urlData);\n    setAnswers(urlAnswers);\n    setAnsweredQuestions(urlAnsweredQuestions);\n  }, [urlData, answers, answeredQuestions, hasReceivedInput]);\n\n  const renderQuestions = useMemo(\n    () => getQuestionsToRender(answers, answeredQuestions),\n    [answeredQuestions, answers]\n  );\n  const hasAnsweredAll = !renderQuestions.find(\n    (q) => !answeredQuestions.includes(q.id)\n  );\n  const updateAnswer = useCallback(\n    (questionId: QUESTION_ID, answer: Answer) => {\n      setHasReceivedInput(true);\n      updateUrlData({ [String(questionId)]: normalizeAnswer(answer) });\n      setAnswers((prevAnswers) => ({\n        ...prevAnswers,\n        [questionId]: answer,\n      }));\n    },\n    [setAnswers, updateUrlData]\n  );\n  const answerQuestion = useCallback(\n    (questionId: QUESTION_ID, answer: Answer) => {\n      updateAnswer(questionId, answer);\n      setAnsweredQuestions((qs) => {\n        if (qs.includes(questionId)) {\n          return qs;\n        }\n        trail(questionId, { answer });\n        return [...qs, questionId];\n      });\n    },\n    [updateAnswer]\n  );\n  return {\n    answers,\n    renderQuestions,\n    updateAnswer,\n    answerQuestion,\n    hasAnsweredAll,\n  };\n};\n\nconst getInitialAnswers = (urlData?: Data) =>\n  questions.reduce(\n    (map, question) => ({\n      ...map,\n      [question.id]: getDefaultAnswer(\n        question,\n        urlData && urlData[question.id] !== undefined\n          ? String(urlData[question.id])\n          : undefined\n      ),\n    }),\n    {} as AnswerMap\n  );\n\nconst getQuestionsInUrlData = (urlData: Data) => {\n  const urlQuestions = Object.keys(urlData) as QUESTION_ID[];\n\n  const hasAnsweredEmptyBucketName =\n    urlQuestions.length && !urlQuestions.includes(QUESTION_ID.bucketName);\n  if (hasAnsweredEmptyBucketName) {\n    urlQuestions.push(QUESTION_ID.bucketName);\n  }\n  return urlQuestions;\n};\n\nexport default useQuestions;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AACA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAIA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AAEA;AAAA;AAFA;AACA;AAaA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}
{"version":3,"file":"static/webpack/static/development/pages/index.js.03e2314565138c35e0ff.hot-update.js","sources":["webpack:///./utils/terraform/terraformText.ts"],"sourcesContent":["import { BUCKET_TYPE, getInputDescription, INPUT } from '../../enums';\nimport { ModuleSpec, TerraformOutput, QuestionSummary } from './types';\nimport { getBucketModuleNames } from './names';\n\nexport const toVariablesText = (modules: ModuleSpec[]) => {\n  const lines = [];\n  const isUsed = (inputVariable: string): boolean =>\n    !!modules.find(\n      (m) =>\n        !!Object.values(m.parameters).find((p) =>\n          p.includes(`var.${inputVariable}`)\n        )\n    );\n  Object.values(INPUT)\n    .filter(isUsed)\n    .forEach((input: INPUT) => {\n      const description = getInputDescription(input);\n      if (!description) {\n        lines.push(`variable \"${input}\" {}`);\n      } else {\n        lines.push(`variable \"${input}\" {`);\n        lines.push(`  description = \"${description}\"`);\n        lines.push(`}`);\n      }\n    });\n  lines.push('');\n  return lines;\n};\n\nexport const toModulesText = (modules: ModuleSpec[]) => {\n  const lines = [];\n  modules.forEach((module) => {\n    lines.push(`module \"${module.name}\" {`);\n    lines.push(`  source = \"${module.source}\"`);\n    Object.entries(module.parameters).forEach(([key, value]) => {\n      lines.push(`  ${key} = ${value}`);\n    });\n    lines.push(`}`);\n    lines.push('');\n  });\n  return lines;\n};\n\nexport const getOutputLines = (props: QuestionSummary) => {\n  const lines = [];\n  const bucketModuleNames = getBucketModuleNames(props);\n  const bucketType = props.webApp\n    ? BUCKET_TYPE.WEBAPP\n    : BUCKET_TYPE.FILE_STORAGE;\n\n  const outputs = getOutput({\n    moduleName: bucketModuleNames.main,\n    bucketType,\n    prefix: props.staging ? 'production-' : '',\n  });\n  if (props.staging) {\n    outputs.push(\n      ...getOutput({\n        moduleName: bucketModuleNames.staging,\n        bucketType,\n        prefix: 'staging-',\n      })\n    );\n  }\n  outputs.push(\n    {\n      value: `module.user.AWS_ACCESS_KEY_ID`,\n      label: `AWS_ACCESS_KEY_ID`,\n    },\n    {\n      value: `module.user.AWS_SECRET_ACCESS_KEY`,\n      label: `AWS_SECRET_ACCESS_KEY`,\n    }\n\n  );\n  outputs.forEach((output) => lines.push(...outputAsText(output)));\n\n  return lines;\n};\n\nconst getOutput = ({\n  bucketType,\n  moduleName,\n  prefix = '',\n}: {\n  bucketType: BUCKET_TYPE;\n  moduleName: string;\n  prefix?: string;\n}): TerraformOutput[] => {\n  const outputs = [];\n  outputs.push({\n    value: `module.${moduleName}.BUCKET_NAME`,\n    label: `${prefix}BUCKET_NAME`,\n  });\n\n  if (bucketType === BUCKET_TYPE.WEBAPP) {\n    outputs.push({\n      value: `module.${moduleName}.CLOUDFRONT_URL`,\n      label: `${prefix}CLOUDFRONT_URL`,\n    });\n  }\n  return outputs;\n};\n\nconst outputAsText = (output: TerraformOutput): string[] => {\n  const lines = [];\n  lines.push(`output \"${output.label}\" {`);\n  lines.push(`  value = ${output.value}`);\n  if (output.description) {\n    lines.push(`  description = ${output.description}`);\n  }\n  lines.push('}');\n  return lines;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AADA;AAFA;AACA;AAMA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;A","sourceRoot":""}
{"version":3,"file":"static/webpack/static/development/pages/index.js.fcd885ed7b362913eab9.hot-update.js","sources":["webpack:///./questions/data.ts","webpack:///./questions/useQuestions.ts","webpack:///./questions/utils.ts","webpack:///./sections/Infrastructure.tsx","webpack:///./sections/Questionare.tsx"],"sourcesContent":["import { AWS_REGIONS, BOOL_VALUE, QUESTION_ID, VALUES } from '../enums';\nimport {\n  DropdownQuestion,\n  InputQuestion,\n  Question,\n  QuestionType,\n  RadioQuestion,\n} from '../types';\n\nexport const questions: Question[] = [\n  {\n    id: QUESTION_ID.domainName,\n    title: '',\n    type: QuestionType.TEXT,\n    placeholders: [\n      'mydomain.com',\n      'uploads.mydomain.com',\n      'staging.mydomain.com',\n      'www.mydomain.com',\n      'test.mydomain.com',\n      'uploads.mydomain.com',\n    ],\n    description: `We will use this as the S3 bucket name. The bucket name is permanent, but it doesn't have to match an actual domain. It does however have to be unique on S3, so \"example\" or \"my-bucket\" will not work. If you leave it empty, you'll be prompted for a bucket name at deploy time.`,\n  } as InputQuestion,\n  {\n    id: QUESTION_ID.storageType,\n    title: 'What are we storing?',\n    type: QuestionType.RADIO,\n    description:\n      'Unlike normal file storage, web apps like React and Vue have a default path, and error pages.',\n    options: [\n      { value: 'webapp', label: 'A web app' },\n      { value: 'files', label: 'Static files or media uploads' },\n    ],\n  } as RadioQuestion,\n  {\n    id: QUESTION_ID.webappIsStatic,\n    title: 'Is the web app statically generated?',\n    type: QuestionType.RADIO,\n    description:\n      'Statically generated sites can be optimized for search engines by returning correct HTTP status codes. If you are uncertain, select No.',\n    options: [\n      { value: BOOL_VALUE.TRUE, label: 'Yes (e.g. Next, Gatsby, Nuxt)' },\n      { value: BOOL_VALUE.FALSE, label: 'No (e.g. plain Vue or React)' },\n    ],\n    showIf: [{ questionId: QUESTION_ID.storageType, value: 'webapp' }],\n  } as RadioQuestion,\n  {\n    id: QUESTION_ID.aclPublic,\n    title: 'Should content be publicly available?',\n    type: QuestionType.RADIO,\n    description:\n      'If our files hold secret or personal information, we will need a stricter security policy than if we are storing publicly available files, e.g. media files for a CMS.',\n    options: [\n      { value: BOOL_VALUE.TRUE, label: 'Yes, make files public' },\n      {\n        value: BOOL_VALUE.FALSE,\n        label: 'No, let me control access to the files',\n      },\n    ],\n    showIf: [{ questionId: QUESTION_ID.storageType, value: 'files' }],\n  } as RadioQuestion,\n\n  {\n    id: QUESTION_ID.configureDns,\n    title: 'Should AWS set up DNS pointers?',\n    type: QuestionType.RADIO,\n    description:\n      'Should we setup DNS pointers for your domain? (Recommended). Route 53 costs 1.5$ / month',\n    options: [\n      { value: BOOL_VALUE.TRUE, label: 'Yes, please do' },\n      {\n        value: BOOL_VALUE.FALSE,\n        label: `No, I'll set up DNS afterwards`,\n      },\n    ],\n    showIf: [{ questionId: QUESTION_ID.domainName, value: VALUES.NOT_EMPTY }],\n  } as RadioQuestion,\n  {\n    id: QUESTION_ID.createCertificates,\n    title: 'Should AWS create certificates to support the domain?',\n    type: QuestionType.RADIO,\n    description:\n      'AWS can create HTTPS certificates for us. This is recommended and free of charge.',\n    options: [\n      { value: BOOL_VALUE.TRUE, label: 'Please do' },\n      {\n        value: BOOL_VALUE.FALSE,\n        label: 'No, I`ll configure certificates myself',\n      },\n    ],\n    showIf: [\n      { questionId: QUESTION_ID.domainName, value: VALUES.NOT_EMPTY },\n      { questionId: QUESTION_ID.configureDns, value: BOOL_VALUE.FALSE },\n    ],\n  } as RadioQuestion,\n  {\n    id: QUESTION_ID.region,\n    title: 'In what region do you want the buckets?',\n    type: QuestionType.DROPDOWN,\n    defaultValue: AWS_REGIONS.EU_NORTH_1,\n    description:\n      'A region closer to your users can give an extra performance boost.',\n    options: Object.values(AWS_REGIONS).map((value) => ({\n      value,\n      label: value,\n    })),\n  } as DropdownQuestion,\n  {\n    id: QUESTION_ID.stagingEnv,\n    title: 'Want a test environment?',\n    type: QuestionType.RADIO,\n    description:\n      \"A staging (or test) environment would mean a duplicate set of buckets. If you're uncertain, select No. You can always create a staging environment later.\",\n    options: [\n      {\n        value: BOOL_VALUE.TRUE,\n        label: 'Yes, please create a separate set of buckets for testing',\n      },\n      { value: BOOL_VALUE.FALSE, label: \"No, I won't need that\" },\n    ],\n  } as RadioQuestion,\n];\n\nexport const questionMap = questions.reduce(\n  (map, question) => ({ ...map, [question.id]: question }),\n  {} as { [id in QUESTION_ID]: Question }\n);\n","import { useCallback, useMemo, useState } from 'react';\n\nimport { QUESTION_ID } from '../enums';\nimport { Answer, AnswerMap } from '../types';\nimport { getDefaultAnswer, getQuestionsToRender } from './utils';\nimport { questions } from './data';\n\nconst defaultAnswers = questions.reduce(\n  (map, question) => ({ ...map, [question.id]: getDefaultAnswer(question) }),\n  {} as AnswerMap\n);\n\nconst useQuestions = () => {\n  const [answeredQuestions, setAnsweredQuestions] = useState<QUESTION_ID[]>([]);\n  const [answers, setAnswers] = useState<AnswerMap>(defaultAnswers);\n  const renderQuestions = useMemo(\n    () => getQuestionsToRender(answers, answeredQuestions),\n    [answeredQuestions, answers]\n  );\n  const hasAnsweredAll = !renderQuestions.find(\n    (q) => !answeredQuestions.includes(q.id)\n  );\n  const answerQuestion = useCallback(\n    (questionId: QUESTION_ID, answer: Answer) => {\n      setAnswers((prevAnswers) => ({\n        ...prevAnswers,\n        [questionId]: answer,\n      }));\n      setAnsweredQuestions((qs) => [...qs, questionId]);\n    },\n    []\n  );\n  return { answers, renderQuestions, answerQuestion, hasAnsweredAll };\n};\n\nexport default useQuestions;\n","import { BOOL_VALUE, QUESTION_ID, VALUES } from '../enums';\nimport {\n  Answer,\n  AnswerMap,\n  CheckboxAnswer,\n  DropdownAnswer,\n  Question,\n  QuestionDisplayCondition,\n  QuestionType,\n  RadioAnswer,\n  TextAnswer,\n} from '../types';\nimport { questions, questionMap } from './data';\n\nexport const getDefaultAnswer = (question: Question): Answer => {\n  if (question.type === QuestionType.TEXT) {\n    return question.defaultValue || null;\n  }\n  if (\n    question.type === QuestionType.RADIO ||\n    question.type === QuestionType.DROPDOWN\n  ) {\n    return (\n      question.options.find((o) => o?.value === question.defaultValue) || null\n    );\n  }\n  if (question.type === QuestionType.CHECKBOX) {\n    const defaultValue = question.defaultValue;\n    if (!defaultValue) {\n      return [];\n    }\n    if (typeof defaultValue === 'string' || typeof defaultValue === 'number') {\n      return question.options.filter((o) => o.value === defaultValue);\n    }\n    if (defaultValue instanceof Array) {\n      return question.options.filter((o) =>\n        (defaultValue as string[]).includes(o.value)\n      );\n    }\n    return null;\n  }\n};\n\nexport const getNormalizedAnswer = (\n  answers: AnswerMap,\n  questionId: QUESTION_ID\n): string => {\n  const question = questionMap[questionId];\n  if (question.type === QuestionType.RADIO) {\n    const answer = answers[questionId] as RadioAnswer;\n    return answer.value;\n  }\n  if (question.type === QuestionType.CHECKBOX) {\n    const answer = answers[questionId] as CheckboxAnswer;\n    return answer.map((o) => o.value).join(', ');\n  }\n  if (question.type === QuestionType.DROPDOWN) {\n    const answer = answers[questionId] as DropdownAnswer;\n    return answer.value;\n  }\n  if (question.type === QuestionType.TEXT) {\n    const answer = answers[questionId] as TextAnswer;\n    return answer;\n  }\n};\n\nexport const hasAnswered = (\n  answers: AnswerMap,\n  questionId: QUESTION_ID,\n  value: string | BOOL_VALUE | VALUES | null\n): boolean => {\n  const question = questionMap[questionId];\n  if (question.type === QuestionType.RADIO) {\n    const answer = answers[questionId] as RadioAnswer;\n    if (answer === null) {\n      return value === null;\n    }\n    return answer.value === value;\n  }\n  if (question.type === QuestionType.CHECKBOX) {\n    const answer = answers[questionId] as CheckboxAnswer;\n    if (answer === null) {\n      return value === null;\n    }\n    return !!answer.find((o) => o.value === value);\n  }\n  if (question.type === QuestionType.DROPDOWN) {\n    const answer = answers[questionId] as DropdownAnswer;\n    if (answer === null) {\n      return value === null;\n    }\n    return answer.value === value;\n  }\n  if (question.type === QuestionType.TEXT) {\n    const answer = answers[questionId] as TextAnswer;\n    if (answer === null) {\n      return value === null;\n    }\n    return answer === value;\n  }\n};\n\nconst isFulfilled = (\n  condition: QuestionDisplayCondition,\n  answers: AnswerMap\n): boolean => hasAnswered(answers, condition.questionId, condition.value);\n\nconst shouldSkip = (question: Question, answers: AnswerMap): boolean => {\n  return (\n    question.showIf && !!question.showIf.find((c) => !isFulfilled(c, answers))\n  );\n};\n\nconst getLastRenderIndex = (\n  answers: AnswerMap,\n  answeredQuestions: QUESTION_ID[],\n  startAtIndex = 0\n) => {\n  const question = questions[startAtIndex];\n  if (!question) {\n    return startAtIndex;\n  }\n  const questionMissingAnswer =\n    !answeredQuestions.includes(question.id) && !shouldSkip(question, answers);\n  if (questionMissingAnswer) {\n    return startAtIndex;\n  }\n  return getLastRenderIndex(answers, answeredQuestions, startAtIndex + 1);\n};\n\nexport const getQuestionsToRender = (\n  answers: AnswerMap,\n  answeredQuestions: QUESTION_ID[]\n): Question[] => {\n  const questionsToRender: Question[] = [];\n  const lastRenderIndex = getLastRenderIndex(answers, answeredQuestions);\n  questions.slice(0, lastRenderIndex + 1).forEach((question) => {\n    if (!shouldSkip(question, answers)) {\n      questionsToRender.push(question);\n    }\n  });\n\n  return questionsToRender;\n};\n","/* eslint-disable react/no-array-index-key */\n\nimport { useEffect, useState } from 'react';\nimport Description from '../components/forms/Description.style';\nimport Header from '../components/Header.style';\nimport { getTerraFormPackage } from '../utils/terraform';\nimport Pre from '../components/code/Pre.style';\nimport Mute from '../components/Mute.style';\nimport LoadingIcon from '../components/icons/LoadingIcon';\nimport Code from '../components/code/Code';\n\ntype Props = {\n  webApp: boolean;\n  staging: boolean;\n  shared: boolean;\n  staticPage: boolean;\n  bucketName: string;\n  region: string;\n};\n\nconst Infrastructure = (props: Props) => {\n  const { description, mainTfContent } = getTerraFormPackage(props);\n  const [loading, setLoading] = useState<boolean>(true);\n  useEffect(() => {\n    setTimeout(() => setLoading(false), 800);\n  }, [mainTfContent]);\n  if (loading) {\n    return <LoadingIcon />;\n  }\n  return (\n    <>\n      <Header as={'h1'}>Bucket is served!</Header>\n      Just run the script below!\n      <Code bucketName={props.bucketName} mainTfContent={mainTfContent} />\n      <Description>\n        The script above will plan the infrastructure and prompt you for\n        confirmation.\n      </Description>\n      <Description>{description}</Description>\n      <Header>Prerequisites</Header>\n      <h4>AWS Account</h4>\n      <p>\n        If you don&apos;t have an AWS account already, sign up at{' '}\n        <a href=\"https://portal.aws.amazon.com/billing/signup#/start\">\n          aws.amazon.com\n        </a>\n      </p>\n      <p>\n        If you don&apos;t have your <strong>AWS_SECRET_ACCESS_KEY</strong> and{' '}\n        <strong>AWS_ACCESS_KEY_ID</strong> handy, find those in the top right\n        corner under your name &gt; Security credentials. They should be\n        exported to your environment:\n      </p>\n      <Pre>\n        <Mute># Export AWS keys{'\\n'}</Mute>\n        export AWS_SECRET_ACCESS_KEY=yaAS$1...{'\\n'}\n        export AWS_ACCESS_KEY_ID=AKIA...\n      </Pre>\n      <h4>Terraform installed</h4>\n      <p>\n        If you haven&apos;t already,{' '}\n        <a href=\"https://learn.hashicorp.com/tutorials/terraform/install-cli\">\n          install Terraform\n        </a>\n      </p>\n      <Pre>\n        <Mute># For Macs with homebrew{'\\n'}</Mute>\n        brew install hashicorp/tap/terraform\n      </Pre>\n      <Description>\n        See{' '}\n        <a href=\"https://learn.hashicorp.com/tutorials/terraform/install-cli\">\n          learn.hashicorp.com/tutorials/terraform/install-cli\n        </a>{' '}\n        for other platforms.\n      </Description>\n    </>\n  );\n};\n\nexport default Infrastructure;\n","import useQuestions from '../questions/useQuestions';\nimport { Section } from '../components/utils';\nimport RadioGroup from '../components/forms/RadioGroup';\nimport CheckboxGroup from '../components/forms/CheckboxGroup';\nimport { BOOL_VALUE, QUESTION_ID } from '../enums';\nimport { CheckboxAnswer, DropdownAnswer, RadioAnswer } from '../types';\nimport TextInput from '../components/forms/TextInput';\nimport DropDown from '../components/forms/Dropdown';\nimport { getNormalizedAnswer, hasAnswered } from '../questions/utils';\nimport Infrastructure from './Infrastructure';\n\nconst Questionare = () => {\n  const {\n    answers,\n    renderQuestions,\n    answerQuestion,\n    hasAnsweredAll,\n  } = useQuestions();\n  return (\n    <Section>\n      {renderQuestions.map((question) => {\n        if (question.type === 'radio') {\n          const answer = answers[question.id] as RadioAnswer;\n          return (\n            <RadioGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'dropdown') {\n          const answer = answers[question.id] as DropdownAnswer;\n          return (\n            <DropDown\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'checkbox') {\n          const answer = answers[question.id] as CheckboxAnswer;\n          return (\n            <CheckboxGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOptions={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'text') {\n          return (\n            <TextInput\n              id={question.id}\n              key={question.id}\n              placeholder={question.placeholder}\n              placeholders={question.placeholders}\n              onSubmit={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        throw new Error(`Unexpected question type in ${question}`);\n      })}\n      {hasAnsweredAll && (\n        <Infrastructure\n          webApp={hasAnswered(answers, QUESTION_ID.storageType, 'webapp')}\n          shared={hasAnswered(answers, QUESTION_ID.aclPublic, BOOL_VALUE.TRUE)}\n          staging={hasAnswered(\n            answers,\n            QUESTION_ID.stagingEnv,\n            BOOL_VALUE.TRUE\n          )}\n          staticPage={hasAnswered(\n            answers,\n            QUESTION_ID.webappIsStatic,\n            BOOL_VALUE.TRUE\n          )}\n          bucketName={getNormalizedAnswer(answers, QUESTION_ID.domainName)}\n          region={getNormalizedAnswer(answers, QUESTION_ID.region)}\n        />\n      )}\n    </Section>\n  );\n};\n\nexport default Questionare;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAQA;AAEA;AACA;AACA;AACA;AAQA;AAZA;AAeA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AARA;AAYA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAVA;AAaA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAKA;AAAA;AAAA;AAAA;AAbA;AAiBA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAKA;AAAA;AAAA;AAAA;AAbA;AAgBA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAfA;AAmBA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAFA;AAAA;AAPA;AAaA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAFA;AAIA;AAAA;AAAA;AAXA;AAgBA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AC7HA;AAIA;AACA;AAEA;AACA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AAEA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/IA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AACA;AACA;;;;;;;;;;;;;A","sourceRoot":""}
{"version":3,"file":"static/webpack/static/development/pages/index.js.fa2773399f4077971556.hot-update.js","sources":["webpack:///./sections/Infrastructure.tsx","webpack:///./sections/Questionare.tsx"],"sourcesContent":["/* eslint-disable react/no-array-index-key */\n\nimport { useEffect, useState } from 'react';\nimport Description from '../components/forms/Description.style';\nimport Header from '../components/Header.style';\nimport { getTerraFormPackage } from '../utils/terraform';\nimport Pre from '../components/code/Pre.style';\nimport Mute from '../components/Mute.style';\nimport LoadingIcon from '../components/icons/LoadingIcon';\nimport Code from '../components/code/Code';\nimport { ShareLink } from '../components/ShareLink';\nimport { TerraformProps } from '../utils/terraform/types';\nimport { trail } from '../utils/splitbee';\n\nconst Infrastructure = (props: TerraformProps) => {\n  const { description, mainTfContent } = getTerraFormPackage(props);\n  const [loading, setLoading] = useState<boolean>(true);\n  useEffect(() => trail('completed', props), []);\n  useEffect(() => {\n    setTimeout(() => setLoading(false), 800);\n  }, [mainTfContent]);\n  if (loading) {\n    return <LoadingIcon />;\n  }\n\n  return (\n    <>\n      <Header as={'h1'}>Bucket is served!</Header>\n      Just run the script below, or share this{' '}\n      <ShareLink text={getShareTitle(props)}>configuration url</ShareLink> for\n      later.\n      <Code bucketName={props.bucketName} mainTfContent={mainTfContent} />\n      <Description style={{ fontWeight: 'bold' }}>\n        The script above will plan the infrastructure and prompt you for\n        confirmation.\n      </Description>\n      {description.map((text, i) => (\n        <Description key={i}>{text}</Description>\n      ))}\n      <Header>Prerequisites</Header>\n      <h4>AWS Account</h4>\n      <p>\n        If you don&apos;t have an AWS account already, sign up at{' '}\n        <a href=\"https://portal.aws.amazon.com/billing/signup#/start\">\n          aws.amazon.com\n        </a>\n      </p>\n      <p>\n        If you don&apos;t have your <strong>AWS_SECRET_ACCESS_KEY</strong> and{' '}\n        <strong>AWS_ACCESS_KEY_ID</strong> handy, find those in the top right\n        corner under your name &gt; Security credentials. They should be\n        exported to your environment:\n      </p>\n      <Pre>\n        <Mute># Export AWS keys{'\\n'}</Mute>\n        export AWS_SECRET_ACCESS_KEY=yaAS$1...{'\\n'}\n        export AWS_ACCESS_KEY_ID=AKIA...\n      </Pre>\n      <h4>Terraform installed</h4>\n      <p>\n        If you haven&apos;t already,{' '}\n        <a href=\"https://learn.hashicorp.com/tutorials/terraform/install-cli\">\n          install Terraform\n        </a>\n      </p>\n      <Pre>\n        <Mute># For Macs with homebrew{'\\n'}</Mute>\n        brew install hashicorp/tap/terraform\n      </Pre>\n      <Description>\n        See{' '}\n        <a href=\"https://learn.hashicorp.com/tutorials/terraform/install-cli\">\n          learn.hashicorp.com/tutorials/terraform/install-cli\n        </a>{' '}\n        for other platforms.\n      </Description>\n    </>\n  );\n};\n\nconst getShareTitle = ({\n  bucketName,\n  webApp,\n  region,\n  shared,\n}: TerraformProps): string | undefined => {\n  const regionPostfix = region ? ` in ${region}` : '';\n  if (bucketName && region) {\n    return `Launch ${bucketName}${regionPostfix}`;\n  }\n  if (webApp && region) {\n    return `Launch a web app ${regionPostfix}`;\n  }\n  if (!webApp && region) {\n    const aclText = shared ? 'public' : 'private';\n    return `Host ${aclText} files in ${regionPostfix}`;\n  }\n  return undefined;\n};\n\nexport default Infrastructure;\n","import scrollIntoView from 'scroll-into-view';\n\nimport useQuestions from '../questions/useQuestions';\nimport { Section } from '../components/utils';\nimport RadioGroup from '../components/forms/RadioGroup';\nimport CheckboxGroup from '../components/forms/CheckboxGroup';\nimport { BOOL_VALUE, QUESTION_ID } from '../enums';\nimport {\n  CheckboxAnswer,\n  DropdownAnswer,\n  RadioAnswer,\n  TextAnswer,\n} from '../types';\nimport TextInput from '../components/forms/TextInput';\nimport DropDown from '../components/forms/Dropdown';\nimport {\n  getForwardingBucketValue,\n  getNormalizedAnswer,\n  hasAnswered,\n} from '../questions/utils';\nimport Infrastructure from './Infrastructure';\nimport { useEffect } from \"react\";\n\nconst Questionare = () => {\n  const {\n    answers,\n    renderQuestions,\n    updateAnswer,\n    answerQuestion,\n    hasAnsweredAll,\n  } = useQuestions();\n  useEffect(() => {\n    if (hasAnsweredAll) {\n      const element = document.getElementById('infrastructure');\n      if (element) {\n        scrollIntoView(element, { align: { top: 0 } });\n      }\n    }\n  }, [hasAnsweredAll]);\n  return (\n    <Section>\n      {renderQuestions.map((question) => {\n        if (question.type === 'radio') {\n          const answer = answers[question.id] as RadioAnswer;\n          return (\n            <RadioGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'dropdown') {\n          const answer = answers[question.id] as DropdownAnswer;\n          return (\n            <DropDown\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'checkbox') {\n          const answer = answers[question.id] as CheckboxAnswer;\n          return (\n            <CheckboxGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOptions={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'text') {\n          const answer = answers[question.id] as TextAnswer;\n          return (\n            <TextInput\n              id={question.id}\n              key={question.id}\n              value={answer}\n              placeholder={question.placeholder}\n              placeholders={question.placeholders}\n              onChange={(value) => updateAnswer(question.id, value)}\n              onSubmit={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        throw new Error(`Unexpected question type in ${question}`);\n      })}\n      <div id={'infrastructure'} />\n      {hasAnsweredAll && (\n        <Infrastructure\n          webApp={hasAnswered(answers, QUESTION_ID.storageType, 'webapp')}\n          shared={hasAnswered(answers, QUESTION_ID.aclPublic, BOOL_VALUE.TRUE)}\n          staging={hasAnswered(\n            answers,\n            QUESTION_ID.stagingEnv,\n            BOOL_VALUE.TRUE\n          )}\n          staticPage={hasAnswered(\n            answers,\n            QUESTION_ID.webappIsStatic,\n            BOOL_VALUE.TRUE\n          )}\n          createCertificates={\n            hasAnswered(answers, QUESTION_ID.configureDns, BOOL_VALUE.TRUE) ||\n            hasAnswered(\n              answers,\n              QUESTION_ID.createCertificates,\n              BOOL_VALUE.TRUE\n            )\n          }\n          configureDns={hasAnswered(\n            answers,\n            QUESTION_ID.configureDns,\n            BOOL_VALUE.TRUE\n          )}\n          errorPath={getNormalizedAnswer(answers, QUESTION_ID.errorPath)}\n          forwardingBucket={getForwardingBucketValue(answers)}\n          bucketName={getNormalizedAnswer(answers, QUESTION_ID.bucketName)}\n          region={getNormalizedAnswer(answers, QUESTION_ID.region)}\n        />\n      )}\n    </Section>\n  );\n};\n\nexport default Questionare;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpkCA;AACA;AACA;;;;A","sourceRoot":""}
{"version":3,"file":"static/webpack/static/development/pages/index.js.240a73bf6ddc7b988713.hot-update.js","sources":["webpack:///./pages/index.tsx"],"sourcesContent":["import { Colored, Main, PageWrapper, Section } from '../components/utils';\nimport Header from '../components/Header';\nimport BlockQuote from '../components/BlockQuote';\nimport { useState } from 'react';\nimport RadioGroup from '../components/forms/RadioGroup';\nimport { Option, Question } from '../components/forms/types';\nimport CheckboxGroup from '../components/forms/CheckboxGroup';\n\nconst questions: Question[] = [\n  {\n    id: 'storage-type',\n    title: 'What do we store',\n    type: 'radio',\n    description:\n      'Unlike normal file storage, webapps like React and Vue have a ' +\n      'default path, and error pages.',\n    options: [\n      { value: 'webapp', label: 'A webapp' },\n      { value: 'files', label: 'Files' },\n    ],\n  },\n  {\n    id: 'staging-env',\n    title: 'Do we want a staging environment',\n    type: 'radio',\n    description:\n      'A staging (or test) environment would mean a duplicate ' +\n      'set of buckets. The cost is insignificant.',\n    options: [\n      { value: true, label: 'Yes' },\n      { value: false, label: 'No' },\n    ],\n  },\n];\n\ntype RadioSelectionMap = {\n  [questionId: string]: Option | null;\n};\ntype CheckboxSelectionMap = {\n  [questionId: string]: Option[];\n};\n\nconst getDefaultRadioOption = (question: Question): Option | null =>\n  question.options.find((o) => o.value === question.defaultValue) || null;\n\nconst getDefaultCheckboxOption = (question: Question): Option[] => {\n  if (!question.defaultValue) {\n    return [];\n  }\n  if (typeof question.defaultValue === 'string') {\n    return question.options.filter((o) => o.value === question.defaultValue);\n  }\n  if (question.defaultValue instanceof Array) {\n    return question.options.filter((o) =>\n      (question.defaultValue as (string | number)[]).includes(o.value)\n    );\n  }\n  return [];\n};\n\nconst generateDefaultRadioSelectedOptions = (\n  questionList: Question[]\n): RadioSelectionMap => {\n  return questionList\n    .filter((q) => q.type === 'radio')\n    .reduce(\n      (map, question) => ({\n        ...map,\n        [question.id]: getDefaultRadioOption(question),\n      }),\n      {}\n    );\n};\n\nconst generateDefaultCheckboxSelectedOptions = (\n  questions: Question[]\n): CheckboxSelectionMap => {\n  return questions\n    .filter((q) => q.type === 'checkbox')\n    .reduce(\n      (map, question) => ({\n        ...map,\n        [question.id]: getDefaultCheckboxOption(question),\n      }),\n      {}\n    );\n};\n\nexport default function Home() {\n  const [selectedRadioOptions, setSelectedRadioOptions] = useState<\n    RadioSelectionMap\n  >(generateDefaultRadioSelectedOptions(questions));\n  const [selectedCheckboxOptions, setSelectedCheckboxOptions] = useState<\n    CheckboxSelectionMap\n  >(generateDefaultCheckboxSelectedOptions(questions));\n\n  return (\n    <PageWrapper>\n      <Header />\n      <Main>\n        <BlockQuote\n          author={'Lolrus, the bucket walrus'}\n          source={'At the launch of AWS S3 in 2006'}>\n          <>\n            Hosting a<Colored> webapp </Colored>\n            or need to store uploads? Put them in S3 buckets. It&apos;s\n            <Colored> cheap </Colored>\n            and\n            <Colored> reliable</Colored>. Let me show how\n            <Colored> easy </Colored>\n            it is.\n          </>\n        </BlockQuote>\n      </Main>\n      <Section>\n        {questions.map((question) => {\n          if (question.type === 'radio') {\n            return (\n              <RadioGroup\n                key={question.id}\n                options={question.options}\n                selectedOption={selectedRadioOptions[question.id] || null}\n                onChange={(value) =>\n                  setSelectedRadioOptions((prev) => ({\n                    ...prev,\n                    [question.id]: value,\n                  }))\n                }\n                title={question.title}\n                description={question.description}\n              />\n            );\n          } else if (question.type === 'checkbox') {\n            return (\n              <CheckboxGroup\n                key={question.id}\n                options={question.options}\n                selectedOptions={selectedCheckboxOptions[question.id] || []}\n                onChange={(value) =>\n                  setSelectedCheckboxOptions((prev) => ({\n                    ...prev,\n                    [question.id]: value,\n                  }))\n                }\n                title={question.title}\n                description={question.description}\n              />\n            );\n          }\n        })}\n      </Section>\n    </PageWrapper>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AATA;AAaA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AATA;AACA;AAoBA;AAAA;AACA;AAAA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AAAA;AAMA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AAAA;AAMA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAMA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAMA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AAIA;;;;A","sourceRoot":""}
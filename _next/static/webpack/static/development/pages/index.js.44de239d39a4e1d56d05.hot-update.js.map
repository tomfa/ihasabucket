{"version":3,"file":"static/webpack/static/development/pages/index.js.44de239d39a4e1d56d05.hot-update.js","sources":["webpack:///./components/Infrastructure/index.tsx","webpack:///./utils/questions.ts"],"sourcesContent":["/* eslint-disable react/no-array-index-key */\n\nimport { useEffect, useState } from 'react';\nimport Description from '../forms/Description.style';\nimport Header from '../Header.style';\nimport { getTerraFormPackage } from './utils';\nimport Pre from './Pre.style';\nimport Mute from './Mute.style';\nimport LoadingIcon from './LoadingIcon';\nimport Code from './Code';\n\ntype Props = {\n  webApp: boolean;\n  staging: boolean;\n  shared: boolean;\n  staticPage: boolean;\n  bucketName: string;\n  region: string;\n};\n\nconst Infrastructure = (props: Props) => {\n  const { description, mainTfContent } = getTerraFormPackage(props);\n  const [loading, setLoading] = useState<boolean>(true);\n  useEffect(() => {\n    setTimeout(() => setLoading(false), 800);\n  }, [mainTfContent]);\n  if (loading) {\n    return <LoadingIcon />;\n  }\n  return (\n    <>\n      <Header as={'h1'}>Bucket is served!</Header>\n      Just run the script below!\n      <Code bucketName={props.bucketName} mainTfContent={mainTfContent} />\n      <Description>\n        The script above ask you for desired bucket name and AWS region.\n      </Description>\n      <Description>{description}</Description>\n      <Header>Prerequisites</Header>\n      <h4>AWS Account</h4>\n      <p>\n        If you don&apos;t have an AWS account already, sign up at{' '}\n        <a href=\"https://portal.aws.amazon.com/billing/signup#/start\">\n          aws.amazon.com\n        </a>\n      </p>\n      <p>\n        If you don&apos;t have your <strong>AWS_SECRET_ACCESS_KEY</strong> and{' '}\n        <strong>AWS_ACCESS_KEY_ID</strong> handy, find those in the top right\n        corner under your name &gt; Security credentials. They should be\n        exported to your environment:\n        <Pre>\n          <Mute># Export AWS keys{'\\n'}</Mute>\n          export AWS_SECRET_ACCESS_KEY=yaAS$1...{'\\n'}\n          export AWS_ACCESS_KEY_ID=AKIA...\n        </Pre>\n      </p>\n      <h4>Terraform installed</h4>\n      <p>\n        If you haven&apos;t already,{' '}\n        <a href=\"https://learn.hashicorp.com/tutorials/terraform/install-cli\">\n          install Terraform\n        </a>\n        {`\\n`}\n        <Pre>\n          <Mute># For Macs with homebrew{'\\n'}</Mute>\n          brew install hashicorp/tap/terraform\n        </Pre>\n        <Description>\n          See{' '}\n          <a href=\"https://learn.hashicorp.com/tutorials/terraform/install-cli\">\n            learn.hashicorp.com/tutorials/terraform/install-cli\n          </a>{' '}\n          for other platforms.\n        </Description>\n      </p>\n    </>\n  );\n};\n\nexport default Infrastructure;\n","import { Option, Question } from '../types';\nimport { QUESTION_ID } from '../enums';\nimport questionData from './questionData';\n\nexport const generateDefaultRadioSelectedOptions = (\n  radioQuestions: Question[]\n): RadioSelectionMap =>\n  radioQuestions\n    .filter((q) => q.type === 'radio' || q.type === 'dropdown')\n    .reduce(\n      (map, question) => ({\n        ...map,\n        [question.id]: getDefaultRadioOption(question),\n      }),\n      {}\n    );\n\nexport const generateDefaultCheckboxSelectedOptions = (\n  checkboxQuestions: Question[]\n): CheckboxSelectionMap =>\n  checkboxQuestions\n    .filter((q) => q.type === 'checkbox')\n    .reduce(\n      (map, question) => ({\n        ...map,\n        [question.id]: getDefaultCheckboxOption(question),\n      }),\n      {}\n    );\n\nexport const getDefaultRadioOption = (question: Question): Option | null => {\n  if (question.type === 'text') {\n    return null;\n  }\n  return (\n    question.options.find((o) => o?.value === question.defaultValue) || null\n  );\n};\n\nexport const getDefaultCheckboxOption = (question: Question): Option[] => {\n  if (question.type === 'text' || !question.defaultValue) {\n    return [];\n  }\n  if (typeof question.defaultValue === 'string') {\n    return question.options.filter((o) => o.value === question.defaultValue);\n  }\n  if (question.defaultValue instanceof Array) {\n    return question.options.filter((o) =>\n      (question.defaultValue as (string | number)[]).includes(o.value)\n    );\n  }\n  return [];\n};\n\nexport type RadioSelectionMap = Partial<\n  {\n    [questionId in QUESTION_ID]: Option | null;\n  }\n>;\nexport type CheckboxSelectionMap = Partial<\n  {\n    [questionId in QUESTION_ID]: Option[];\n  }\n>;\nexport type TextAnswerMap = Partial<\n  {\n    [questionId in QUESTION_ID]: string | null;\n  }\n>;\n\nexport const questions = Object.values(questionData);\nexport const questionsMap = questionData;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9EA;AAEA;AAAA;AAIA;AAAA;AAEA;AAAA;AANA;AAaA;AAAA;AAIA;AAAA;AAEA;AAAA;AANA;AAaA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAkBA;AACA;;;;A","sourceRoot":""}
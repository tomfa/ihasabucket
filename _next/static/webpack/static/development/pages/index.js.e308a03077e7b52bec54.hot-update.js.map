{"version":3,"file":"static/webpack/static/development/pages/index.js.e308a03077e7b52bec54.hot-update.js","sources":["webpack:///./questions/useQuestions.ts","webpack:///./sections/Questionare.tsx"],"sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react';\nimport scrollIntoView from 'scroll-into-view';\n\nimport { QUESTION_ID } from '../enums';\nimport { Answer, AnswerMap } from '../types';\nimport { useUrlState } from '../utils/useUrlState';\nimport { trail } from '../utils/splitbee';\nimport {\n  getDefaultAnswer,\n  getQuestionsToRender,\n  normalizeAnswer,\n} from './utils';\nimport { questions } from './data';\n\nconst useQuestions = () => {\n  const [answeredQuestions, setAnsweredQuestions] = useState<QUESTION_ID[]>([]);\n  const { urlData, updateUrlData } = useUrlState();\n  const [answers, setAnswers] = useState<AnswerMap>({} as AnswerMap);\n  useEffect(() => {\n    if (answeredQuestions.length > 0) {\n      return;\n    }\n    const defaultAnswers = questions.reduce(\n      (map, question) => ({\n        ...map,\n        [question.id]: getDefaultAnswer(\n          question,\n          urlData[question.id] !== undefined\n            ? String(urlData[question.id])\n            : undefined\n        ),\n      }),\n      {} as AnswerMap\n    );\n    const isFirstRender = !Object.keys(answers).length;\n    const isInitialLoadFromUrl = Object.keys(urlData).length;\n    if (isInitialLoadFromUrl) {\n      const urlQuestions = Object.keys(urlData) as QUESTION_ID[];\n\n      // TODO: dirty hack to assume that first answer is answered if there are others\n      if (\n        urlQuestions.length &&\n        !urlQuestions.includes(QUESTION_ID.bucketName)\n      ) {\n        urlQuestions.push(QUESTION_ID.bucketName);\n      }\n      setAnsweredQuestions(urlQuestions);\n      setAnswers(defaultAnswers);\n    } else if (isFirstRender) {\n      setAnswers(defaultAnswers);\n    }\n  }, [urlData, answeredQuestions]);\n  const renderQuestions = useMemo(\n    () => getQuestionsToRender(answers, answeredQuestions),\n    [answeredQuestions, answers]\n  );\n  const hasAnsweredAll = !renderQuestions.find(\n    (q) => !answeredQuestions.includes(q.id)\n  );\n  const updateAnswer = useCallback(\n    (questionId: QUESTION_ID, answer: Answer) => {\n      updateUrlData({ [String(questionId)]: normalizeAnswer(answer) });\n      setAnswers((prevAnswers) => ({\n        ...prevAnswers,\n        [questionId]: answer,\n      }));\n    },\n    [setAnswers, updateUrlData]\n  );\n  const answerQuestion = useCallback(\n    (questionId: QUESTION_ID, answer: Answer) => {\n      updateAnswer(questionId, answer);\n      setAnsweredQuestions((qs) => {\n        if (qs.includes(questionId)) {\n          return qs;\n        }\n        trail(questionId, { answer });\n        return [...qs, questionId];\n      });\n    },\n    [updateAnswer]\n  );\n  return {\n    answers,\n    renderQuestions,\n    updateAnswer,\n    answerQuestion,\n    hasAnsweredAll,\n  };\n};\n\nexport default useQuestions;\n","import useQuestions from '../questions/useQuestions';\nimport { Section } from '../components/utils';\nimport RadioGroup from '../components/forms/RadioGroup';\nimport CheckboxGroup from '../components/forms/CheckboxGroup';\nimport { BOOL_VALUE, QUESTION_ID } from '../enums';\nimport {\n  CheckboxAnswer,\n  DropdownAnswer,\n  RadioAnswer,\n  TextAnswer,\n} from '../types';\nimport TextInput from '../components/forms/TextInput';\nimport DropDown from '../components/forms/Dropdown';\nimport {\n  getForwardingBucketValue,\n  getNormalizedAnswer,\n  hasAnswered,\n} from '../questions/utils';\nimport Infrastructure from './Infrastructure';\nimport { useEffect } from \"react\";\n\nconst Questionare = () => {\n  const {\n    answers,\n    renderQuestions,\n    updateAnswer,\n    answerQuestion,\n    hasAnsweredAll,\n  } = useQuestions();\n  useEffect(() => {\n    if (hasAnsweredAll) {\n\n    }\n  }, [hasAnsweredAll])\n  return (\n    <Section>\n      {renderQuestions.map((question) => {\n        if (question.type === 'radio') {\n          const answer = answers[question.id] as RadioAnswer;\n          return (\n            <RadioGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'dropdown') {\n          const answer = answers[question.id] as DropdownAnswer;\n          return (\n            <DropDown\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'checkbox') {\n          const answer = answers[question.id] as CheckboxAnswer;\n          return (\n            <CheckboxGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOptions={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'text') {\n          const answer = answers[question.id] as TextAnswer;\n          return (\n            <TextInput\n              id={question.id}\n              key={question.id}\n              value={answer}\n              placeholder={question.placeholder}\n              placeholders={question.placeholders}\n              onChange={(value) => updateAnswer(question.id, value)}\n              onSubmit={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        throw new Error(`Unexpected question type in ${question}`);\n      })}\n      {hasAnsweredAll && (\n        <Infrastructure\n          webApp={hasAnswered(answers, QUESTION_ID.storageType, 'webapp')}\n          shared={hasAnswered(answers, QUESTION_ID.aclPublic, BOOL_VALUE.TRUE)}\n          staging={hasAnswered(\n            answers,\n            QUESTION_ID.stagingEnv,\n            BOOL_VALUE.TRUE\n          )}\n          staticPage={hasAnswered(\n            answers,\n            QUESTION_ID.webappIsStatic,\n            BOOL_VALUE.TRUE\n          )}\n          createCertificates={\n            hasAnswered(answers, QUESTION_ID.configureDns, BOOL_VALUE.TRUE) ||\n            hasAnswered(\n              answers,\n              QUESTION_ID.createCertificates,\n              BOOL_VALUE.TRUE\n            )\n          }\n          configureDns={hasAnswered(\n            answers,\n            QUESTION_ID.configureDns,\n            BOOL_VALUE.TRUE\n          )}\n          errorPath={getNormalizedAnswer(answers, QUESTION_ID.errorPath)}\n          forwardingBucket={getForwardingBucketValue(answers)}\n          bucketName={getNormalizedAnswer(answers, QUESTION_ID.bucketName)}\n          region={getNormalizedAnswer(answers, QUESTION_ID.region)}\n        />\n      )}\n    </Section>\n  );\n};\n\nexport default Questionare;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAGA;AAEA;AACA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAWA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAIA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3FA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAKA;AAKA;AAQA;AAKA;AACA;AACA;AACA;AA7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCA;AACA;AACA;;;;A","sourceRoot":""}
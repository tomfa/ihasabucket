{"version":3,"file":"static/webpack/static/development/pages/index.js.b28299fe8f58a25733bd.hot-update.js","sources":["webpack:///./components/Infrastructure/index.tsx","webpack:///./pages/index.tsx"],"sourcesContent":["import Description from '../forms/Description.style';\nimport Header from '../Header.style';\nimport { getTerraFormPackage } from './utils';\nimport Pre from './Pre.style';\nimport List from './List.style';\nimport ListItem from './ListItem.style';\nimport Mute from './Mute.style';\nimport { Section, SectionBackground } from \"../utils\";\nimport { useTheme } from \"../../styles/theme\";\n\ntype Props = {\n  webApp: boolean;\n  staging: boolean;\n  shared: boolean;\n  staticPage: boolean;\n};\n\nconst Infrastructure = (props: Props) => {\n  const { url, description } = getTerraFormPackage(props);\n  const theme = useTheme();\n  return (\n    <SectionBackground\n      backgroundColor={theme.colors.primary}\n      color={theme.colors.textSecondary}\n      marginTop={'3rem'}>\n      <Section\n        style={{\n          flexDirection: 'row',\n          display: 'flex',\n          paddingTop: '6rem',\n          paddingBottom: '3rem',\n        }}>\n      <Header as={'h1'}>Create infrastructure</Header>\n      If you can has a bucket? Of course you can, my chubby friend ❤️ Just run\n      the script below!\n      <Pre>\n        terraform apply \\{'\\n    '}\n        {url}\n      </Pre>\n      <Description>\n        The script above will ask you for your AWS keys and desired AWS region.\n      </Description>\n      <Description>{description}</Description>\n      <h4>Prerequisites</h4>\n      <List>\n        <ListItem>\n          If you don&apos;t have an AWS account already, sign up at{' '}\n          <a href=\"https://portal.aws.amazon.com/billing/signup#/start\">\n            aws.amazon.com\n          </a>\n        </ListItem>\n        <ListItem>\n          If you don&apos;t have your <strong>AWS_SECRET_ACCESS_KEY</strong> and{' '}\n          <strong>AWS_ACCESS_KEY_ID</strong> handy, find those in the top right\n          corner under your name &gt; Security credentials.\n        </ListItem>\n        <ListItem>\n          If you haven&apos;t already,{' '}\n          <a href=\"https://learn.hashicorp.com/tutorials/terraform/install-cli\">\n            install Terraform\n          </a>\n          {`\\n`}\n          <Pre>\n            <Mute># For Macs with homebrew{'\\n'}</Mute>\n            brew install hashicorp/tap/terraform\n          </Pre>\n          <Description>\n            See{' '}\n            <a href=\"https://learn.hashicorp.com/tutorials/terraform/install-cli\">\n              learn.hashicorp.com/tutorials/terraform/install-cli\n            </a>{' '}\n            for other platforms.\n          </Description>\n        </ListItem>\n      </List>\n      </Section>\n    </SectionBackground>\n  );\n};\n\nexport default Infrastructure;\n","import { useCallback, useState } from 'react';\nimport {\n  Colored,\n  PageWrapper,\n  Section,\n  SectionBackground\n} from \"../components/utils\";\nimport Header from '../components/HeaderSection';\nimport BlockQuote from '../components/BlockQuote';\nimport RadioGroup from '../components/forms/RadioGroup';\nimport CheckboxGroup from '../components/forms/CheckboxGroup';\nimport {\n  CheckboxSelectionMap,\n  generateDefaultCheckboxSelectedOptions,\n  generateDefaultRadioSelectedOptions,\n  questions,\n  RadioSelectionMap,\n} from '../utils/questions';\nimport Infrastructure from '../components/Infrastructure';\nimport { BOOL_VALUE, QUESTION_ID } from '../enums';\nimport Footer from '../components/Footer';\n\nexport default function Home() {\n  const [selectedRadioOptions, setSelectedRadioOptions] = useState<\n    RadioSelectionMap\n  >(generateDefaultRadioSelectedOptions(questions));\n  const [selectedCheckboxOptions, setSelectedCheckboxOptions] = useState<\n    CheckboxSelectionMap\n  >(generateDefaultCheckboxSelectedOptions(questions));\n  const hasSelected = useCallback(\n    (questionId: QUESTION_ID, value: string): boolean => {\n      const question = questions.find((q) => q.id === questionId);\n      if (!question) {\n        throw Error(`Missing question for ${questionId}`);\n      }\n      if (!question.options.filter((o) => o.value === value)) {\n        throw Error(`Question ${questionId} does not have option ${value}`);\n      }\n      if (question.type === 'radio') {\n        return selectedRadioOptions[question.id]?.value === value;\n      }\n      if (question.type === 'checkbox') {\n        return !!selectedCheckboxOptions[question.id].find(\n          (o) => o.value === value\n        );\n      }\n    },\n    [selectedRadioOptions, selectedCheckboxOptions, questions]\n  );\n\n  return (\n    <PageWrapper>\n      <Header />\n      <Intro />\n      <Section>\n        {questions.map((question) => {\n          if (question.type === 'radio') {\n            return (\n              <RadioGroup\n                id={question.id}\n                key={question.id}\n                options={question.options}\n                selectedOption={selectedRadioOptions[question.id] || null}\n                onChange={(value) =>\n                  setSelectedRadioOptions((prev) => ({\n                    ...prev,\n                    [question.id]: value,\n                  }))\n                }\n                title={question.title}\n                description={question.description}\n              />\n            );\n          }\n          if (question.type === 'checkbox') {\n            return (\n              <CheckboxGroup\n                id={question.id}\n                key={question.id}\n                options={question.options}\n                selectedOptions={selectedCheckboxOptions[question.id] || []}\n                onChange={(value) =>\n                  setSelectedCheckboxOptions((prev) => ({\n                    ...prev,\n                    [question.id]: value,\n                  }))\n                }\n                title={question.title}\n                description={question.description}\n              />\n            );\n          }\n          throw new Error(`Unexpected question type ${question.type}`);\n        })}\n      </Section>\n      <Infrastructure\n          webApp={hasSelected(QUESTION_ID.storageType, 'webapp')}\n          shared={hasSelected(QUESTION_ID.aclPublic, BOOL_VALUE.TRUE)}\n          staging={hasSelected(QUESTION_ID.stagingEnv, BOOL_VALUE.TRUE)}\n          staticPage={hasSelected(QUESTION_ID.webappIsStatic, BOOL_VALUE.TRUE)}\n        />\n      <Footer />\n    </PageWrapper>\n  );\n}\n\nconst Intro = () => (\n  <Section>\n    <BlockQuote\n      author={'Lolrus, the bucket walrus'}\n      source={'At the launch of AWS S3 in 2006'}>\n      <>\n        Hosting a<Colored> webapp </Colored>\n        or need to store uploads? Put them in S3 buckets. It&apos;s\n        <Colored> cheap </Colored>\n        and\n        <Colored> reliable</Colored>. With CloudFront cache, it&apos;ll be\n        blazingly <Colored>fast</Colored>. Let&apos;s see how\n        <Colored> easy </Colored>\n        it can be.\n      </>\n    </BlockQuote>\n  </Section>\n);\n\nconst Questionare = () => {\n\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChFA;AACA;AAMA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAMA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAMA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAMA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAZA;AACA;AAkBA;;;;A","sourceRoot":""}
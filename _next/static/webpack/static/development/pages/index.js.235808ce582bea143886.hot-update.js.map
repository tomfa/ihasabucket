{"version":3,"file":"static/webpack/static/development/pages/index.js.235808ce582bea143886.hot-update.js","sources":["webpack:///./sections/Questionare.tsx"],"sourcesContent":["import useQuestions from '../questions/useQuestions';\nimport { Section } from '../components/utils';\nimport RadioGroup from '../components/forms/RadioGroup';\nimport CheckboxGroup from '../components/forms/CheckboxGroup';\nimport { BOOL_VALUE, QUESTION_ID } from '../enums';\nimport {\n  CheckboxAnswer,\n  DropdownAnswer,\n  RadioAnswer,\n  TextAnswer\n} from \"../types\";\nimport TextInput from '../components/forms/TextInput';\nimport DropDown from '../components/forms/Dropdown';\nimport { getNormalizedAnswer, hasAnswered } from '../questions/utils';\nimport Infrastructure from './Infrastructure';\n\nconst Questionare = () => {\n  const {\n    answers,\n    renderQuestions,\n    answerQuestion,\n    hasAnsweredAll,\n  } = useQuestions();\n  return (\n    <Section>\n      {renderQuestions.map((question) => {\n        if (question.type === 'radio') {\n          const answer = answers[question.id] as RadioAnswer;\n          return (\n            <RadioGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'dropdown') {\n          const answer = answers[question.id] as DropdownAnswer;\n          return (\n            <DropDown\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'checkbox') {\n          const answer = answers[question.id] as CheckboxAnswer;\n          return (\n            <CheckboxGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOptions={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'text') {\n          return (\n            <TextInput\n              id={question.id}\n              key={question.id}\n              placeholder={question.placeholder}\n              placeholders={question.placeholders}\n              onSubmit={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        throw new Error(`Unexpected question type in ${question}`);\n      })}\n      {hasAnsweredAll && (\n        <Infrastructure\n          webApp={hasAnswered(answers, QUESTION_ID.storageType, 'webapp')}\n          shared={hasAnswered(answers, QUESTION_ID.aclPublic, BOOL_VALUE.TRUE)}\n          staging={hasAnswered(\n            answers,\n            QUESTION_ID.stagingEnv,\n            BOOL_VALUE.TRUE\n          )}\n          staticPage={hasAnswered(\n            answers,\n            QUESTION_ID.webappIsStatic,\n            BOOL_VALUE.TRUE\n          )}\n          bucketName={getNormalizedAnswer(answers, QUESTION_ID.domainName)}\n          region={getNormalizedAnswer(answers, QUESTION_ID.region)}\n        />\n      )}\n    </Section>\n  );\n};\n\nexport default Questionare;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAKA;AAKA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AACA;AACA;;;;A","sourceRoot":""}
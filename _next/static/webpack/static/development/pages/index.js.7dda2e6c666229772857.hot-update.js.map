{"version":3,"file":"static/webpack/static/development/pages/index.js.7dda2e6c666229772857.hot-update.js","sources":["webpack:///./sections/Questionare.tsx"],"sourcesContent":["import scrollIntoView from 'scroll-into-view';\n\nimport useQuestions from '../questions/useQuestions';\nimport { Section } from '../components/utils';\nimport RadioGroup from '../components/forms/RadioGroup';\nimport CheckboxGroup from '../components/forms/CheckboxGroup';\nimport { BOOL_VALUE, QUESTION_ID } from '../enums';\nimport {\n  Answer,\n  CheckboxAnswer,\n  DropdownAnswer,\n  RadioAnswer,\n  TextAnswer,\n} from '../types';\nimport TextInput from '../components/forms/TextInput';\nimport DropDown from '../components/forms/Dropdown';\nimport {\n  getForwardingBucketValue,\n  getNormalizedAnswer,\n  hasAnswered,\n} from '../questions/utils';\nimport Infrastructure from './Infrastructure';\nimport { useCallback, useEffect } from 'react';\n\nconst Questionare = () => {\n  const {\n    answers,\n    renderQuestions,\n    updateAnswer,\n    answerQuestion,\n    hasAnsweredAll,\n  } = useQuestions();\n\n  useEffect(() => {\n    if (hasAnsweredAll) {\n      const element = document.getElementById('infrastructure');\n      if (element) {\n        scrollIntoView(element, { align: { top: 0, topOffset: 20 } });\n      }\n    } else if (renderQuestions.length > 1) {\n      const lastQuestion = renderQuestions[renderQuestions.length - 1];\n      const element = document.getElementById(lastQuestion.id);\n      if (element) {\n        scrollIntoView(element, { align: { top: 0, topOffset: 20 } });\n      }\n    }\n  }, [hasAnsweredAll, renderQuestions]);\n  return (\n    <Section>\n      {renderQuestions.map((question) => {\n        if (question.type === 'radio') {\n          const answer = answers[question.id] as RadioAnswer;\n          return (\n            <RadioGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'dropdown') {\n          const answer = answers[question.id] as DropdownAnswer;\n          return (\n            <DropDown\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'checkbox') {\n          const answer = answers[question.id] as CheckboxAnswer;\n          return (\n            <CheckboxGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOptions={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'text') {\n          const answer = answers[question.id] as TextAnswer;\n          return (\n            <TextInput\n              id={question.id}\n              key={question.id}\n              value={answer}\n              placeholder={question.placeholder}\n              placeholders={question.placeholders}\n              onChange={(value) => updateAnswer(question.id, value)}\n              onSubmit={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        throw new Error(`Unexpected question type in ${question}`);\n      })}\n      <ScrollToAnchor id=\"infrastructure\" />\n      {hasAnsweredAll && (\n        <Infrastructure\n          webApp={hasAnswered(answers, QUESTION_ID.storageType, 'webapp')}\n          shared={hasAnswered(answers, QUESTION_ID.aclPublic, BOOL_VALUE.TRUE)}\n          staging={hasAnswered(\n            answers,\n            QUESTION_ID.stagingEnv,\n            BOOL_VALUE.TRUE\n          )}\n          staticPage={hasAnswered(\n            answers,\n            QUESTION_ID.webappIsStatic,\n            BOOL_VALUE.TRUE\n          )}\n          createCertificates={\n            hasAnswered(answers, QUESTION_ID.configureDns, BOOL_VALUE.TRUE) ||\n            hasAnswered(\n              answers,\n              QUESTION_ID.createCertificates,\n              BOOL_VALUE.TRUE\n            )\n          }\n          configureDns={hasAnswered(\n            answers,\n            QUESTION_ID.configureDns,\n            BOOL_VALUE.TRUE\n          )}\n          errorPath={getNormalizedAnswer(answers, QUESTION_ID.errorPath)}\n          forwardingBucket={getForwardingBucketValue(answers)}\n          bucketName={getNormalizedAnswer(answers, QUESTION_ID.bucketName)}\n          region={getNormalizedAnswer(answers, QUESTION_ID.region)}\n        />\n      )}\n    </Section>\n  );\n};\n\nconst ScrollToAnchor = ({ id }: { id: string }) => <div id={id} />;\n\nexport default Questionare;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAKA;AAKA;AAQA;AAKA;AACA;AACA;AACA;AA7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;A","sourceRoot":""}
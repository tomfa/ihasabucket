{"version":3,"file":"static/webpack/static/development/pages/index.js.e8ca49f3d19c13c28133.hot-update.js","sources":["webpack:///./components/Infrastructure/utils.ts"],"sourcesContent":["type Props = {\n  webApp: boolean;\n  staging: boolean;\n  shared: boolean;\n  staticPage: boolean;\n};\n\ntype TerraformPackage = {\n  mainTfContent: string[];\n  description?: string;\n};\n\nconst getMainTfContent = ({\n  webApp,\n  staging,\n  shared,\n  staticPage,\n}: Props): string[] => {\n  const source = webApp\n    ? 'git::https://github.com/tomfa/terraform-sandbox.git//s3-webfiles-with-cloudfront'\n    : \"'git::https://github.com/tomfa/terraform-sandbox.git//s3-privatefiles-with-cloudfront\";\n  // TODO: Remove aws_secret_key and access_key\n  const defaultVariables = {\n    'var.bucket_name': 'var.bucket_name',\n    'var.aws_region': 'var.aws_region',\n    'var.aws_access_key': 'var.aws_access_key',\n    'var.aws_secret_key': 'var.aws_secret_key',\n  };\n  const genericBucketName = webApp ? 'web-app' : 'file-storage';\n  const modules = staging\n    ? [\n        { name: genericBucketName, variables: defaultVariables },\n        {\n          name: `${genericBucketName}-staging`,\n          variables: {\n            ...defaultVariables,\n            'var.bucket_name': `\"$\\{var.bucket-name}.staging\"`,\n          },\n        },\n      ]\n    : [{ name: genericBucketName , variables: defaultVariables }];\n\n  // TODO: Add options for differentiating between static and shared\n  if (shared && !webApp) {\n    // eslint-disable-next-line no-console\n    console.log('Missing support');\n  }\n  if (webApp && staticPage) {\n    // eslint-disable-next-line no-console\n    console.log('Missing support');\n  }\n\n  const lines: string[] = [];\n  modules.forEach((module) => {\n    lines.push('');\n    lines.push(`module \"${module.name}\" {`);\n    lines.push(`  source = \"${source}\"`);\n    Object.entries(module.variables).forEach(([key, value]) => {\n      lines.push(`  ${key} = ${value}`);\n    });\n    lines.push(`}`);\n  });\n  return lines;\n};\n\nconst getTerraPackageDescription = ({\n  webApp,\n  staging,\n  shared,\n  staticPage,\n}: Props): string => {\n  const count = staging ? 'two sets of' : 'a';\n  const usecase = getUseCaseDescription({ webApp, staticPage, shared });\n  const iamUserInfo = staging\n    ? 'Two sets of AWS keys will be created that are able to upload to the buckets. One for test and one for production environment'\n    : 'A set of AWS keys will be created that is able to upload to the bucket';\n  return `Once run, it will create ${count} S3 bucket + Cloudfront, configured ${usecase}. ${iamUserInfo}.`;\n};\n\nconst getUseCaseDescription = ({\n  webApp,\n  staticPage,\n  shared,\n}: {\n  webApp: boolean;\n  shared: boolean;\n  staticPage: boolean;\n}): string => {\n  if (webApp) {\n    if (staticPage) {\n      return 'to serve a solid statically generated web app';\n    }\n    return 'to serve a blazingly fast single-page web app';\n  }\n  if (shared) {\n    return 'for hosting publicly available files';\n  }\n  return 'for storing and serving files for authorized requests';\n};\n\nexport const getTerraFormPackage = (props: Props): TerraformPackage => {\n  return {\n    mainTfContent: getMainTfContent(props),\n    description: getTerraPackageDescription(props),\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAYA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AAFA;AAFA;AAQA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;A","sourceRoot":""}
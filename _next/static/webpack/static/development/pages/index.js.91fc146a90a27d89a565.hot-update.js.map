{"version":3,"file":"static/webpack/static/development/pages/index.js.91fc146a90a27d89a565.hot-update.js","sources":["webpack:///./components/code/Code.tsx","webpack:///./utils/terraform/index.ts"],"sourcesContent":["/* eslint-disable react/no-array-index-key */\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { copyToClipBoard } from '../../utils/clipboard';\nimport Mute from '../Mute.style';\nimport { Colored } from '../utils';\nimport { useTheme } from '../../styles/theme';\nimport Description from '../forms/Description.style';\nimport Pre from './Pre.style';\nimport PreButton from './PreButton.style';\n\ntype Props = {\n  mainTfContent: string[];\n  bucketName: string;\n  intro?: string;\n  footer?: string;\n};\n\nconst Code = ({ mainTfContent: lines, bucketName, intro, footer }: Props) => {\n  const theme = useTheme();\n  const [hasCopied, setHasCopied] = useState<boolean>(false);\n  const copy = useCallback(() => {\n    copyToClipBoard(lines);\n    setHasCopied(true);\n  }, [lines]);\n\n  useEffect(() => setHasCopied(false), [lines, bucketName]);\n\n  return (\n    <>\n      {!!intro && <p>{intro}</p>}\n      <Pre style={!!intro && { marginTop: 0 }}>\n        {lines.map((line, i) => {\n          if (line.trim().startsWith('#')) {\n            return (\n              <Mute key={i}>\n                {line}\n                {'\\n'}\n              </Mute>\n            );\n          }\n          return (\n            <span key={i}>\n              {line}\n              {'\\n'}\n            </span>\n          );\n        })}\n        <PreButton onClick={copy}>\n          {(hasCopied && (\n            <span>\n              Copied! <Colored color={theme.colors.success}>âœ“</Colored>\n            </span>\n          )) ||\n            'Copy to clipboard'}\n        </PreButton>\n      </Pre>\n      {!!footer && <Description>{footer}</Description>}\n    </>\n  );\n};\n\nexport default Code;\n","/* eslint-disable camelcase */\n\nimport { getCertificateTfContent } from './certificate';\nimport { getTerraPackageDescription } from './descriptionText';\nimport { getDomainRecordTfContent, getDomainTfContent } from './dns';\nimport { getFileStorageBucketTfContent } from './fileStorage';\nimport { getRedirectBucketTfContent } from './redirect';\nimport { QuestionSummary, ModuleSpec, TerraformPackage } from './types';\nimport { getWebAppBucketTfContent } from './webApp';\nimport {\n  getOutputLines,\n  toModulesText,\n  toVariablesText,\n} from './terraformText';\nimport { getIAMUserTfContent } from './iamUser';\n\nconst getMainTfContent = (props: QuestionSummary): string[] => {\n  const modules: ModuleSpec[] = [];\n  modules.push(...getWebAppBucketTfContent(props));\n  modules.push(...getFileStorageBucketTfContent(props));\n  modules.push(...getDomainTfContent(props));\n  modules.push(...getDomainRecordTfContent(props));\n  modules.push(...getCertificateTfContent(props));\n  modules.push(...getRedirectBucketTfContent(props));\n  modules.push(...getIAMUserTfContent(props));\n\n  const lines: string[] = [];\n  lines.push(...toVariablesText(modules));\n  lines.push(...toModulesText(modules));\n  lines.push(...getOutputLines(props));\n  return lines;\n};\n\nexport const getTerraFormPackage = (\n  props: QuestionSummary\n): TerraformPackage => {\n  const createFolders = {\n    title: 'First, create a folder for your infrastructure code.',\n    tfContent: ['mkdir infrastructure', 'cd infrastructure'],\n  };\n  const mainContent = {\n    title: 'Then, create a terraform config file',\n    tfContent: [\n      `cat <<EOT >> ${props.bucketName || 'main'}.tf`,\n      ...getMainTfContent(props),\n      'EOT',\n    ],\n  };\n  if (!props.configureDns) {\n    return {\n      sections: [\n        createFolders,\n        mainContent,\n        {\n          title: 'Initialize the modules and deploy to AWS',\n          tfContent: ['terraform init', 'terraform deploy'],\n        },\n      ].filter((m) => m),\n      footerText: getTerraPackageDescription(props),\n    }\n  }\n  const loadTerraformModules = {\n    title: 'Download the required modules',\n    tfContent: ['terraform init'],\n  };\n  const initialDnsDeploy = {\n    title: 'Create the DNS servers',\n    tfContent: ['terraform deploy --target=module.domain'],\n    description:\n      'After this command completes, it will output DNS servers. ' +\n      'Before continuing, point your registrar to use these endpoints as DNS servers.',\n  };\n  const deploy = {\n    title: 'Deploy the remaining infrastructure to AWS',\n    tfContent: ['terraform deploy'],\n  };\n  return {\n    sections: [\n      createFolders,\n      mainContent,\n      loadTerraformModules,\n      initialDnsDeploy,\n      deploy,\n    ],\n    footerText: getTerraPackageDescription(props),\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC9DA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AACA;AAOA;AACA;AACA;AAIA;AACA;AAFA;AAIA;AAAA;AACA;AATA;AAWA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAOA;AACA;AACA;AAFA;AAIA;AACA;AAOA;AARA;AAUA;;;;A","sourceRoot":""}
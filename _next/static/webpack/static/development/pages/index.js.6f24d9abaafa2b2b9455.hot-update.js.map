{"version":3,"file":"static/webpack/static/development/pages/index.js.6f24d9abaafa2b2b9455.hot-update.js","sources":["webpack:///./questions/utils.ts","webpack:///./sections/Questionare.tsx"],"sourcesContent":["import { QUESTION_ID } from '../enums';\nimport {\n  Answer,\n  AnswerMap,\n  CheckboxAnswer,\n  DropdownAnswer,\n  Question,\n  QuestionDisplayCondition,\n  QuestionType,\n  RadioAnswer,\n  TextAnswer,\n} from '../types';\nimport { questions, questionMap } from './data';\n\nexport const getDefaultAnswer = (question: Question): Answer => {\n  if (question.type === QuestionType.TEXT) {\n    return question.defaultValue || null;\n  }\n  if (\n    question.type === QuestionType.RADIO ||\n    question.type === QuestionType.DROPDOWN\n  ) {\n    return (\n      question.options.find((o) => o?.value === question.defaultValue) || null\n    );\n  }\n  if (question.type === QuestionType.CHECKBOX) {\n    const defaultValue = question.defaultValue;\n    if (!defaultValue) {\n      return [];\n    }\n    if (typeof defaultValue === 'string' || typeof defaultValue === 'number') {\n      return question.options.filter((o) => o.value === defaultValue);\n    }\n    if (defaultValue instanceof Array) {\n      return question.options.filter((o) =>\n        (defaultValue as string[]).includes(o.value)\n      );\n    }\n    return null;\n  }\n};\n\nconst isFulfilled = (\n  condition: QuestionDisplayCondition,\n  answers: AnswerMap\n): boolean => {\n  const question = questionMap[condition.questionId];\n  if (question.type === QuestionType.RADIO) {\n    const answer = answers[condition.questionId] as RadioAnswer;\n    return answer.value === condition.value;\n  }\n  if (question.type === QuestionType.CHECKBOX) {\n    const answer = answers[condition.questionId] as CheckboxAnswer;\n    return !!answer.find((o) => o.value === condition.value);\n  }\n  if (question.type === QuestionType.DROPDOWN) {\n    const answer = answers[condition.questionId] as DropdownAnswer;\n    return answer.value === condition.value;\n  }\n  if (question.type === QuestionType.TEXT) {\n    const answer = answers[condition.questionId] as TextAnswer;\n    return answer === condition.value;\n  }\n};\n\nconst shouldSkip = (question: Question, answers: AnswerMap): boolean => {\n  return (\n    question.showIf && !!question.showIf.find((c) => !isFulfilled(c, answers))\n  );\n};\n\nconst getLastRenderIndex = (\n  answers: AnswerMap,\n  answeredQuestions: QUESTION_ID[],\n  startAtIndex = 0\n) => {\n  const question = questions[startAtIndex];\n  if (!question) {\n    return startAtIndex;\n  }\n  const questionMissingAnswer =\n    !answeredQuestions.includes(question.id) && !shouldSkip(question, answers);\n  if (questionMissingAnswer) {\n    return startAtIndex;\n  }\n  return getLastRenderIndex(answers, answeredQuestions, startAtIndex + 1);\n};\n\nexport const getQuestionsToRender = (\n  answers: AnswerMap,\n  answeredQuestions: QUESTION_ID[]\n): Question[] => {\n  const questionsToRender: Question[] = [];\n  const lastRenderIndex = getLastRenderIndex(answers, answeredQuestions);\n  questions.slice(0, lastRenderIndex + 1).forEach((question) => {\n    if (!shouldSkip(question, answers)) {\n      questionsToRender.push(question);\n    }\n  });\n\n  return questionsToRender;\n};\n","import useQuestions from '../questions/useQuestions';\nimport { Section } from '../components/utils';\nimport RadioGroup from '../components/forms/RadioGroup';\nimport CheckboxGroup from '../components/forms/CheckboxGroup';\nimport { BOOL_VALUE, QUESTION_ID } from '../enums';\nimport { CheckboxAnswer, DropdownAnswer, Option, RadioAnswer } from '../types';\nimport TextInput from '../components/forms/TextInput';\nimport DropDown from '../components/forms/Dropdown';\nimport Infrastructure from './Infrastructure';\n\nconst Questionare = () => {\n  const {\n    answers,\n    renderQuestions,\n    answerQuestion,\n    hasAnsweredAll,\n  } = useQuestions();\n  return (\n    <Section>\n      {renderQuestions.map((question) => {\n        if (question.type === 'radio') {\n          const answer = answers[question.id] as RadioAnswer;\n          return (\n            <RadioGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'dropdown') {\n          const answer = answers[question.id] as DropdownAnswer;\n          return (\n            <DropDown\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'checkbox') {\n          const answer = answers[question.id] as CheckboxAnswer;\n          return (\n            <CheckboxGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOptions={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'text') {\n          return (\n            <TextInput\n              id={question.id}\n              key={question.id}\n              placeholder={question.placeholder}\n              placeholders={question.placeholders}\n              onSubmit={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        throw new Error(`Unexpected question type in ${question}`);\n      })}\n      {hasAnsweredAll && (\n        <Infrastructure\n          webApp={answers[QUESTION_ID.storageType] === 'webapp'}\n          shared={answers[QUESTION_ID.aclPublic] === BOOL_VALUE.TRUE}\n          staging={answers[QUESTION_ID.stagingEnv] === BOOL_VALUE.TRUE}\n          staticPage={answers[QUESTION_ID.webappIsStatic] === BOOL_VALUE.TRUE}\n          bucketName={String(answers[QUESTION_ID.domainName])}\n          region={(answers[QUESTION_ID.region] as Option).value}\n        />\n      )}\n    </Section>\n  );\n};\n\nexport default Questionare;\n"],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;;;;A","sourceRoot":""}
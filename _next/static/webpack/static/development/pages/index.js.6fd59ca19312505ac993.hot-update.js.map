{"version":3,"file":"static/webpack/static/development/pages/index.js.6fd59ca19312505ac993.hot-update.js","sources":["webpack:///./components/BlockQuote/Quote.style.tsx","webpack:///./components/forms/CheckboxGroup.tsx","webpack:///./components/forms/Dropdown.tsx","webpack:///./components/forms/RadioGroup.tsx","webpack:///./components/forms/TextInput.tsx","webpack:///./questions/useQuestions.ts","webpack:///./sections/Footer/index.tsx","webpack:///./sections/Questionare.tsx","webpack:///./utils/splitbee.ts"],"sourcesContent":["import styled from 'styled-components';\n\nconst QuoteStyle = styled.h2`\n  font-family: ${(p) => p.theme.fonts.secondary};\n  position: relative; /* for pseudos */\n  font-size: 2rem;\n  font-weight: normal;\n  line-height: 1.1;\n  margin: 0;\n  border: 2px solid #fff;\n  border: solid 2px;\n  border-radius: 20px;\n  padding: 25px;\n\n  & > * {\n    line-height: 1.1;\n  }\n\n  &:after {\n    content: '';\n    position: absolute;\n    border: 2px solid;\n    border-radius: 0 50px 0 0;\n    width: 60px;\n    height: 60px;\n    bottom: -62px;\n    left: 50px;\n    border-bottom: none;\n    border-left: none;\n    z-index: 3;\n  }\n\n  &:before {\n    content: '';\n    position: absolute;\n    width: 80px;\n    border: 6px solid ${(props) => props.theme.colors.bgPrimary};\n    bottom: -3px;\n    left: 50px;\n    z-index: 2;\n  }\n`;\n\nexport default QuoteStyle;\n","import { useCallback } from 'react';\n\nimport { Option } from '../../types';\nimport Header from '../Header.style';\nimport Checkbox from './Checkbox';\nimport Description from './Description.style';\nimport Choices from './Choices.style';\nimport Question from './Question.style';\n\ninterface Props {\n  id: string;\n  options: Option[];\n  selectedOptions: Option[];\n  onChange: (selected: Option[]) => void;\n  title: string;\n  description?: string;\n  disabled?: boolean;\n}\n\nconst CheckboxGroup = ({\n  id,\n  options,\n  selectedOptions,\n  onChange,\n  title,\n  description,\n  disabled = false,\n}: Props) => {\n  const onOptionChange = useCallback(\n    (value, checked) => {\n      if (disabled) {\n        return;\n      }\n      const selectedExceptThisOption = selectedOptions.filter(\n        (o) => o.value !== value\n      );\n      if (!checked) {\n        return onChange(selectedExceptThisOption);\n      }\n      const checkedOption = options.find((o) => o.value === value);\n      checkedOption && onChange([...selectedExceptThisOption, checkedOption]);\n    },\n    [disabled, options, onChange, selectedOptions]\n  );\n  return (\n    <Question>\n      {title && <Header>{title}</Header>}\n      <Choices>\n        {options.map((o) => (\n          <Checkbox\n            group={id}\n            key={o.value}\n            checked={selectedOptions.includes(o)}\n            onChange={onOptionChange}\n            value={o.value}\n            label={o.label}\n          />\n        ))}\n      </Choices>\n      {description && <Description>{description}</Description>}\n    </Question>\n  );\n};\n\nexport default CheckboxGroup;\n","import React, { useCallback } from 'react';\nimport styled from 'styled-components';\n\nimport { Option } from '../../types';\nimport Header from '../Header.style';\nimport Description from './Description.style';\nimport Question from './Question.style';\nimport InputContainer from './InputContainer.styles';\nimport SubmitButton from './SubmitButton.styles';\n\ninterface Props {\n  id: string;\n  options: Option[];\n  selectedOption: Option | null;\n  onChange: (selected: Option | null) => void;\n  title: string;\n  description?: string;\n  disabled?: boolean;\n}\n\nconst Select = styled.select`\n  font-size: 1.2rem;\n  padding: 1rem;\n  flex: 1;\n  border: none;\n  appearance: none;\n  background-color: white;\n\n  &:focus,\n  &:active {\n    outline-style: dashed;\n    outline-width: 2px;\n    outline-color: ${(p) => p.theme.colors.primary};\n    margin-right: 3px;\n  }\n`;\nconst Choice = styled.option`\n  color: ${(p) => p.theme.colors.textPrimary};\n`;\n\nconst DropDown = ({\n  id,\n  options,\n  selectedOption,\n  onChange,\n  title,\n  description,\n  disabled = false,\n}: Props) => {\n  const onOptionChange = useCallback(\n    (value: string) => {\n      if (disabled) {\n        return;\n      }\n      const checkedOption = options.find((o) => o.value === value);\n      checkedOption && onChange(checkedOption);\n    },\n    [disabled, options, onChange]\n  );\n  return (\n    <Question>\n      {title && <Header>{title}</Header>}\n      <InputContainer>\n        <Select\n          value={selectedOption?.value}\n          onChange={(e) => onOptionChange(e.target.value)}>\n          {options.map((o) => (\n            <Choice key={`${id}-${o.value}`} value={o.value} label={o.label}>\n              {o.label}\n            </Choice>\n          ))}\n        </Select>\n        <SubmitButton\n          type=\"submit\"\n          complete={!!selectedOption}\n          onClick={() => onOptionChange(selectedOption.value)}\n        />\n      </InputContainer>\n\n      {description && <Description>{description}</Description>}\n    </Question>\n  );\n};\n\nexport default DropDown;\n","import { useCallback } from 'react';\nimport { Option } from '../../types';\nimport Header from '../Header.style';\nimport Radio from './Radio';\nimport Description from './Description.style';\nimport Choices from './Choices.style';\nimport Question from './Question.style';\n\ninterface Props {\n  id: string;\n  options: Option[];\n  selectedOption: Option | null;\n  onChange: (selected: Option | null) => void;\n  title: string;\n  description?: string;\n  disabled?: boolean;\n}\n\nconst RadioGroup = ({\n  id,\n  options,\n  selectedOption,\n  onChange,\n  title,\n  description,\n  disabled = false,\n}: Props) => {\n  const onOptionChange = useCallback(\n    (value, checked) => {\n      if (disabled) {\n        return;\n      }\n      if (!checked) {\n        return onChange(null);\n      }\n      const checkedOption = options.find((o) => o.value === value);\n      checkedOption && onChange(checkedOption);\n    },\n    [disabled, options, onChange]\n  );\n  return (\n    <Question>\n      {title && <Header>{title}</Header>}\n      <Choices>\n        {options.map((o) => (\n          <Radio\n            key={`${id}-${o.value}`}\n            group={id}\n            checked={o === selectedOption}\n            onChange={onOptionChange}\n            value={o.value}\n            label={o.label}\n          />\n        ))}\n      </Choices>\n      {description && <Description>{description}</Description>}\n    </Question>\n  );\n};\n\nexport default RadioGroup;\n","import { useCallback, useEffect, useState } from 'react';\n\nimport Header from '../Header.style';\nimport { sleep } from '../utils';\nimport Description from './Description.style';\nimport Question from './Question.style';\nimport Input from './Input.style';\nimport InputContainer from './InputContainer.styles';\nimport SubmitButton from './SubmitButton.styles';\n\ninterface Props {\n  id: string;\n  value?: string;\n  onChange: (selected: string) => void;\n  onSubmit: (selected: string) => void;\n  title: string;\n  placeholder?: string;\n  placeholders?: string[];\n  description?: string;\n  disabled?: boolean;\n}\n\nconst TextInput = ({\n  onChange,\n  onSubmit,\n  value = '',\n  title,\n  placeholder,\n  placeholders,\n  description,\n}: Props) => {\n  const [placeholderIndex, setPlaceholderIndex] = useState<number>(\n    placeholders?.length ? 0 : -1\n  );\n  const [currentPlaceHolder, setCurrentPlaceHolder] = useState<string>(\n    placeholderIndex === -1 ? placeholder : placeholders[placeholderIndex]\n  );\n  useEffect(() => {\n    if (!placeholders || placeholders.length < 2) {\n      return;\n    }\n    updatePlaceHolderDelayed(\n      placeholders,\n      placeholderIndex,\n      setPlaceholderIndex,\n      setCurrentPlaceHolder\n    );\n  }, [placeholderIndex]);\n\n  const cleanInput = useCallback((val: string) => {\n    if (!val) {\n      return '';\n    }\n    return val.toLowerCase().replace(' ', '-');\n  }, []);\n  const submit = useCallback(\n    (submitValue) => {\n      onSubmit(cleanInput(submitValue));\n    },\n    [onSubmit, cleanInput]\n  );\n\n  return (\n    <Question>\n      {title && <Header>{title}</Header>}\n      <InputContainer>\n        <Input\n          type=\"text\"\n          value={value || ''}\n          placeholder={currentPlaceHolder}\n          onChange={(e) => onChange(e.target.value)}\n          onKeyPress={(e) => e.key === 'Enter' && submit(value)}\n          onBlur={() => submit(value)}\n        />\n        <SubmitButton\n          type=\"submit\"\n          complete={value && value.trim().length > 0}\n          onClick={() => submit(value)}\n        />\n      </InputContainer>\n      {description && <Description>{description}</Description>}\n    </Question>\n  );\n};\n\nconst updatePlaceHolderDelayed = async (\n  placeholders: string[],\n  placeholderIndex: number,\n  setPlaceholderIndex: any,\n  setCurrentPlaceHolder: (value: string) => void,\n  delayMs: number = 7000\n) => {\n  await sleep(delayMs);\n  const oldPlaceHolder = placeholders[placeholderIndex % placeholders.length];\n  const newPlaceHolder =\n    placeholders[(placeholderIndex + 1) % placeholders.length];\n  const steps = oldPlaceHolder.length + newPlaceHolder.length + 4;\n  const stepSizeMs = 25;\n  for (let i = 0; i <= steps; i++) {\n    const shouldRemove = i <= oldPlaceHolder.length;\n    const shouldAdd = steps - i <= newPlaceHolder.length;\n    if (shouldRemove) {\n      setCurrentPlaceHolder(\n        oldPlaceHolder.substr(0, oldPlaceHolder.length - i)\n      );\n    } else if (shouldAdd) {\n      setCurrentPlaceHolder(\n        newPlaceHolder.substr(0, newPlaceHolder.length - (steps - i))\n      );\n    }\n    //  â€“ it's ok in a for loop\n    // eslint-disable-next-line no-await-in-loop\n    await sleep(stepSizeMs);\n  }\n  setPlaceholderIndex((index) => index + (1 % placeholders.length));\n};\n\nexport default TextInput;\n","import { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { QUESTION_ID } from '../enums';\nimport { Answer, AnswerMap } from '../types';\nimport { useUrlState } from '../utils/useUrlState';\nimport { trail } from '../utils/splitbee';\nimport {\n  getDefaultAnswer,\n  getQuestionsToRender,\n  normalizeAnswer,\n} from './utils';\nimport { questions } from './data';\n\nconst useQuestions = () => {\n  const [answeredQuestions, setAnsweredQuestions] = useState<QUESTION_ID[]>([]);\n  const { urlData, updateUrlData } = useUrlState();\n  const [answers, setAnswers] = useState<AnswerMap>({} as AnswerMap);\n  useEffect(() => {\n    if (answeredQuestions.length > 0) {\n      return;\n    }\n    const defaultAnswers = questions.reduce(\n      (map, question) => ({\n        ...map,\n        [question.id]: getDefaultAnswer(\n          question,\n          urlData[question.id] !== undefined\n            ? String(urlData[question.id])\n            : undefined\n        ),\n      }),\n      {} as AnswerMap\n    );\n    const isFirstRender = !Object.keys(answers).length;\n    const isInitialLoadFromUrl = Object.keys(urlData).length;\n    if (isInitialLoadFromUrl) {\n      const urlQuestions = Object.keys(urlData) as QUESTION_ID[];\n\n      // TODO: dirty hack to assume that first answer is answered if there are others\n      if (\n        urlQuestions.length &&\n        !urlQuestions.includes(QUESTION_ID.bucketName)\n      ) {\n        urlQuestions.push(QUESTION_ID.bucketName);\n      }\n      setAnsweredQuestions(urlQuestions);\n      setAnswers(defaultAnswers);\n    } else if (isFirstRender) {\n      setAnswers(defaultAnswers);\n    }\n  }, [urlData, answeredQuestions]);\n  const renderQuestions = useMemo(\n    () => getQuestionsToRender(answers, answeredQuestions),\n    [answeredQuestions, answers]\n  );\n  const hasAnsweredAll = !renderQuestions.find(\n    (q) => !answeredQuestions.includes(q.id)\n  );\n  const updateAnswer = useCallback(\n    (questionId: QUESTION_ID, answer: Answer) => {\n      updateUrlData({ [String(questionId)]: normalizeAnswer(answer) });\n      setAnswers((prevAnswers) => ({\n        ...prevAnswers,\n        [questionId]: answer,\n      }));\n    },\n    [setAnswers, updateUrlData]\n  );\n  const answerQuestion = useCallback(\n    (questionId: QUESTION_ID, answer: Answer) => {\n      updateAnswer(questionId, answer);\n      setAnsweredQuestions((qs) => {\n        if (qs.includes(questionId)) {\n          return qs;\n        }\n        trail(questionId, { answer });\n        return [...qs, questionId];\n      });\n    },\n    [updateAnswer]\n  );\n  return {\n    answers,\n    renderQuestions,\n    updateAnswer,\n    answerQuestion,\n    hasAnsweredAll,\n  };\n};\n\nexport default useQuestions;\n","import { SectionBackground } from '../../components/utils';\nimport { useTheme } from '../../styles/theme';\nimport FooterLinks from './FooterLinks.style';\nimport Link from './Link';\nimport FooterAside from './FooterAside.style';\nimport FooterHeader from './FooterHeader.style';\nimport FooterSection from './FooterSection.style';\n\nconst Footer = () => {\n  const theme = useTheme();\n  return (\n    <SectionBackground\n      backgroundColor={theme.colors.secondary}\n      color={theme.colors.textSecondary}\n      marginTop={'3rem'}>\n      <FooterSection>\n        <FooterAside>\n          <FooterHeader>Wat</FooterHeader>\n          <p>\n            I love Heroku, Vercel seems awesome, Squarespace is a great product.\n            All respect to those who maintain their own servers at DigitalOcean.\n          </p>\n          <p>\n            But when it comes to simply hosting a web app or static files, AWS\n            S3 is usually faster, cheaper, more reliable and easier â€“ as long as\n            you stay clear of the AWS console.\n          </p>\n          <p>Let me help you with that.</p>\n        </FooterAside>\n        <FooterAside right>\n          <FooterHeader>Articles</FooterHeader>\n          <FooterLinks>\n            <Link\n              href={\n                'https://medium.com/trackstack/deploying-a-react-app-to-aws-s3-with-github-actions-b1cb9ba75c95'\n              }>\n              Deploying Web apps to S3\n            </Link>\n            <Link href={'https://github.com/tomfa/s3-uploader'}>\n              Allowing user upload to S3\n            </Link>\n            <Link\n              href={\n                'https://learn.hashicorp.com/tutorials/terraform/github-actions'\n              }>\n              Terraform CI deploy\n            </Link>\n          </FooterLinks>\n\n          <FooterHeader>Links</FooterHeader>\n          <FooterLinks>\n            <Link href={'https://github.com/tomfa/ihasabucket'}>Github</Link>\n            <Link href={'https://linkedin.com/in/fagerbekk'}>LinkedIn</Link>\n            <Link href={'https://tomfa.github.io'}>Homepage</Link>\n          </FooterLinks>\n        </FooterAside>\n      </FooterSection>\n    </SectionBackground>\n  );\n};\n\nexport default Footer;\n","import useQuestions from '../questions/useQuestions';\nimport { Section } from '../components/utils';\nimport RadioGroup from '../components/forms/RadioGroup';\nimport CheckboxGroup from '../components/forms/CheckboxGroup';\nimport { BOOL_VALUE, QUESTION_ID } from '../enums';\nimport {\n  CheckboxAnswer,\n  DropdownAnswer,\n  RadioAnswer,\n  TextAnswer,\n} from '../types';\nimport TextInput from '../components/forms/TextInput';\nimport DropDown from '../components/forms/Dropdown';\nimport {\n  getForwardingBucketValue,\n  getNormalizedAnswer,\n  hasAnswered,\n} from '../questions/utils';\nimport Infrastructure from './Infrastructure';\n\nconst Questionare = () => {\n  const {\n    answers,\n    renderQuestions,\n    updateAnswer,\n    answerQuestion,\n    hasAnsweredAll,\n  } = useQuestions();\n  return (\n    <Section>\n      {renderQuestions.map((question) => {\n        if (question.type === 'radio') {\n          const answer = answers[question.id] as RadioAnswer;\n          return (\n            <RadioGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'dropdown') {\n          const answer = answers[question.id] as DropdownAnswer;\n          return (\n            <DropDown\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'checkbox') {\n          const answer = answers[question.id] as CheckboxAnswer;\n          return (\n            <CheckboxGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOptions={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'text') {\n          const answer = answers[question.id] as TextAnswer;\n          return (\n            <TextInput\n              id={question.id}\n              key={question.id}\n              value={answer}\n              placeholder={question.placeholder}\n              placeholders={question.placeholders}\n              onChange={(value) => updateAnswer(question.id, value)}\n              onSubmit={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        throw new Error(`Unexpected question type in ${question}`);\n      })}\n      {hasAnsweredAll && (\n        <Infrastructure\n          webApp={hasAnswered(answers, QUESTION_ID.storageType, 'webapp')}\n          shared={hasAnswered(answers, QUESTION_ID.aclPublic, BOOL_VALUE.TRUE)}\n          staging={hasAnswered(\n            answers,\n            QUESTION_ID.stagingEnv,\n            BOOL_VALUE.TRUE\n          )}\n          staticPage={hasAnswered(\n            answers,\n            QUESTION_ID.webappIsStatic,\n            BOOL_VALUE.TRUE\n          )}\n          createCertificates={\n            hasAnswered(answers, QUESTION_ID.configureDns, BOOL_VALUE.TRUE) ||\n            hasAnswered(\n              answers,\n              QUESTION_ID.createCertificates,\n              BOOL_VALUE.TRUE\n            )\n          }\n          configureDns={hasAnswered(\n            answers,\n            QUESTION_ID.configureDns,\n            BOOL_VALUE.TRUE\n          )}\n          errorPath={getNormalizedAnswer(answers, QUESTION_ID.errorPath)}\n          forwardingBucket={getForwardingBucketValue(answers)}\n          bucketName={getNormalizedAnswer(answers, QUESTION_ID.bucketName)}\n          region={getNormalizedAnswer(answers, QUESTION_ID.region)}\n        />\n      )}\n    </Section>\n  );\n};\n\nexport default Questionare;\n","import { Answer } from '../types';\n\nexport const trail = (\n  name: string,\n  data?: { [key: string]: string | boolean | number | null | Answer }\n) => {\n  try {\n    if (sensitiveKeys.includes(name)) {\n      return;\n    }\n    const payload = data && Object.fromEntries(Object.entries(data).map(clean));\n    // @ts-ignore\n    if (!window || !window.splitbee) {\n      return;\n    }\n    // @ts-ignore\n    window.splitbee.track(name, payload);\n  } catch (error) {\n    // That's fine <3\n  }\n};\n\nconst clean = ([key, value]): string[] => {\n  if (sensitiveKeys.includes(key)) {\n    return [key, '---'];\n  }\n  if (['string', 'number', 'boolean'].includes(typeof value)) {\n    return [key, value];\n  }\n  if (!value) {\n    return [key, null];\n  }\n  if (value instanceof Array) {\n    return [key, value.map((v) => v.value).join(',')];\n  }\n  return [key, value.value];\n};\n\nconst sensitiveKeys = ['bucketName', 'forwardingBucket'];\n"],"mappings":"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A;AACA;AACA;AAOA;AACA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAKA;AAKA;AAQA;AAKA;AACA;AACA;AACA;AA7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCA;AACA;AACA;;;;;;;;;;;;;;;;AC9HA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}
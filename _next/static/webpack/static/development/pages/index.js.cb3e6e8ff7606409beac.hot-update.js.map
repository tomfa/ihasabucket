{"version":3,"file":"static/webpack/static/development/pages/index.js.cb3e6e8ff7606409beac.hot-update.js","sources":["webpack:///./utils/terraform/fileStorage.ts","webpack:///./utils/terraform/iamUser.ts","webpack:///./utils/terraform/names.ts","webpack:///./utils/terraform/webApp.ts"],"sourcesContent":["import { INPUT } from '../../enums';\nimport { ModuleSpec, QuestionSummary } from './types';\nimport { getBucketModuleNames, getStagingBucketName } from './names';\n\nexport const getFileStorageBucketTfContent = (\n  props: QuestionSummary\n): ModuleSpec[] => {\n  if (props.webApp) {\n    return [];\n  }\n  const tfContent: ModuleSpec[] = [];\n  const names = getBucketModuleNames(props);\n  const { bucketName, region, shared } = props;\n  tfContent.push({\n    name: names.main,\n    source: 'git::https://github.com/tomfa/terraform.git//files',\n    parameters: {\n      bucket_name: bucketName ? `\"${bucketName}\"` : `var.${INPUT.BUCKET_NAME}`,\n      aws_region: region ? `\"${region}\"` : `var.${INPUT.AWS_REGION}`,\n      acl: shared ? '\"public-read\"' : '\"private\"',\n    },\n  });\n  if (props.staging) {\n    tfContent.push({\n      name: names.staging,\n      source: 'git::https://github.com/tomfa/terraform.git//files',\n      parameters: {\n        bucket_name: `\"${getStagingBucketName(bucketName)}\"`,\n        aws_region: region ? `\"${region}\"` : `var.${INPUT.AWS_REGION}`,\n        acl: shared ? '\"public-read\"' : '\"private\"',\n      },\n    });\n  }\n  return tfContent;\n};\n","import { QuestionSummary, ModuleSpec } from './types';\n\nexport const getIAMUserTfContent = ({\n  webApp,\n  bucketName,\n}: QuestionSummary): ModuleSpec[] => {\n  if (!bucketName) {\n    return [];\n  }\n  const parameters: Record<string, string> = {\n    bucket_names: `[\"${bucketName}\"]`,\n    iam_user_name: `\"${bucketName}-user\"`,\n  };\n  if (webApp) {\n    parameters.cloudfront_distribution_ids = `[module.web-app.CLOUDFRONT_DISTRIBUTION_ID]`;\n  }\n  return [\n    {\n      name: 'user',\n      source: `git::https://github.com/tomfa/terraform.git//user`,\n      parameters,\n    },\n  ];\n};\n","import { domainIsApex, domainIsWWW, getApexDomain } from '../domain';\nimport { QuestionSummary, BucketProp } from './types';\n\nexport const getBucketModuleNames = ({\n  webApp,\n  staging,\n  forwardingBucket,\n}: QuestionSummary): BucketProp => {\n  const genericBucketName = webApp ? 'web-app' : 'file-storage';\n  const mainBucket = staging\n    ? `${genericBucketName}-production`\n    : genericBucketName;\n  const stagingBucket = staging ? `${genericBucketName}-staging` : null;\n  return {\n    staging: stagingBucket,\n    main: mainBucket,\n    redirect: forwardingBucket ? 'redirect' : null,\n  };\n};\n\nexport const getStagingBucketName = (bucketName: string): string => {\n  if (!bucketName) {\n    return `staging.\\\\$\\{var.bucket_name}`;\n  }\n  return getStagingDomain(bucketName);\n};\n\nexport const getStagingDomain = (domain: string): string => {\n  if (domainIsApex(domain) || domainIsWWW(domain)) {\n    const apex = getApexDomain(domain);\n    return `staging.${apex}`;\n  }\n  return `staging-${domain}`;\n};\n\nexport const getBucketDomains = ({\n  bucketName,\n  staging,\n  forwardingBucket,\n}: QuestionSummary): BucketProp => {\n  const stagingBucket = staging ? getStagingDomain(bucketName) : null;\n  return {\n    staging: stagingBucket,\n    main: bucketName,\n    redirect: forwardingBucket || null,\n  };\n};\n","import { INPUT } from '../../enums';\nimport { ModuleSpec, QuestionSummary } from './types';\nimport {\n  getBucketModuleNames,\n  getStagingBucketName,\n  getStagingDomain,\n} from './names';\n\nexport const getWebAppBucketTfContent = (\n  props: QuestionSummary\n): ModuleSpec[] => {\n  if (!props.webApp) {\n    return [];\n  }\n  const names = getBucketModuleNames(props);\n  const { bucketName, region, staticPage, errorPath } = props;\n  const bucketSpec: ModuleSpec = {\n    name: names.main,\n    source: 'git::https://github.com/tomfa/terraform.git//webapp',\n    parameters: {\n      bucket_name: bucketName ? `\"${bucketName}\"` : `var.${INPUT.BUCKET_NAME}`,\n      aws_region: region ? `\"${region}\"` : `var.${INPUT.AWS_REGION}`,\n      error_path: staticPage && errorPath ? `\"/${errorPath}\"` : '\"/index.html\"',\n      error_code: staticPage ? '404' : '200',\n    },\n  };\n\n  if (props.createCertificates) {\n    bucketSpec.parameters.certificate_arn =\n      'module.certificate.CERTIFICATE_ARN';\n  }\n  if (props.configureDns && bucketName) {\n    bucketSpec.parameters.domain_aliases = `[\"${bucketName}\"]`;\n  }\n\n  if (!props.staging) {\n    return [bucketSpec];\n  }\n\n  const stagingSpec: ModuleSpec = {\n    ...bucketSpec,\n    name: names.staging,\n    parameters: {\n      ...bucketSpec.parameters,\n      bucket_name: `\"${getStagingBucketName(bucketName)}\"`,\n    },\n  };\n\n  if (props.configureDns && bucketName) {\n    stagingSpec.parameters.domain_aliases = `[\"${getStagingDomain(\n      bucketName\n    )}\"]`;\n  }\n\n  return [bucketSpec, stagingSpec];\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AACA;AALA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AASA;AACA;AAAA;AACA;;;;;;;;;;;;AChCA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;;;;;;;;;;;;AC9CA;AAEA;AAMA;AAGA;AACA;AACA;AACA;AAAA;AAJA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AACA;AAUA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAFA;AAHA;AACA;AAQA;AACA;AAGA;AACA;AACA;AACA;;;;A","sourceRoot":""}
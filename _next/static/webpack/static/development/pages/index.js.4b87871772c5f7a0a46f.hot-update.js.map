{"version":3,"file":"static/webpack/static/development/pages/index.js.4b87871772c5f7a0a46f.hot-update.js","sources":["webpack:///./components/Infrastructure/LoadingIcon.tsx","webpack:///./pages/index.tsx"],"sourcesContent":["import styled from 'styled-components';\nconst Svg = styled.svg`\n  margin: auto;\n  display: block;\n  shape-rendering: auto;\n\n  & path {\n    fill: ${(p) => p.theme.colors.primary};\n  }\n`;\n\nconst LoadingIcon = ({ size = 300 }: { size?: number }) => (\n  <Svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={`${size}px`}\n    height={`${size}px`}\n    viewBox=\"0 0 100 100\"\n    preserveAspectRatio=\"xMidYMid\">\n    <g transform=\"translate(50 50)\">\n      <g>\n        <animateTransform\n          attributeName=\"transform\"\n          type=\"rotate\"\n          values=\"0;45\"\n          keyTimes=\"0;1\"\n          dur=\"0.2s\"\n          repeatCount=\"indefinite\"\n        />\n        <path d=\"M29.491524206117255 -5.5 L37.491524206117255 -5.5 L37.491524206117255 5.5 L29.491524206117255 5.5 A30 30 0 0 1 24.742744050198738 16.964569457146712 L24.742744050198738 16.964569457146712 L30.399598299691117 22.621423706639092 L22.621423706639096 30.399598299691114 L16.964569457146716 24.742744050198734 A30 30 0 0 1 5.5 29.491524206117255 L5.5 29.491524206117255 L5.5 37.491524206117255 L-5.499999999999997 37.491524206117255 L-5.499999999999997 29.491524206117255 A30 30 0 0 1 -16.964569457146705 24.742744050198738 L-16.964569457146705 24.742744050198738 L-22.621423706639085 30.399598299691117 L-30.399598299691117 22.621423706639092 L-24.742744050198738 16.964569457146712 A30 30 0 0 1 -29.491524206117255 5.500000000000009 L-29.491524206117255 5.500000000000009 L-37.491524206117255 5.50000000000001 L-37.491524206117255 -5.500000000000001 L-29.491524206117255 -5.500000000000002 A30 30 0 0 1 -24.742744050198738 -16.964569457146705 L-24.742744050198738 -16.964569457146705 L-30.399598299691117 -22.621423706639085 L-22.621423706639092 -30.399598299691117 L-16.964569457146712 -24.742744050198738 A30 30 0 0 1 -5.500000000000011 -29.491524206117255 L-5.500000000000011 -29.491524206117255 L-5.500000000000012 -37.491524206117255 L5.499999999999998 -37.491524206117255 L5.5 -29.491524206117255 A30 30 0 0 1 16.964569457146702 -24.74274405019874 L16.964569457146702 -24.74274405019874 L22.62142370663908 -30.39959829969112 L30.399598299691117 -22.6214237066391 L24.742744050198738 -16.964569457146716 A30 30 0 0 1 29.491524206117255 -5.500000000000013 M0 -20A20 20 0 1 0 0 20 A20 20 0 1 0 0 -20\" />\n      </g>\n    </g>\n  </Svg>\n);\n\nexport default LoadingIcon;\n","import { useCallback, useState } from 'react';\nimport {\n  Colored,\n  PageWrapper,\n  Section,\n  SectionBackground,\n} from '../components/utils';\nimport Header from '../components/HeaderSection';\nimport BlockQuote from '../components/BlockQuote';\nimport RadioGroup from '../components/forms/RadioGroup';\nimport CheckboxGroup from '../components/forms/CheckboxGroup';\nimport {\n  CheckboxSelectionMap,\n  generateDefaultCheckboxSelectedOptions,\n  generateDefaultRadioSelectedOptions,\n  questions,\n  RadioSelectionMap,\n} from '../utils/questions';\nimport Infrastructure from '../components/Infrastructure';\nimport { BOOL_VALUE, QUESTION_ID } from '../enums';\nimport Footer from '../components/Footer';\n\nexport default function Home() {\n  const [selectedRadioOptions, setSelectedRadioOptions] = useState<\n    RadioSelectionMap\n  >(generateDefaultRadioSelectedOptions(questions));\n  const [selectedCheckboxOptions, setSelectedCheckboxOptions] = useState<\n    CheckboxSelectionMap\n  >(generateDefaultCheckboxSelectedOptions(questions));\n  const hasSelected = useCallback(\n    (questionId: QUESTION_ID, value: string): boolean => {\n      const question = questions.find((q) => q.id === questionId);\n      if (!question) {\n        throw Error(`Missing question for ${questionId}`);\n      }\n      if (!question.options.filter((o) => o.value === value)) {\n        throw Error(`Question ${questionId} does not have option ${value}`);\n      }\n      if (question.type === 'radio') {\n        return selectedRadioOptions[question.id]?.value === value;\n      }\n      if (question.type === 'checkbox') {\n        return !!selectedCheckboxOptions[question.id].find(\n          (o) => o.value === value\n        );\n      }\n    },\n    [selectedRadioOptions, selectedCheckboxOptions, questions]\n  );\n\n  return (\n    <PageWrapper>\n      <Header />\n      <Intro />\n      <Section>\n        {questions.map((question) => {\n          if (question.type === 'radio') {\n            return (\n              <RadioGroup\n                id={question.id}\n                key={question.id}\n                options={question.options}\n                selectedOption={selectedRadioOptions[question.id] || null}\n                onChange={(value) =>\n                  setSelectedRadioOptions((prev) => ({\n                    ...prev,\n                    [question.id]: value,\n                  }))\n                }\n                title={question.title}\n                description={question.description}\n              />\n            );\n          }\n          if (question.type === 'checkbox') {\n            return (\n              <CheckboxGroup\n                id={question.id}\n                key={question.id}\n                options={question.options}\n                selectedOptions={selectedCheckboxOptions[question.id] || []}\n                onChange={(value) =>\n                  setSelectedCheckboxOptions((prev) => ({\n                    ...prev,\n                    [question.id]: value,\n                  }))\n                }\n                title={question.title}\n                description={question.description}\n              />\n            );\n          }\n          throw new Error(`Unexpected question type ${question.type}`);\n        })}\n      </Section>\n      <Infrastructure\n        webApp={hasSelected(QUESTION_ID.storageType, 'webapp')}\n        shared={hasSelected(QUESTION_ID.aclPublic, BOOL_VALUE.TRUE)}\n        staging={hasSelected(QUESTION_ID.stagingEnv, BOOL_VALUE.TRUE)}\n        staticPage={hasSelected(QUESTION_ID.webappIsStatic, BOOL_VALUE.TRUE)}\n      />\n      <Footer />\n    </PageWrapper>\n  );\n}\n\nconst Intro = () => (\n  <Section>\n    <BlockQuote\n      author={'Lolrus, the bucket walrus'}\n      source={'At the launch of AWS S3 in 2006'}>\n      <>\n        Hosting a<Colored> webapp </Colored>\n        or need to store uploads? Put them in S3 buckets. It&apos;s\n        <Colored> cheap </Colored>\n        and\n        <Colored> reliable</Colored>. With CloudFront cache, it&apos;ll be\n        blazingly <Colored>fast</Colored>. Let&apos;s see how\n        <Colored> easy </Colored>\n        it can be.\n      </>\n    </BlockQuote>\n  </Section>\n);\n\nconst Questionare = () => {};\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AACA;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AAMA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAMA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAMA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAMA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAZA;AACA;AAkBA;;;;A","sourceRoot":""}
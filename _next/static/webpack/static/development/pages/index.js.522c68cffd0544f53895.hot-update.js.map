{"version":3,"file":"static/webpack/static/development/pages/index.js.522c68cffd0544f53895.hot-update.js","sources":["webpack:///./enums.ts"],"sourcesContent":["/* eslint-disable no-shadow */\n\nexport enum VALUES {\n  NOT_EMPTY,\n}\n\nexport enum QUESTION_ID {\n  createCertificates = 'create-certificates',\n  bucketName = 'bucket',\n  storageType = 'storage',\n  webappIsStatic = 'static',\n  aclPublic = 'public',\n  configureDns = 'configure-dns',\n  stagingEnv = 'staging',\n  region = 'region',\n}\n\nexport enum BOOL_VALUE {\n  FALSE = 'false',\n  TRUE = 'true',\n}\n\nexport enum INPUT {\n  BUCKET_NAME = 'bucket_name',\n  AWS_REGION = 'aws_region',\n  AWS_ACCESS_KEY = 'aws_access_key',\n  AWS_SECRET_KEY = 'aws_secret_key',\n  ACL = 'acl',\n  ERROR_RESPONSE_CODE = 'error_response_code',\n  ERROR_RESPONSE_PATH = 'error_response_path',\n}\n\nexport const getInputDescription = (input: INPUT): string => {\n  return {\n    [INPUT.BUCKET_NAME]: 'Name of S3 bucket',\n    [INPUT.AWS_REGION]: 'Region to deploy to, e.g. eu-north-1, us-east-1',\n    [INPUT.AWS_ACCESS_KEY]:\n      'e.g. AKIA... found in your AWS console > Security credentials',\n    [INPUT.AWS_SECRET_KEY]:\n      'e.g. yaAS$1... found in your AWS console > Security credentials',\n    [INPUT.ACL]:\n      'e.g. AKIA... found in your AWS console > Security credentials',\n    [INPUT.ERROR_RESPONSE_CODE]:\n      'e.g. HTTP status code response when no file matching path is found',\n    [INPUT.ERROR_RESPONSE_PATH]:\n      'e.g. Which file Cloudfront serves when encountering a missing file',\n  }[input];\n};\n\nexport enum BUCKET_TYPE {\n  WEBAPP = 'web-app',\n  FILE_STORAGE = 'file-storage',\n}\n\nexport const getOutput = ({\n  bucketType,\n  hasStaging,\n}: {\n  bucketType: BUCKET_TYPE;\n  hasStaging: boolean;\n}): { value: string; label: string }[] => {\n  const outputs = [];\n  const bucketNames = hasStaging\n    ? [`${bucketType}-production`, `${bucketType}-staging`]\n    : [bucketType];\n  bucketNames.forEach((name) => {\n    const stageName = hasStaging && name.split('-')[name.split('-').length - 1];\n    const prefix = stageName ? `${stageName}.` : '';\n    outputs.push({\n      value: `module.${name}.AWS_SECRET_ACCESS_KEY`,\n      label: `${prefix}AWS_SECRET_ACCESS_KEY`,\n    });\n    outputs.push({\n      value: `module.${name}.AWS_ACCESS_KEY_ID`,\n      label: `${prefix}AWS_ACCESS_KEY_ID`,\n    });\n    outputs.push({\n      value: `module.${name}.BUCKET_NAME`,\n      label: `${prefix}BUCKET_NAME`,\n    });\n\n    if (bucketType === BUCKET_TYPE.WEBAPP) {\n      outputs.push({\n        value: `module.${name}.CLOUDFRONT_URL`,\n        label: `${prefix}CLOUDFRONT_URL`,\n      });\n    }\n  });\n  return outputs;\n};\n\nexport enum AWS_REGIONS {\n  US_EAST_2 = 'us-east-2',\n  US_EAST_1 = 'us-east-1',\n  US_WEST_1 = 'us-west-1',\n  US_WEST_2 = 'us-west-2',\n  AF_SOUTH_1 = 'af-south-1',\n  AP_EAST_1 = 'ap-east-1',\n  AP_SOUTH_1 = 'ap-south-1',\n  AP_NORTHEAST_3 = 'ap-northeast-3',\n  AP_NORTHEAST_2 = 'ap-northeast-2',\n  AP_SOUTHEAST_1 = 'ap-southeast-1',\n  AP_SOUTHEAST_2 = 'ap-southeast-2',\n  AP_NORTHEAST_1 = 'ap-northeast-1',\n  CA_CENTRAL_1 = 'ca-central-1',\n  CN_NORTH_1 = 'cn-north-1',\n  CN_NORTHWEST_1 = 'cn-northwest-1',\n  EU_CENTRAL_1 = 'eu-central-1',\n  EU_WEST_1 = 'eu-west-1',\n  EU_WEST_2 = 'eu-west-2',\n  EU_SOUTH_1 = 'eu-south-1',\n  EU_WEST_3 = 'eu-west-3',\n  EU_NORTH_1 = 'eu-north-1',\n  SA_EAST_1 = 'sa-east-1',\n  ME_SOUTH_1 = 'me-south-1',\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AAAA;AACA;AAAA;AAcA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AAMA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}
{"version":3,"file":"static/webpack/static/development/pages/index.js.b73c06583e6fd4ab483c.hot-update.js","sources":["webpack:///./components/code/Code.tsx","webpack:///./styles/theme.ts"],"sourcesContent":["/* eslint-disable react/no-array-index-key */\n\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { copyToClipBoard } from '../../utils/clipboard';\nimport Mute from '../Mute.style';\nimport Pre from './Pre.style';\nimport PreButton from './PreButton.style';\nimport { Colored } from \"../utils\";\n\ntype Props = { mainTfContent: string[]; bucketName: string };\n\nconst Code = ({ mainTfContent, bucketName }: Props) => {\n  const [hasCopied, setHasCopied] = useState<boolean>(false);\n  const lines = useMemo(\n    () => [\n      '# Create a folder to store infrastructure code',\n      'mkdir infrastructure',\n      'cd infrastructure',\n      '',\n      '# Create config file',\n      `cat <<EOT >> ${bucketName || 'main'}.tf`,\n      ...mainTfContent,\n      'EOT',\n      '',\n      '# Deploy',\n      'terraform init',\n      'terraform apply',\n    ],\n    [mainTfContent, bucketName]\n  );\n  const copy = useCallback(() => {\n    copyToClipBoard(lines);\n    setHasCopied(true);\n  }, [lines]);\n\n  useEffect(() => setHasCopied(false), [mainTfContent, bucketName]);\n\n  return (\n    <Pre>\n      {lines.map((line, i) => {\n        if (line.trim().startsWith('#')) {\n          return (\n            <Mute key={i}>\n              {line}\n              {'\\n'}\n            </Mute>\n          );\n        }\n        return (\n          <span key={i}>\n            {line}\n            {'\\n'}\n          </span>\n        );\n      })}\n      <PreButton onClick={copy}>\n        {(hasCopied && <span>Copied! <Colored color={theme.colors.success}>âœ”</Colored> </span>) || 'Copy to clipboard'}\n      </PreButton>\n    </Pre>\n  );\n};\n\nexport default Code;\n","import { useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\n\nexport const theme = {\n  fonts: {\n    primary:\n      '-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,\\n' +\n      '    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif',\n    secondary: \"'Barlow Condensed', sans-serif\",\n  },\n  colors: {\n    primary: '#fd9228',\n    secondary: '#e15342',\n    bgPrimary: '#fdf6e6',\n    bgSecondary: '#111111',\n    bgMuted: '#efefef',\n    textPrimary: '#000000',\n    textSecondary: '#fafafa',\n    textMuted: '#888888',\n    links: '#0070f3',\n    success: '#22ee22'\n  },\n  layout: {\n    maxWidth: 640,\n  },\n};\n\nexport const useTheme = (): typeof theme => {\n  const themeContext = useContext(ThemeContext);\n  return (themeContext as unknown) as typeof theme;\n};\n\nexport default theme;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAgBA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;AC9DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AADA;AAnBA;AAwBA;AACA;AACA;AACA;AAEA;;;;A","sourceRoot":""}
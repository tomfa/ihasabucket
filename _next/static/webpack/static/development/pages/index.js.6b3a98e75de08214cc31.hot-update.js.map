{"version":3,"file":"static/webpack/static/development/pages/index.js.6b3a98e75de08214cc31.hot-update.js","sources":["webpack:///./components/forms/TextInput.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport Header from '../Header.style';\nimport { sleep } from '../utils';\nimport Description from './Description.style';\nimport Question from './Question.style';\nimport Input from './Input.style';\nimport InputContainer from './InputContainer.styles';\nimport SubmitButton from './SubmitButton.styles';\n\ninterface Props {\n  id: string;\n  value?: string;\n  onSubmit: (selected: string) => void;\n  title: string;\n  placeholder?: string;\n  placeholders?: string[];\n  description?: string;\n  disabled?: boolean;\n}\n\nconst TextInput = ({\n  onSubmit,\n  value = '',\n  title,\n  placeholder,\n  placeholders,\n  description,\n}: Props) => {\n  const [inputValue, setInputValue] = useState<string>(value || '');\n  const [hasSubmitted, setSubmitted] = useState<boolean>(!!value);\n  const [updateRef, setUpdateRef] = useState<ReturnType<setTimeout>>()\n  const [placeholderIndex, setPlaceholderIndex] = useState<number>(\n    placeholders?.length ? 0 : -1\n  );\n  const [currentPlaceHolder, setCurrentPlaceHolder] = useState<string>(\n    placeholderIndex === -1 ? placeholder : placeholders[placeholderIndex]\n  );\n  useEffect(() => {\n    if (value) {\n      setSubmitted(true);\n    }\n    if (typeof value === 'string') {\n      setInputValue(value);\n    }\n  }, [value]);\n  useEffect(() => {\n    if (!placeholders || placeholders.length < 2) {\n      return;\n    }\n\n    updatePlaceHolderDelayed(\n      placeholders,\n      placeholderIndex,\n      setPlaceholderIndex,\n      setCurrentPlaceHolder\n    );\n  }, [placeholderIndex]);\n\n  const cleanInput = (val: string) => val.toLowerCase().replace(' ', '-');\n  const submit = (submitValue) => {\n    if (!hasSubmitted) {\n      setSubmitted(true);\n    }\n    onSubmit(cleanInput(submitValue));\n  };\n  return (\n    <Question>\n      {title && <Header>{title}</Header>}\n      <InputContainer>\n        <Input\n          type=\"text\"\n          value={inputValue}\n          placeholder={currentPlaceHolder}\n          onChange={(e) => {\n            if (hasSubmitted) {\n              onSubmit(e.target.value);\n            } else {\n              setInputValue(cleanInput(e.target.value));\n            }\n          }}\n          onKeyPress={(e) => e.key === 'Enter' && submit(inputValue)}\n          onBlur={() => submit(inputValue)}\n        />\n        <SubmitButton\n          type=\"submit\"\n          complete={inputValue.trim().length > 0}\n          onClick={() => submit(inputValue)}\n        />\n      </InputContainer>\n      {description && <Description>{description}</Description>}\n    </Question>\n  );\n};\n\nconst updatePlaceHolderDelayed = async (\n  placeholders: string[],\n  placeholderIndex: number,\n  setPlaceholderIndex: any,\n  setCurrentPlaceHolder: (value: string) => void,\n  delayMs: number = 7000\n) => {\n  await sleep(delayMs);\n  const oldPlaceHolder = placeholders[placeholderIndex % placeholders.length];\n  const newPlaceHolder =\n    placeholders[(placeholderIndex + 1) % placeholders.length];\n  const steps = oldPlaceHolder.length + newPlaceHolder.length + 4;\n  const stepSizeMs = 25;\n  for (let i = 0; i <= steps; i++) {\n    const shouldRemove = i <= oldPlaceHolder.length;\n    const shouldAdd = steps - i <= newPlaceHolder.length;\n    if (shouldRemove) {\n      setCurrentPlaceHolder(\n        oldPlaceHolder.substr(0, oldPlaceHolder.length - i)\n      );\n    } else if (shouldAdd) {\n      setCurrentPlaceHolder(\n        newPlaceHolder.substr(0, newPlaceHolder.length - (steps - i))\n      );\n    }\n    //  â€“ it's ok in a for loop\n    // eslint-disable-next-line no-await-in-loop\n    await sleep(stepSizeMs);\n  }\n  setPlaceholderIndex((index) => index + (1 % placeholders.length));\n};\n\nexport default TextInput;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AALA;AAAA;AACA;AADA;AAQA;AACA;AAEA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAGA;AAEA;AACA;AACA;AA5BA;AAAA;AACA;AADA;AAaA;AAbA;AAAA;AACA;AADA;AA6BA;AAAA;AAAA;AACA;AA9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA+BA;;;;A","sourceRoot":""}
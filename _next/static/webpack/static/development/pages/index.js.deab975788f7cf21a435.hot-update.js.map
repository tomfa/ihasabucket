{"version":3,"file":"static/webpack/static/development/pages/index.js.deab975788f7cf21a435.hot-update.js","sources":["webpack:///./questions/useQuestions.ts","webpack:///./sections/Infrastructure.tsx"],"sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { QUESTION_ID } from '../enums';\nimport { Answer, AnswerMap } from '../types';\nimport { useUrlState } from '../utils/useUrlState';\nimport {\n  getDefaultAnswer,\n  getQuestionsToRender,\n  normalizeAnswer,\n} from './utils';\nimport { questions } from './data';\nimport { trail } from '../utils/splitbee';\n\nconst useQuestions = () => {\n  const [answeredQuestions, setAnsweredQuestions] = useState<QUESTION_ID[]>([]);\n  const { urlData, updateUrlData } = useUrlState();\n  const [answers, setAnswers] = useState<AnswerMap>({} as AnswerMap);\n  useEffect(() => {\n    if (answeredQuestions.length > 0) {\n      return;\n    }\n    const defaultAnswers = questions.reduce(\n      (map, question) => ({\n        ...map,\n        [question.id]: getDefaultAnswer(\n          question,\n          urlData[question.id] !== undefined\n            ? String(urlData[question.id])\n            : undefined\n        ),\n      }),\n      {} as AnswerMap\n    );\n    const isFirstRender = !Object.keys(answers).length;\n    const isInitialLoadFromUrl = Object.keys(urlData).length;\n    if (isInitialLoadFromUrl) {\n      const urlQuestions = Object.keys(urlData) as QUESTION_ID[];\n\n      // TODO: dirty hack to assume that first answer is answered if there are others\n      if (\n        urlQuestions.length &&\n        !urlQuestions.includes(QUESTION_ID.bucketName)\n      ) {\n        urlQuestions.push(QUESTION_ID.bucketName);\n      }\n      setAnsweredQuestions(urlQuestions);\n      setAnswers(defaultAnswers);\n    } else if (isFirstRender) {\n      setAnswers(defaultAnswers);\n    }\n  }, [urlData, answeredQuestions]);\n  const renderQuestions = useMemo(\n    () => getQuestionsToRender(answers, answeredQuestions),\n    [answeredQuestions, answers]\n  );\n  const hasAnsweredAll = !renderQuestions.find(\n    (q) => !answeredQuestions.includes(q.id)\n  );\n  const updateAnswer = useCallback(\n    (questionId: QUESTION_ID, answer: Answer) => {\n      updateUrlData({ [String(questionId)]: normalizeAnswer(answer) });\n      setAnswers((prevAnswers) => ({\n        ...prevAnswers,\n        [questionId]: answer,\n      }));\n    },\n    [setAnswers, updateUrlData]\n  );\n  const answerQuestion = useCallback(\n    (questionId: QUESTION_ID, answer: Answer) => {\n      updateAnswer(questionId, answer);\n      setAnsweredQuestions((qs) => {\n        if (qs.includes(questionId)) {\n          return qs;\n        }\n        trail(questionId, { answer });\n        return [...qs, questionId];\n      });\n    },\n    [updateAnswer]\n  );\n  return {\n    answers,\n    renderQuestions,\n    updateAnswer,\n    answerQuestion,\n    hasAnsweredAll,\n  };\n};\n\nexport default useQuestions;\n","/* eslint-disable react/no-array-index-key */\n\nimport { useEffect, useState } from 'react';\nimport Description from '../components/forms/Description.style';\nimport Header from '../components/Header.style';\nimport { getTerraFormPackage } from '../utils/terraform';\nimport Pre from '../components/code/Pre.style';\nimport Mute from '../components/Mute.style';\nimport LoadingIcon from '../components/icons/LoadingIcon';\nimport Code from '../components/code/Code';\nimport { ShareLink } from '../components/ShareLink';\nimport { TerraformProps } from '../utils/terraform/types';\nimport { trail } from '../utils/splitbee';\n\nconst Infrastructure = (props: TerraformProps) => {\n  const { description, mainTfContent } = getTerraFormPackage(props);\n  const [loading, setLoading] = useState<boolean>(true);\n  useEffect(() => trail('completed', props), []);\n  useEffect(() => {\n    setTimeout(() => setLoading(false), 800);\n  }, [mainTfContent]);\n  if (loading) {\n    return <LoadingIcon />;\n  }\n\n  return (\n    <>\n      <Header as={'h1'}>Bucket is served!</Header>\n      Just run the script below, or share this{' '}\n      <ShareLink text={getShareTitle(props)}>configuration url</ShareLink> for\n      later.\n      <Code bucketName={props.bucketName} mainTfContent={mainTfContent} />\n      <Description style={{ fontWeight: 'bold' }}>\n        The script above will plan the infrastructure and prompt you for\n        confirmation.\n      </Description>\n      {description.map((text, i) => (\n        <Description key={i}>{text}</Description>\n      ))}\n      <Header>Prerequisites</Header>\n      <h4>AWS Account</h4>\n      <p>\n        If you don&apos;t have an AWS account already, sign up at{' '}\n        <a href=\"https://portal.aws.amazon.com/billing/signup#/start\">\n          aws.amazon.com\n        </a>\n      </p>\n      <p>\n        If you don&apos;t have your <strong>AWS_SECRET_ACCESS_KEY</strong> and{' '}\n        <strong>AWS_ACCESS_KEY_ID</strong> handy, find those in the top right\n        corner under your name &gt; Security credentials. They should be\n        exported to your environment:\n      </p>\n      <Pre>\n        <Mute># Export AWS keys{'\\n'}</Mute>\n        export AWS_SECRET_ACCESS_KEY=yaAS$1...{'\\n'}\n        export AWS_ACCESS_KEY_ID=AKIA...\n      </Pre>\n      <h4>Terraform installed</h4>\n      <p>\n        If you haven&apos;t already,{' '}\n        <a href=\"https://learn.hashicorp.com/tutorials/terraform/install-cli\">\n          install Terraform\n        </a>\n      </p>\n      <Pre>\n        <Mute># For Macs with homebrew{'\\n'}</Mute>\n        brew install hashicorp/tap/terraform\n      </Pre>\n      <Description>\n        See{' '}\n        <a href=\"https://learn.hashicorp.com/tutorials/terraform/install-cli\">\n          learn.hashicorp.com/tutorials/terraform/install-cli\n        </a>{' '}\n        for other platforms.\n      </Description>\n    </>\n  );\n};\n\nconst getShareTitle = ({\n  bucketName,\n  webApp,\n  region,\n  shared,\n}: TerraformProps): string | undefined => {\n  const regionPostfix = region ? ` in ${region}` : '';\n  if (bucketName && region) {\n    return `Launch ${bucketName}${regionPostfix}`;\n  }\n  if (webApp && region) {\n    return `Launch a web app ${regionPostfix}`;\n  }\n  if (!webApp && region) {\n    const aclText = shared ? 'public' : 'private';\n    return `Host ${aclText} files in ${regionPostfix}`;\n  }\n  return undefined;\n};\n\nexport default Infrastructure;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAWA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAIA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1FA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}
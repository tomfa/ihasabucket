{"version":3,"file":"static/webpack/static/development/pages/index.js.39b5c0d838ec6f728049.hot-update.js","sources":["webpack:///./components/Infrastructure/index.tsx","webpack:///./components/forms/TextInput.tsx","webpack:///./pages/index.tsx","webpack:///./utils/questions.ts"],"sourcesContent":["/* eslint-disable react/no-array-index-key */\n\nimport { useEffect, useState } from 'react';\nimport Description from '../forms/Description.style';\nimport Header from '../Header.style';\nimport { getTerraFormPackage } from './utils';\nimport Pre from './Pre.style';\nimport List from './List.style';\nimport ListItem from './ListItem.style';\nimport Mute from './Mute.style';\nimport LoadingIcon from './LoadingIcon';\n\ntype Props = {\n  webApp: boolean;\n  staging: boolean;\n  shared: boolean;\n  staticPage: boolean;\n  bucketName: string;\n  region: string;\n};\n\nconst Infrastructure = (props: Props) => {\n  const { description, mainTfContent } = getTerraFormPackage(props);\n  const [loading, setLoading] = useState<boolean>(true);\n  useEffect(() => {\n    setTimeout(() => setLoading(false), 800);\n  }, [mainTfContent]);\n  if (loading) {\n    return <LoadingIcon />;\n  }\n  return (\n    <>\n      <Header as={'h1'}>Bucket is served!</Header>\n      Just run the script below!\n      <Pre>\n        <Mute># Create a folder to store infrastructure code</Mute>\n        {'\\n'}\n        mkdir infrastructure{'\\n'}\n        cd infrastructure{'\\n'}\n        {'\\n'}\n        <Mute># Create config file</Mute>\n        {'\\n'}\n        cat &lt;&lt;EOT &gt;&gt; main.tf{'\\n'}\n        {mainTfContent.map((line, i) => (\n          <span key={i}>\n            {line}\n            {'\\n'}\n          </span>\n        ))}\n        EOT{'\\n'}\n        {'\\n'}\n        <Mute># Deploy</Mute>\n        {'\\n'}\n        terraform init{'\\n'}\n        terraform apply{'\\n'}\n      </Pre>\n      <Description>\n        The script above ask you for desired bucket name and AWS region.\n      </Description>\n      <Description>{description}</Description>\n      <h4>Prerequisites</h4>\n      <List>\n        <ListItem>\n          If you don&apos;t have an AWS account already, sign up at{' '}\n          <a href=\"https://portal.aws.amazon.com/billing/signup#/start\">\n            aws.amazon.com\n          </a>\n        </ListItem>\n        <ListItem>\n          If you don&apos;t have your <strong>AWS_SECRET_ACCESS_KEY</strong> and{' '}\n          <strong>AWS_ACCESS_KEY_ID</strong> handy, find those in the top right\n          corner under your name &gt; Security credentials. They should be\n          exported to your environment:\n          <Pre>\n            <Mute># Export AWS keys{'\\n'}</Mute>\n            export AWS_SECRET_ACCESS_KEY=yaAS$1...{'\\n'}\n            export AWS_ACCESS_KEY_ID=AKIA...\n          </Pre>\n        </ListItem>\n        <ListItem>\n          If you haven&apos;t already,{' '}\n          <a href=\"https://learn.hashicorp.com/tutorials/terraform/install-cli\">\n            install Terraform\n          </a>\n          {`\\n`}\n          <Pre>\n            <Mute># For Macs with homebrew{'\\n'}</Mute>\n            brew install hashicorp/tap/terraform\n          </Pre>\n          <Description>\n            See{' '}\n            <a href=\"https://learn.hashicorp.com/tutorials/terraform/install-cli\">\n              learn.hashicorp.com/tutorials/terraform/install-cli\n            </a>{' '}\n            for other platforms.\n          </Description>\n        </ListItem>\n      </List>\n    </>\n  );\n};\n\nexport default Infrastructure;\n","import { useState } from 'react';\n\nimport Header from '../Header.style';\nimport Description from './Description.style';\nimport Question from './Question.style';\nimport Input from './Input.style';\nimport InputContainer from './InputContainer.styles';\nimport SubmitButton from './SubmitButton.styles';\n\ninterface Props {\n  id: string;\n  value?: string;\n  onSubmit: (selected: string) => void;\n  title: string;\n  placeholder?: string;\n  description?: string;\n  disabled?: boolean;\n}\n\nconst TextInput = ({\n  onSubmit,\n  value = '',\n  title,\n  placeholder,\n  description,\n}: Props) => {\n  const [inputValue, setInputValue] = useState<string>(value);\n  const [hasSubmitted, setSubmitted] = useState<boolean>(false);\n  const submit = (value) => {\n    setSubmitted(true);\n    onSubmit(value);\n  }\n  return (\n    <Question>\n      {title && <Header>{title}</Header>}\n      <InputContainer>\n        <Input\n          type=\"text\"\n          value={inputValue}\n          placeholder={placeholder}\n          onChange={(e) => {\n            setInputValue(e.target.value);\n            if (hasSubmitted) {\n              onSubmit(e.target.value);\n            }\n          }}\n          onKeyPress={(e) => e.key === 'Enter' && submit(inputValue)}\n          onBlur={() => submit(inputValue)}\n        />\n        <SubmitButton\n          type=\"submit\"\n          complete={inputValue.trim().length > 0}\n          onClick={() => submit(inputValue)}\n        />\n      </InputContainer>\n      {description && <Description>{description}</Description>}\n    </Question>\n  );\n};\n\nexport default TextInput;\n","import { useCallback, useState } from \"react\";\nimport { Colored, PageWrapper, Section } from \"../components/utils\";\nimport Header from \"../components/HeaderSection\";\nimport BlockQuote from \"../components/BlockQuote\";\nimport RadioGroup from \"../components/forms/RadioGroup\";\nimport CheckboxGroup from \"../components/forms/CheckboxGroup\";\nimport {\n  CheckboxSelectionMap,\n  generateDefaultCheckboxSelectedOptions,\n  generateDefaultRadioSelectedOptions,\n  questions,\n  RadioSelectionMap,\n  TextAnswerMap\n} from \"../utils/questions\";\nimport Infrastructure from \"../components/Infrastructure\";\nimport { BOOL_VALUE, QUESTION_ID, VALUES } from \"../enums\";\nimport Footer from \"../components/Footer\";\nimport {\n  CheckboxQuestion,\n  DropdownQuestion,\n  InputQuestion,\n  Question,\n  QuestionType, RadioQuestion\n} from \"../types\";\nimport TextInput from \"../components/forms/TextInput\";\nimport DropDown from \"../components/forms/Dropdown\";\nimport questionData from \"../utils/questionData\";\n\nexport default function Home() {\n  return (\n    <PageWrapper>\n      <Header />\n      <Intro />\n      <Questionare />\n      <Footer />\n    </PageWrapper>\n  );\n}\n\nconst Intro = () => (\n  <Section>\n    <BlockQuote\n      author={'Lolrus, the bucket walrus'}\n      source={'At the launch of AWS S3 in 2006'}>\n      <>\n        Hosting a<Colored> webapp </Colored>\n        or need to store uploads? Put them in S3 buckets. It&apos;s\n        <Colored> cheap </Colored>\n        and\n        <Colored> reliable</Colored>. With CloudFront cache, it&apos;ll be\n        blazingly <Colored>fast</Colored>. Let&apos;s see how\n        <Colored> easy </Colored>\n        it can be.\n      </>\n    </BlockQuote>\n  </Section>\n);\n\nconst Questionare = () => {\n  const [selectedRadioOptions, setSelectedRadioOptions] = useState<\n    RadioSelectionMap\n  >(generateDefaultRadioSelectedOptions(questions));\n  const [selectedCheckboxOptions, setSelectedCheckboxOptions] = useState<\n    CheckboxSelectionMap\n  >(generateDefaultCheckboxSelectedOptions(questions));\n  const [textAnswers, setTextAnswers] = useState<TextAnswerMap>({});\n  const [questionRenderCount, setQuestionRenderCount] = useState<number>(0);\n  const hasSelected = useCallback(\n    (questionId: QUESTION_ID, value: string | VALUES): boolean => {\n      if (value === VALUES.NOT_EMPTY) {\n        return hasAnswered(questionId);\n      }\n      const question = questions.find((q) => q.id === questionId);\n      if (!question) {\n        throw Error(`Missing question for ${questionId}`);\n      }\n      if (question.type === 'text') {\n        return textAnswers[questionId] && textAnswers[questionId] === value;\n      }\n      if (!question.options.filter((o) => o.value === value)) {\n        throw Error(`Question ${questionId} does not have option ${value}`);\n      }\n      if (question.type === 'radio' || question.type === 'dropdown') {\n        return selectedRadioOptions[question.id]?.value === value;\n      }\n      if (question.type === 'checkbox') {\n        return !!selectedCheckboxOptions[question.id].find(\n          (o) => o.value === value\n        );\n      }\n    },\n    [selectedRadioOptions, selectedCheckboxOptions, questions]\n  );\n  const getTextAnswer = (question: InputQuestion) => {\n    return textAnswers[question.id];\n  };\n  const getRadioAnswer = (question: DropdownQuestion | RadioQuestion) => {\n    return selectedRadioOptions[question.id];\n  };\n\n  const hasAnswered = useCallback(\n    (questionId: QUESTION_ID): boolean => {\n      const question = questions.find((q) => q.id === questionId);\n      if (!question) {\n        throw Error(`Missing question for ${questionId}`);\n      }\n      if (question.type === 'radio' || question.type === 'dropdown') {\n        return selectedRadioOptions[question.id]?.value != null;\n      }\n      if (question.type === 'checkbox') {\n        return selectedCheckboxOptions[question.id].length > 0;\n      }\n      if (question.type === 'text') {\n        return Object.keys(textAnswers).includes(questionId);\n      }\n    },\n    [selectedRadioOptions, selectedCheckboxOptions, questions]\n  );\n  const shouldSkip = useCallback(\n    (question: Question): boolean =>\n      question.showIf &&\n      !!question.showIf.find((c) => !hasSelected(c.questionId, c.value)),\n    [hasSelected]\n  );\n  const hasAnsweredAll = !questions.find(\n    (q) => !hasAnswered(q.id) && !shouldSkip(q)\n  );\n  return (\n    <Section>\n      {questions.slice(0, questionRenderCount + 1).map((question) => {\n        const indexOfAllQuestions = questions.indexOf(question);\n        const isLast = indexOfAllQuestions === questionRenderCount;\n        if (shouldSkip(question)) {\n          if (isLast) {\n            setQuestionRenderCount((q) => q + 1);\n          }\n          return null;\n        }\n        if (question.type === 'radio') {\n          const answerValue = selectedRadioOptions[question.id] || null;\n          return (\n            <RadioGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answerValue}\n              onChange={(value) => {\n                setQuestionRenderCount((c) =>\n                  Math.max(c, indexOfAllQuestions + 1)\n                );\n                setSelectedRadioOptions((prev) => ({\n                  ...prev,\n                  [question.id]: value,\n                }));\n              }}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'checkbox') {\n          return (\n            <CheckboxGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOptions={selectedCheckboxOptions[question.id] || []}\n              onChange={(value) => {\n                setQuestionRenderCount((c) =>\n                  Math.max(c, indexOfAllQuestions + 1)\n                );\n                setSelectedCheckboxOptions((prev) => ({\n                  ...prev,\n                  [question.id]: value,\n                }));\n              }}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'text') {\n          return (\n            <TextInput\n              id={question.id}\n              key={question.id}\n              placeholder={question.placeholder}\n              onSubmit={(value) => {\n                setTextAnswers((prev) => ({\n                  ...prev,\n                  [question.id]: value,\n                }));\n                setQuestionRenderCount((c) =>\n                  Math.max(c, indexOfAllQuestions + 1)\n                );\n              }}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'dropdown') {\n          const answerValue = selectedRadioOptions[question.id] || null;\n          return (\n            <DropDown\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answerValue}\n              onChange={(value) => {\n                setSelectedRadioOptions((prev) => ({\n                  ...prev,\n                  [question.id]: value,\n                }));\n                setQuestionRenderCount((c) =>\n                  Math.max(c, indexOfAllQuestions + 1)\n                );\n              }}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        throw new Error(`Unexpected question type ${question.type}`);\n      })}\n      {hasAnsweredAll && (\n        <Infrastructure\n          webApp={hasSelected(QUESTION_ID.storageType, 'webapp')}\n          shared={hasSelected(QUESTION_ID.aclPublic, BOOL_VALUE.TRUE)}\n          staging={hasSelected(QUESTION_ID.stagingEnv, BOOL_VALUE.TRUE)}\n          staticPage={hasSelected(QUESTION_ID.webappIsStatic, BOOL_VALUE.TRUE)}\n          bucketName={getTextAnswer(questionData[\"domain-name\"])}\n          region={getRadioAnswer(questionData[QUESTION_ID.region]).value}\n        />\n      )}\n    </Section>\n  );\n};\n","import { Option, Question } from '../types';\nimport { QUESTION_ID } from '../enums';\nimport questionData from './questionData';\n\nexport const generateDefaultRadioSelectedOptions = (\n  radioQuestions: Question[]\n): RadioSelectionMap =>\n  radioQuestions\n    .filter((q) => q.type === 'radio' || q.type === 'dropdown')\n    .reduce(\n      (map, question) => ({\n        ...map,\n        [question.id]: getDefaultRadioOption(question),\n      }),\n      {}\n    );\n\nexport const generateDefaultCheckboxSelectedOptions = (\n  checkboxQuestions: Question[]\n): CheckboxSelectionMap =>\n  checkboxQuestions\n    .filter((q) => q.type === 'checkbox')\n    .reduce(\n      (map, question) => ({\n        ...map,\n        [question.id]: getDefaultCheckboxOption(question),\n      }),\n      {}\n    );\n\nexport const getDefaultRadioOption = (question: Question): Option | null => {\n  if (question.type === 'text') {\n    return null;\n  }\n  return (\n    question.options.find((o) => o?.value === question.defaultValue) || null\n  );\n};\n\nexport const getDefaultCheckboxOption = (question: Question): Option[] => {\n  if (question.type === 'text' || !question.defaultValue) {\n    return [];\n  }\n  if (typeof question.defaultValue === 'string') {\n    return question.options.filter((o) => o.value === question.defaultValue);\n  }\n  if (question.defaultValue instanceof Array) {\n    return question.options.filter((o) =>\n      (question.defaultValue as (string | number)[]).includes(o.value)\n    );\n  }\n  return [];\n};\n\nexport type RadioSelectionMap = Partial<\n  {\n    [questionId in QUESTION_ID]: Option | null;\n  }\n>;\nexport type CheckboxSelectionMap = Partial<\n  {\n    [questionId in QUESTION_ID]: Option[];\n  }\n>;\nexport type TextAnswerMap = Partial<\n  {\n    [questionId in QUESTION_ID]: string | null;\n  }\n>;\n\nexport const questions = Object.values(questionData);\nexport const questionsMap = questionData;\n"],"mappings":"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","sourceRoot":""}
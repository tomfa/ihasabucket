{"version":3,"file":"static/webpack/static/development/pages/index.js.9ff7db48b6396bdfc2a2.hot-update.js","sources":["webpack:///./components/forms/TextInput.tsx","webpack:///./questions/useQuestions.ts","webpack:///./sections/Questionare.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\n\nimport Header from '../Header.style';\nimport { sleep } from '../utils';\nimport Description from './Description.style';\nimport Question from './Question.style';\nimport Input from './Input.style';\nimport InputContainer from './InputContainer.styles';\nimport SubmitButton from './SubmitButton.styles';\n\ninterface Props {\n  id: string;\n  value?: string;\n  onChange: (selected: string) => void;\n  onSubmit: (selected: string) => void;\n  title: string;\n  placeholder?: string;\n  placeholders?: string[];\n  description?: string;\n  disabled?: boolean;\n}\n\nconst TextInput = ({\n  onChange,\n  onSubmit,\n  value = '',\n  title,\n  placeholder,\n  placeholders,\n  description,\n}: Props) => {\n  const [placeholderIndex, setPlaceholderIndex] = useState<number>(\n    placeholders?.length ? 0 : -1\n  );\n  const [currentPlaceHolder, setCurrentPlaceHolder] = useState<string>(\n    placeholderIndex === -1 ? placeholder : placeholders[placeholderIndex]\n  );\n  useEffect(() => {\n    if (!placeholders || placeholders.length < 2) {\n      return;\n    }\n    updatePlaceHolderDelayed(\n      placeholders,\n      placeholderIndex,\n      setPlaceholderIndex,\n      setCurrentPlaceHolder\n    );\n  }, [placeholderIndex]);\n\n  const cleanInput = useCallback((val: string) => val.toLowerCase().replace(' ', '-'), []);\n  const submit = useCallback((submitValue) => {\n    onSubmit(cleanInput(submitValue));\n  }, [onSubmit, cleanInput]);\n\n  return (\n    <Question>\n      {title && <Header>{title}</Header>}\n      <InputContainer>\n        <Input\n          type=\"text\"\n          value={value}\n          placeholder={currentPlaceHolder}\n          onChange={(e) => onChange(e.target.value)}\n          onKeyPress={(e) => e.key === 'Enter' && submit(value)}\n          onBlur={() => submit(value)}\n        />\n        <SubmitButton\n          type=\"submit\"\n          complete={value && value.trim().length > 0}\n          onClick={() => submit(value)}\n        />\n      </InputContainer>\n      {description && <Description>{description}</Description>}\n    </Question>\n  );\n};\n\nconst updatePlaceHolderDelayed = async (\n  placeholders: string[],\n  placeholderIndex: number,\n  setPlaceholderIndex: any,\n  setCurrentPlaceHolder: (value: string) => void,\n  delayMs: number = 7000\n) => {\n  await sleep(delayMs);\n  const oldPlaceHolder = placeholders[placeholderIndex % placeholders.length];\n  const newPlaceHolder =\n    placeholders[(placeholderIndex + 1) % placeholders.length];\n  const steps = oldPlaceHolder.length + newPlaceHolder.length + 4;\n  const stepSizeMs = 25;\n  for (let i = 0; i <= steps; i++) {\n    const shouldRemove = i <= oldPlaceHolder.length;\n    const shouldAdd = steps - i <= newPlaceHolder.length;\n    if (shouldRemove) {\n      setCurrentPlaceHolder(\n        oldPlaceHolder.substr(0, oldPlaceHolder.length - i)\n      );\n    } else if (shouldAdd) {\n      setCurrentPlaceHolder(\n        newPlaceHolder.substr(0, newPlaceHolder.length - (steps - i))\n      );\n    }\n    //  â€“ it's ok in a for loop\n    // eslint-disable-next-line no-await-in-loop\n    await sleep(stepSizeMs);\n  }\n  setPlaceholderIndex((index) => index + (1 % placeholders.length));\n};\n\nexport default TextInput;\n","import { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { QUESTION_ID } from '../enums';\nimport { Answer, AnswerMap } from '../types';\nimport { useUrlState } from '../utils/useUrlState';\nimport {\n  getDefaultAnswer,\n  getQuestionsToRender,\n  normalizeAnswer,\n} from './utils';\nimport { questions } from './data';\n\nconst useQuestions = () => {\n  const [answeredQuestions, setAnsweredQuestions] = useState<QUESTION_ID[]>([]);\n  const { urlData, updateUrlData } = useUrlState();\n  const [answers, setAnswers] = useState<AnswerMap>({} as AnswerMap);\n  useEffect(() => {\n    if (answeredQuestions.length > 0) {\n      return;\n    }\n    const defaultAnswers = questions.reduce(\n      (map, question) => ({\n        ...map,\n        [question.id]: getDefaultAnswer(\n          question,\n          urlData[question.id] !== undefined\n            ? String(urlData[question.id])\n            : undefined\n        ),\n      }),\n      {} as AnswerMap\n    );\n    const isFirstRender = !Object.keys(answers).length;\n    const isInitialLoadFromUrl = Object.keys(urlData).length;\n    if (isInitialLoadFromUrl) {\n      const urlQuestions = Object.keys(urlData) as QUESTION_ID[];\n\n      // TODO: dirty hack to assume that first answer is answered if there are others\n      if (\n        urlQuestions.length &&\n        !urlQuestions.includes(QUESTION_ID.bucketName)\n      ) {\n        urlQuestions.push(QUESTION_ID.bucketName);\n      }\n      setAnsweredQuestions(urlQuestions);\n      setAnswers(defaultAnswers);\n    } else if (isFirstRender) {\n      setAnswers(defaultAnswers);\n    }\n  }, [urlData, answeredQuestions]);\n  const renderQuestions = useMemo(\n    () => getQuestionsToRender(answers, answeredQuestions),\n    [answeredQuestions, answers]\n  );\n  const hasAnsweredAll = !renderQuestions.find(\n    (q) => !answeredQuestions.includes(q.id)\n  );\n  const updateAnswer = useCallback(\n    (questionId: QUESTION_ID, answer: Answer) => {\n      setAnswers((prevAnswers) => ({\n        ...prevAnswers,\n        [questionId]: answer,\n      }));\n    },\n    [setAnswers]\n  );\n  const answerQuestion = useCallback(\n    (questionId: QUESTION_ID, answer: Answer) => {\n      updateUrlData({ [String(questionId)]: normalizeAnswer(answer) });\n      updateAnswer(questionId, answer);\n      setAnsweredQuestions((qs) => [...qs, questionId]);\n    },\n    [updateUrlData]\n  );\n  return { answers, renderQuestions, updateAnswer, answerQuestion, hasAnsweredAll };\n};\n\nexport default useQuestions;\n","import useQuestions from '../questions/useQuestions';\nimport { Section } from '../components/utils';\nimport RadioGroup from '../components/forms/RadioGroup';\nimport CheckboxGroup from '../components/forms/CheckboxGroup';\nimport { BOOL_VALUE, QUESTION_ID } from '../enums';\nimport {\n  CheckboxAnswer,\n  DropdownAnswer,\n  RadioAnswer,\n  TextAnswer,\n} from '../types';\nimport TextInput from '../components/forms/TextInput';\nimport DropDown from '../components/forms/Dropdown';\nimport {\n  getForwardingBucketValue,\n  getNormalizedAnswer,\n  hasAnswered,\n} from '../questions/utils';\nimport Infrastructure from './Infrastructure';\n\nconst Questionare = () => {\n  const {\n    answers,\n    renderQuestions,\n    updateAnswer,\n    answerQuestion,\n    hasAnsweredAll,\n  } = useQuestions();\n  return (\n    <Section>\n      {renderQuestions.map((question) => {\n        if (question.type === 'radio') {\n          const answer = answers[question.id] as RadioAnswer;\n          return (\n            <RadioGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'dropdown') {\n          const answer = answers[question.id] as DropdownAnswer;\n          return (\n            <DropDown\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'checkbox') {\n          const answer = answers[question.id] as CheckboxAnswer;\n          return (\n            <CheckboxGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOptions={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'text') {\n          const answer = answers[question.id] as TextAnswer;\n          return (\n            <TextInput\n              id={question.id}\n              key={question.id}\n              value={answer}\n              placeholder={question.placeholder}\n              placeholders={question.placeholders}\n              onChange={value => updateAnswer(question.id, value)}\n              onSubmit={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        throw new Error(`Unexpected question type in ${question}`);\n      })}\n      {hasAnsweredAll && (\n        <Infrastructure\n          webApp={hasAnswered(answers, QUESTION_ID.storageType, 'webapp')}\n          shared={hasAnswered(answers, QUESTION_ID.aclPublic, BOOL_VALUE.TRUE)}\n          staging={hasAnswered(\n            answers,\n            QUESTION_ID.stagingEnv,\n            BOOL_VALUE.TRUE\n          )}\n          staticPage={hasAnswered(\n            answers,\n            QUESTION_ID.webappIsStatic,\n            BOOL_VALUE.TRUE\n          )}\n          createCertificates={\n            hasAnswered(answers, QUESTION_ID.configureDns, BOOL_VALUE.TRUE) ||\n            hasAnswered(\n              answers,\n              QUESTION_ID.createCertificates,\n              BOOL_VALUE.TRUE\n            )\n          }\n          configureDns={hasAnswered(\n            answers,\n            QUESTION_ID.configureDns,\n            BOOL_VALUE.TRUE\n          )}\n          errorPath={getNormalizedAnswer(answers, QUESTION_ID.errorPath)}\n          forwardingBucket={getForwardingBucketValue(answers)}\n          bucketName={getNormalizedAnswer(answers, QUESTION_ID.bucketName)}\n          region={getNormalizedAnswer(answers, QUESTION_ID.region)}\n        />\n      )}\n    </Section>\n  );\n};\n\nexport default Questionare;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAMA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AALA;AAAA;AACA;AADA;AAQA;AACA;AAEA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAGA;AAEA;AACA;AACA;AA5BA;AAAA;AACA;AADA;AAaA;AAbA;AAAA;AACA;AADA;AA6BA;AAAA;AAAA;AACA;AA9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA+BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7GA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAWA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAIA;AAGA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7EA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAKA;AAKA;AAQA;AAKA;AACA;AACA;AACA;AA7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCA;AACA;AACA;;;;A","sourceRoot":""}
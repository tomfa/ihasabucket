{"version":3,"file":"static/webpack/static/development/pages/index.js.7c520e7332044632c4c2.hot-update.js","sources":["webpack:///./enums.ts","webpack:///./questions/data.ts","webpack:///./sections/Questionare.tsx"],"sourcesContent":["/* eslint-disable no-shadow */\n\nexport enum VALUES {\n  NOT_EMPTY,\n}\n\nexport enum QUESTION_ID {\n  createCertificates = 'create-certificates',\n  bucketName = 'bucket',\n  storageType = 'storage',\n  webappIsStatic = 'static',\n  aclPublic = 'acl-public',\n  configureDns = 'configure-dns',\n  stagingEnv = 'staging-env',\n  region = 'region',\n}\n\nexport enum BOOL_VALUE {\n  FALSE = 'false',\n  TRUE = 'true',\n}\n\nexport enum INPUT {\n  BUCKET_NAME = 'bucket_name',\n  AWS_REGION = 'aws_region',\n  AWS_ACCESS_KEY = 'aws_access_key',\n  AWS_SECRET_KEY = 'aws_secret_key',\n  ACL = 'acl',\n  ERROR_RESPONSE_CODE = 'error_response_code',\n  ERROR_RESPONSE_PATH = 'error_response_path',\n}\n\nexport const getInputDescription = (input: INPUT): string => {\n  return {\n    [INPUT.BUCKET_NAME]: 'Name of S3 bucket',\n    [INPUT.AWS_REGION]: 'Region to deploy to, e.g. eu-north-1, us-east-1',\n    [INPUT.AWS_ACCESS_KEY]:\n      'e.g. AKIA... found in your AWS console > Security credentials',\n    [INPUT.AWS_SECRET_KEY]:\n      'e.g. yaAS$1... found in your AWS console > Security credentials',\n    [INPUT.ACL]:\n      'e.g. AKIA... found in your AWS console > Security credentials',\n    [INPUT.ERROR_RESPONSE_CODE]:\n      'e.g. HTTP status code response when no file matching path is found',\n    [INPUT.ERROR_RESPONSE_PATH]:\n      'e.g. Which file Cloudfront serves when encountering a missing file',\n  }[input];\n};\n\nexport enum BUCKET_TYPE {\n  WEBAPP = 'web-app',\n  FILE_STORAGE = 'file-storage',\n}\n\nexport const getOutput = ({\n  bucketType,\n  hasStaging,\n}: {\n  bucketType: BUCKET_TYPE;\n  hasStaging: boolean;\n}): { value: string; label: string }[] => {\n  const outputs = [];\n  const bucketNames = hasStaging\n    ? [`${bucketType}-production`, `${bucketType}-staging`]\n    : [bucketType];\n  bucketNames.forEach((name) => {\n    const stageName = hasStaging && name.split('-')[name.split('-').length - 1];\n    const prefix = stageName ? `${stageName}.` : '';\n    outputs.push({\n      value: `module.${name}.AWS_SECRET_ACCESS_KEY`,\n      label: `${prefix}AWS_SECRET_ACCESS_KEY`,\n    });\n    outputs.push({\n      value: `module.${name}.AWS_ACCESS_KEY_ID`,\n      label: `${prefix}AWS_ACCESS_KEY_ID`,\n    });\n    outputs.push({\n      value: `module.${name}.BUCKET_NAME`,\n      label: `${prefix}BUCKET_NAME`,\n    });\n\n    if (bucketType === BUCKET_TYPE.WEBAPP) {\n      outputs.push({\n        value: `module.${name}.CLOUDFRONT_URL`,\n        label: `${prefix}CLOUDFRONT_URL`,\n      });\n    }\n  });\n  return outputs;\n};\n\nexport enum AWS_REGIONS {\n  US_EAST_2 = 'us-east-2',\n  US_EAST_1 = 'us-east-1',\n  US_WEST_1 = 'us-west-1',\n  US_WEST_2 = 'us-west-2',\n  AF_SOUTH_1 = 'af-south-1',\n  AP_EAST_1 = 'ap-east-1',\n  AP_SOUTH_1 = 'ap-south-1',\n  AP_NORTHEAST_3 = 'ap-northeast-3',\n  AP_NORTHEAST_2 = 'ap-northeast-2',\n  AP_SOUTHEAST_1 = 'ap-southeast-1',\n  AP_SOUTHEAST_2 = 'ap-southeast-2',\n  AP_NORTHEAST_1 = 'ap-northeast-1',\n  CA_CENTRAL_1 = 'ca-central-1',\n  CN_NORTH_1 = 'cn-north-1',\n  CN_NORTHWEST_1 = 'cn-northwest-1',\n  EU_CENTRAL_1 = 'eu-central-1',\n  EU_WEST_1 = 'eu-west-1',\n  EU_WEST_2 = 'eu-west-2',\n  EU_SOUTH_1 = 'eu-south-1',\n  EU_WEST_3 = 'eu-west-3',\n  EU_NORTH_1 = 'eu-north-1',\n  SA_EAST_1 = 'sa-east-1',\n  ME_SOUTH_1 = 'me-south-1',\n}\n","import { AWS_REGIONS, BOOL_VALUE, QUESTION_ID, VALUES } from '../enums';\nimport {\n  DropdownQuestion,\n  InputQuestion,\n  Question,\n  QuestionType,\n  RadioQuestion,\n} from '../types';\n\nexport const questions: Question[] = [\n  {\n    id: QUESTION_ID.bucketName,\n    title: '',\n    type: QuestionType.TEXT,\n    placeholders: [\n      'mydomain.com',\n      'uploads.mydomain.com',\n      'staging.mydomain.com',\n      'www.mydomain.com',\n      'test.mydomain.com',\n      'uploads.mydomain.com',\n    ],\n    description: `We will use this as the S3 bucket name. The bucket name is permanent, but it doesn't have to match an actual domain. It does however have to be unique on S3, so \"example\" or \"my-bucket\" will not work. If you leave it empty, you'll be prompted for a bucket name at deploy time.`,\n  } as InputQuestion,\n  {\n    id: QUESTION_ID.storageType,\n    title: 'What are we storing?',\n    type: QuestionType.RADIO,\n    description:\n      'Unlike normal file storage, web apps like React and Vue have a default path, and error pages.',\n    options: [\n      { value: 'webapp', label: 'A web app' },\n      { value: 'files', label: 'Static files or media uploads' },\n    ],\n  } as RadioQuestion,\n  {\n    id: QUESTION_ID.webappIsStatic,\n    title: 'Is the web app statically generated?',\n    type: QuestionType.RADIO,\n    description:\n      'Statically generated sites can be optimized for search engines by returning correct HTTP status codes. If you are uncertain, select No.',\n    options: [\n      { value: BOOL_VALUE.TRUE, label: 'Yes (e.g. Next, Gatsby, Nuxt)' },\n      { value: BOOL_VALUE.FALSE, label: 'No (e.g. plain Vue or React)' },\n    ],\n    showIf: [{ questionId: QUESTION_ID.storageType, value: 'webapp' }],\n  } as RadioQuestion,\n  {\n    id: QUESTION_ID.aclPublic,\n    title: 'Should content be publicly available?',\n    type: QuestionType.RADIO,\n    description:\n      'If our files hold secret or personal information, we will need a stricter security policy than if we are storing publicly available files, e.g. media files for a CMS.',\n    options: [\n      { value: BOOL_VALUE.TRUE, label: 'Yes, make files public' },\n      {\n        value: BOOL_VALUE.FALSE,\n        label: 'No, let me control access to the files',\n      },\n    ],\n    showIf: [{ questionId: QUESTION_ID.storageType, value: 'files' }],\n  } as RadioQuestion,\n\n  {\n    id: QUESTION_ID.configureDns,\n    title: 'Should AWS set up DNS pointers?',\n    type: QuestionType.RADIO,\n    description:\n      'Should we setup DNS pointers for your domain? (Recommended). Route 53 costs 1.5$ / month',\n    options: [\n      { value: BOOL_VALUE.TRUE, label: 'Yes, please do' },\n      {\n        value: BOOL_VALUE.FALSE,\n        label: `No, I'll set up DNS afterwards`,\n      },\n    ],\n    showIf: [{ questionId: QUESTION_ID.bucketName, value: VALUES.NOT_EMPTY }],\n  } as RadioQuestion,\n  {\n    id: QUESTION_ID.createCertificates,\n    title: 'Should AWS create certificates to support the domain?',\n    type: QuestionType.RADIO,\n    description:\n      'AWS can create HTTPS certificates for us. This is recommended and free of charge.',\n    options: [\n      { value: BOOL_VALUE.TRUE, label: 'Please do' },\n      {\n        value: BOOL_VALUE.FALSE,\n        label: 'No, I`ll configure certificates myself',\n      },\n    ],\n    showIf: [\n      { questionId: QUESTION_ID.bucketName, value: VALUES.NOT_EMPTY },\n      { questionId: QUESTION_ID.configureDns, value: BOOL_VALUE.FALSE },\n    ],\n  } as RadioQuestion,\n  {\n    id: QUESTION_ID.region,\n    title: 'In what region do you want the buckets?',\n    type: QuestionType.DROPDOWN,\n    defaultValue: AWS_REGIONS.EU_NORTH_1,\n    description:\n      'A region closer to your users can give an extra performance boost.',\n    options: Object.values(AWS_REGIONS).map((value) => ({\n      value,\n      label: value,\n    })),\n  } as DropdownQuestion,\n  {\n    id: QUESTION_ID.stagingEnv,\n    title: 'Want a test environment?',\n    type: QuestionType.RADIO,\n    description:\n      \"A staging (or test) environment would mean a duplicate set of buckets. If you're uncertain, select No. You can always create a staging environment later.\",\n    options: [\n      {\n        value: BOOL_VALUE.TRUE,\n        label: 'Yes, please create a separate set of buckets for testing',\n      },\n      { value: BOOL_VALUE.FALSE, label: \"No, I won't need that\" },\n    ],\n  } as RadioQuestion,\n];\n\nexport const questionMap = questions.reduce(\n  (map, question) => ({ ...map, [question.id]: question }),\n  {} as { [id in QUESTION_ID]: Question }\n);\n","import useQuestions from '../questions/useQuestions';\nimport { Section } from '../components/utils';\nimport RadioGroup from '../components/forms/RadioGroup';\nimport CheckboxGroup from '../components/forms/CheckboxGroup';\nimport { BOOL_VALUE, QUESTION_ID } from '../enums';\nimport {\n  CheckboxAnswer,\n  DropdownAnswer,\n  RadioAnswer,\n  TextAnswer,\n} from '../types';\nimport TextInput from '../components/forms/TextInput';\nimport DropDown from '../components/forms/Dropdown';\nimport { getNormalizedAnswer, hasAnswered } from '../questions/utils';\nimport Infrastructure from './Infrastructure';\n\nconst Questionare = () => {\n  const {\n    answers,\n    renderQuestions,\n    answerQuestion,\n    hasAnsweredAll,\n  } = useQuestions();\n  return (\n    <Section>\n      {renderQuestions.map((question) => {\n        if (question.type === 'radio') {\n          const answer = answers[question.id] as RadioAnswer;\n          return (\n            <RadioGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'dropdown') {\n          const answer = answers[question.id] as DropdownAnswer;\n          return (\n            <DropDown\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'checkbox') {\n          const answer = answers[question.id] as CheckboxAnswer;\n          return (\n            <CheckboxGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOptions={answer}\n              onChange={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'text') {\n          const answer = answers[question.id] as TextAnswer;\n          return (\n            <TextInput\n              id={question.id}\n              key={question.id}\n              value={answer}\n              placeholder={question.placeholder}\n              placeholders={question.placeholders}\n              onSubmit={(value) => answerQuestion(question.id, value)}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        throw new Error(`Unexpected question type in ${question}`);\n      })}\n      {hasAnsweredAll && (\n        <Infrastructure\n          webApp={hasAnswered(answers, QUESTION_ID.storageType, 'webapp')}\n          shared={hasAnswered(answers, QUESTION_ID.aclPublic, BOOL_VALUE.TRUE)}\n          staging={hasAnswered(\n            answers,\n            QUESTION_ID.stagingEnv,\n            BOOL_VALUE.TRUE\n          )}\n          staticPage={hasAnswered(\n            answers,\n            QUESTION_ID.webappIsStatic,\n            BOOL_VALUE.TRUE\n          )}\n          bucketName={getNormalizedAnswer(answers, QUESTION_ID.bucketName)}\n          region={getNormalizedAnswer(answers, QUESTION_ID.region)}\n        />\n      )}\n    </Section>\n  );\n};\n\nexport default Questionare;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AAAA;AACA;AAAA;AAcA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AAMA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AC3FA;AACA;AAQA;AAEA;AACA;AACA;AACA;AAQA;AAZA;AAeA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AARA;AAYA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAVA;AAaA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAKA;AAAA;AAAA;AAAA;AAbA;AAiBA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAKA;AAAA;AAAA;AAAA;AAbA;AAgBA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAfA;AAmBA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAFA;AAAA;AAPA;AAaA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAFA;AAIA;AAAA;AAAA;AAXA;AAgBA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7HA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAKA;AAKA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AACA;AACA;;;;A","sourceRoot":""}
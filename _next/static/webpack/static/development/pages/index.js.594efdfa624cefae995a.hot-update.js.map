{"version":3,"file":"static/webpack/static/development/pages/index.js.594efdfa624cefae995a.hot-update.js","sources":["webpack:///./components/Infrastructure/utils.ts"],"sourcesContent":["type Props = {\n  webApp: boolean;\n  staging: boolean;\n  shared: boolean;\n  staticPage: boolean;\n};\n\ntype TerraformPackage = {\n  mainTfContent: string[];\n  description?: string;\n};\n\nconst getMainTfContent = ({\n  webApp,\n  staging,\n  shared,\n  staticPage,\n}: Props): string[] => {\n  const modules = staging ? ['prodbucket', 'stagingbucket'] : ['bucket'];\n  const bucketType = webApp ? 'webapp' : 'files';\n  const count = staging ? 'double' : 'single';\n  const category = getBucketSubCategory({ webApp, shared, staticPage });\n  return `git::https://github.com/tomfa/terraform.git//${bucketType}/${category}/${count}`;\n};\n\nconst getTerraPackageDescription = ({\n  webApp,\n  staging,\n  shared,\n  staticPage,\n}: Props): string => {\n  const count = staging ? 'two sets of' : 'a';\n  const usecase = getUseCaseDescription({ webApp, staticPage, shared });\n  const iamUserInfo = staging\n    ? 'Two sets of AWS keys will be created that are able to upload to the buckets. One for test and one for production environment'\n    : 'A set of AWS keys will be created that is able to upload to the bucket';\n  return `Once run, it will create ${count} S3 bucket + Cloudfront, configured ${usecase}. ${iamUserInfo}.`;\n};\n\nconst getBucketSubCategory = ({\n  webApp,\n  staticPage,\n  shared,\n}: {\n  webApp: boolean;\n  shared: boolean;\n  staticPage: boolean;\n}): string => {\n  if (webApp) {\n    if (staticPage) {\n      return 'static';\n    }\n    return 'singlepage';\n  }\n  if (shared) {\n    return 'public';\n  }\n  return 'private';\n};\n\nconst getUseCaseDescription = ({\n  webApp,\n  staticPage,\n  shared,\n}: {\n  webApp: boolean;\n  shared: boolean;\n  staticPage: boolean;\n}): string => {\n  if (webApp) {\n    if (staticPage) {\n      return 'to serve a solid statically generated web app';\n    }\n    return 'to serve a blazingly fast single-page web app';\n  }\n  if (shared) {\n    return 'for hosting publicly available files';\n  }\n  return 'for storing and serving files for authorized requests';\n};\n\nexport const getTerraFormPackage = (props: Props): TerraformPackage => {\n  return {\n    mainTfContent: getMainTfContent(props),\n    description: getTerraPackageDescription(props),\n  };\n};\n"],"mappings":";;;;;;;;;;AAYA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;A","sourceRoot":""}
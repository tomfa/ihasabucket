{"version":3,"file":"static/webpack/static/development/pages/index.js.23fc9c53ebbad533c5bb.hot-update.js","sources":["webpack:///./components/Infrastructure/index.tsx","webpack:///./components/Infrastructure/utils.ts","webpack:///./components/forms/TextInput.tsx","webpack:///./pages/index.tsx","webpack:///./utils/questionData.ts","webpack:///./utils/questions.ts"],"sourcesContent":["/* eslint-disable react/no-array-index-key */\n\nimport { useEffect, useState } from 'react';\nimport Description from '../forms/Description.style';\nimport Header from '../Header.style';\nimport { getTerraFormPackage } from './utils';\nimport Pre from './Pre.style';\nimport List from './List.style';\nimport ListItem from './ListItem.style';\nimport Mute from './Mute.style';\nimport LoadingIcon from './LoadingIcon';\n\ntype Props = {\n  webApp: boolean;\n  staging: boolean;\n  shared: boolean;\n  staticPage: boolean;\n};\n\nconst Infrastructure = (props: Props) => {\n  const { description, mainTfContent } = getTerraFormPackage(props);\n  const [loading, setLoading] = useState<boolean>(true);\n  useEffect(() => {\n    setTimeout(() => setLoading(false), 800);\n  }, [mainTfContent]);\n  if (loading) {\n    return <LoadingIcon />;\n  }\n  return (\n    <>\n      <Header as={'h1'}>Bucket is served!</Header>\n      Just run the script below!\n      <Pre>\n        <Mute># Create a folder to store infrastructure code</Mute>\n        {'\\n'}\n        mkdir infrastructure{'\\n'}\n        cd infrastructure{'\\n'}\n        {'\\n'}\n        <Mute># Create config file</Mute>\n        {'\\n'}\n        cat &lt;&lt;EOT &gt;&gt; main.tf{'\\n'}\n        {mainTfContent.map((line, i) => (\n          <span key={i}>\n            {line}\n            {'\\n'}\n          </span>\n        ))}\n        EOT{'\\n'}\n        {'\\n'}\n        <Mute># Deploy</Mute>\n        {'\\n'}\n        terraform init{'\\n'}\n        terraform apply{'\\n'}\n      </Pre>\n      <Description>\n        The script above ask you for desired bucket name and AWS region.\n      </Description>\n      <Description>{description}</Description>\n      <h4>Prerequisites</h4>\n      <List>\n        <ListItem>\n          If you don&apos;t have an AWS account already, sign up at{' '}\n          <a href=\"https://portal.aws.amazon.com/billing/signup#/start\">\n            aws.amazon.com\n          </a>\n        </ListItem>\n        <ListItem>\n          If you don&apos;t have your <strong>AWS_SECRET_ACCESS_KEY</strong> and{' '}\n          <strong>AWS_ACCESS_KEY_ID</strong> handy, find those in the top right\n          corner under your name &gt; Security credentials. They should be\n          exported to your environment:\n          <Pre>\n            <Mute># Export AWS keys{'\\n'}</Mute>\n            export AWS_SECRET_ACCESS_KEY=yaAS$1...{'\\n'}\n            export AWS_ACCESS_KEY_ID=AKIA...\n          </Pre>\n        </ListItem>\n        <ListItem>\n          If you haven&apos;t already,{' '}\n          <a href=\"https://learn.hashicorp.com/tutorials/terraform/install-cli\">\n            install Terraform\n          </a>\n          {`\\n`}\n          <Pre>\n            <Mute># For Macs with homebrew{'\\n'}</Mute>\n            brew install hashicorp/tap/terraform\n          </Pre>\n          <Description>\n            See{' '}\n            <a href=\"https://learn.hashicorp.com/tutorials/terraform/install-cli\">\n              learn.hashicorp.com/tutorials/terraform/install-cli\n            </a>{' '}\n            for other platforms.\n          </Description>\n        </ListItem>\n      </List>\n    </>\n  );\n};\n\nexport default Infrastructure;\n","import {\n  BUCKET_TYPE,\n  getInputDescription,\n  getOutput,\n  INPUT,\n} from '../../enums';\n\ntype Props = {\n  webApp: boolean;\n  staging: boolean;\n  shared: boolean;\n  staticPage: boolean;\n};\n\ntype TerraformPackage = {\n  mainTfContent: string[];\n  description?: string;\n};\n\nconst getMainTfContent = ({\n  webApp,\n  staging,\n  shared,\n  staticPage,\n}: Props): string[] => {\n  const source = webApp\n    ? 'git::https://github.com/tomfa/terraform.git//webapp'\n    : 'git::https://github.com/tomfa/terraform.git//files';\n\n  const parameters: { [param: string]: string } = {\n    bucket_name: `var.${INPUT.BUCKET_NAME}`,\n    aws_region: `var.${INPUT.AWS_REGION}`,\n  };\n  if (webApp) {\n    parameters.error_path = '\"/index.html\"';\n    parameters.error_code = staticPage ? '404' : '200';\n  } else {\n    parameters.acl = shared ? '\"public-read\"' : '\"private\"';\n  }\n\n  const genericBucketName = webApp ? 'web-app' : 'file-storage';\n  const modules = staging\n    ? [\n        {\n          name: `${genericBucketName}-production`,\n          parameters,\n        },\n        {\n          name: `${genericBucketName}-staging`,\n          parameters: {\n            ...parameters,\n            bucket_name: `\"\\\\$\\{var.bucket_name}.staging\"`,\n          },\n        },\n      ]\n    : [{ name: genericBucketName, parameters }];\n\n  const lines: string[] = [];\n  const isUsed = (inputVariable: string): boolean =>\n    !!modules.find(\n      (m) =>\n        !!Object.values(m.parameters).find((p) =>\n          p.includes(`var.${inputVariable}`)\n        )\n    );\n  Object.values(INPUT)\n    .filter(isUsed)\n    .forEach((input: INPUT) => {\n      const description = getInputDescription(input);\n      if (!description) {\n        lines.push(`variable \"${input}\" {}`);\n      } else {\n        lines.push(`variable \"${input}\" {`);\n        lines.push(`  description = \"${description}\"`);\n        lines.push(`}`);\n      }\n    });\n  modules.forEach((module) => {\n    lines.push('');\n    lines.push(`module \"${module.name}\" {`);\n    lines.push(`  source = \"${source}\"`);\n    Object.entries(module.parameters).forEach(([key, value]) => {\n      lines.push(`  ${key} = ${value}`);\n    });\n    lines.push(`}`);\n  });\n  lines.push('');\n  getOutput({\n    bucketType: webApp ? BUCKET_TYPE.WEBAPP : BUCKET_TYPE.FILE_STORAGE,\n    hasStaging: staging,\n  }).forEach((output) => {\n    lines.push(`output \"${output.label}\" {`);\n    lines.push(`  value = ${output.value}`);\n    lines.push('}');\n  });\n  return lines;\n};\n\nconst getTerraPackageDescription = ({\n  webApp,\n  staging,\n  shared,\n  staticPage,\n}: Props): string => {\n  const count = staging ? 'two sets of' : 'a';\n  const usecase = getUseCaseDescription({ webApp, staticPage, shared });\n  const iamUserInfo = staging\n    ? 'Two sets of AWS keys will be created that are able to upload to the buckets. One for test and one for production environment'\n    : 'A set of AWS keys will be created that is able to upload to the bucket';\n  return `Once run, it will create ${count} S3 bucket${\n    webApp ? ' + Cloudfront' : ''\n  }, configured ${usecase}. ${iamUserInfo}. Generated keys will be shown as output in the terminal.`;\n};\n\nconst getUseCaseDescription = ({\n  webApp,\n  staticPage,\n  shared,\n}: {\n  webApp: boolean;\n  shared: boolean;\n  staticPage: boolean;\n}): string => {\n  if (webApp) {\n    if (staticPage) {\n      return 'to serve a solid statically generated web app';\n    }\n    return 'to serve a blazingly fast single-page web app';\n  }\n  if (shared) {\n    return 'for hosting publicly available files';\n  }\n  return 'for storing and serving files for authorized requests';\n};\n\nexport const getTerraFormPackage = (props: Props): TerraformPackage => {\n  return {\n    mainTfContent: getMainTfContent(props),\n    description: getTerraPackageDescription(props),\n  };\n};\n","import { useState } from 'react';\n\nimport Header from '../Header.style';\nimport Description from './Description.style';\nimport Question from './Question.style';\nimport Input from './Input.style';\nimport InputContainer from './InputContainer.styles';\nimport SubmitButton from './SubmitButton.styles';\n\ninterface Props {\n  id: string;\n  value?: string;\n  onSubmit: (selected: string) => void;\n  title: string;\n  placeholder?: string;\n  description?: string;\n  disabled?: boolean;\n}\n\nconst TextInput = ({\n  onSubmit,\n  value = '',\n  title,\n  placeholder,\n  description,\n}: Props) => {\n  const [inputValue, setInputValue] = useState<string>(value);\n  return (\n    <Question>\n      {title && <Header>{title}</Header>}\n      <InputContainer>\n        <Input\n          type=\"text\"\n          value={inputValue}\n          placeholder={placeholder}\n          onChange={(e) => setInputValue(e.target.value)}\n          onKeyPress={(e) => e.key === 'Enter' && onSubmit(inputValue)}\n        />\n        <SubmitButton\n          type=\"submit\"\n          complete={inputValue.trim().length > 0}\n          onClick={() => onSubmit(inputValue)}\n        />\n      </InputContainer>\n      {description && <Description>{description}</Description>}\n    </Question>\n  );\n};\n\nexport default TextInput;\n","import { useCallback, useState } from 'react';\nimport { Colored, PageWrapper, Section } from '../components/utils';\nimport Header from '../components/HeaderSection';\nimport BlockQuote from '../components/BlockQuote';\nimport RadioGroup from '../components/forms/RadioGroup';\nimport CheckboxGroup from '../components/forms/CheckboxGroup';\nimport {\n  CheckboxSelectionMap,\n  generateDefaultCheckboxSelectedOptions,\n  generateDefaultRadioSelectedOptions,\n  questions,\n  RadioSelectionMap,\n  TextAnswerMap,\n} from '../utils/questions';\nimport Infrastructure from '../components/Infrastructure';\nimport { BOOL_VALUE, QUESTION_ID, VALUES } from '../enums';\nimport Footer from '../components/Footer';\nimport { Question } from '../types';\nimport TextInput from '../components/forms/TextInput';\nimport DropDown from '../components/forms/Dropdown';\n\nexport default function Home() {\n  return (\n    <PageWrapper>\n      <Header />\n      <Intro />\n      <Questionare />\n      <Footer />\n    </PageWrapper>\n  );\n}\n\nconst Intro = () => (\n  <Section>\n    <BlockQuote\n      author={'Lolrus, the bucket walrus'}\n      source={'At the launch of AWS S3 in 2006'}>\n      <>\n        Hosting a<Colored> webapp </Colored>\n        or need to store uploads? Put them in S3 buckets. It&apos;s\n        <Colored> cheap </Colored>\n        and\n        <Colored> reliable</Colored>. With CloudFront cache, it&apos;ll be\n        blazingly <Colored>fast</Colored>. Let&apos;s see how\n        <Colored> easy </Colored>\n        it can be.\n      </>\n    </BlockQuote>\n  </Section>\n);\n\nconst Questionare = () => {\n  const [selectedRadioOptions, setSelectedRadioOptions] = useState<\n    RadioSelectionMap\n  >(generateDefaultRadioSelectedOptions(questions));\n  const [selectedCheckboxOptions, setSelectedCheckboxOptions] = useState<\n    CheckboxSelectionMap\n  >(generateDefaultCheckboxSelectedOptions(questions));\n  const [textAnswers, setTextAnswers] = useState<TextAnswerMap>({});\n  const [questionRenderCount, setQuestionRenderCount] = useState<number>(0);\n  const hasSelected = useCallback(\n    (questionId: QUESTION_ID, value: string | VALUES): boolean => {\n      if (value === VALUES.NOT_EMPTY) {\n        return hasAnswered(questionId);\n      }\n      const question = questions.find((q) => q.id === questionId);\n      if (!question) {\n        throw Error(`Missing question for ${questionId}`);\n      }\n      if (question.type === 'text') {\n        return textAnswers[questionId] && textAnswers[questionId] === value;\n      }\n      if (!question.options.filter((o) => o.value === value)) {\n        throw Error(`Question ${questionId} does not have option ${value}`);\n      }\n      if (question.type === 'radio' || question.type === 'dropdown') {\n        return selectedRadioOptions[question.id]?.value === value;\n      }\n      if (question.type === 'checkbox') {\n        return !!selectedCheckboxOptions[question.id].find(\n          (o) => o.value === value\n        );\n      }\n    },\n    [selectedRadioOptions, selectedCheckboxOptions, questions]\n  );\n  const hasAnswered = useCallback(\n    (questionId: QUESTION_ID): boolean => {\n      const question = questions.find((q) => q.id === questionId);\n      if (!question) {\n        throw Error(`Missing question for ${questionId}`);\n      }\n      if (question.type === 'radio' || question.type === 'dropdown') {\n        return selectedRadioOptions[question.id]?.value != null;\n      }\n      if (question.type === 'checkbox') {\n        return selectedCheckboxOptions[question.id].length > 0;\n      }\n      if (question.type === 'text') {\n        return Object.keys(textAnswers).includes(questionId);\n      }\n    },\n    [selectedRadioOptions, selectedCheckboxOptions, questions]\n  );\n  const shouldSkip = useCallback(\n    (question: Question): boolean =>\n      question.showIf &&\n      !!question.showIf.find((c) => !hasSelected(c.questionId, c.value)),\n    [hasSelected]\n  );\n  const hasAnsweredAll = !questions.find(\n    (q) => !hasAnswered(q.id) && !shouldSkip(q)\n  );\n  return (\n    <Section>\n      {questions.slice(0, questionRenderCount + 1).map((question) => {\n        const indexOfAllQuestions = questions.indexOf(question);\n        const isLast = indexOfAllQuestions === questionRenderCount;\n        if (shouldSkip(question)) {\n          if (isLast) {\n            setQuestionRenderCount((q) => q + 1);\n          }\n          return null;\n        }\n        if (question.type === 'radio') {\n          const answerValue = selectedRadioOptions[question.id] || null;\n          return (\n            <RadioGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answerValue}\n              onChange={(value) => {\n                setQuestionRenderCount((c) =>\n                  Math.max(c, indexOfAllQuestions + 1)\n                );\n                setSelectedRadioOptions((prev) => ({\n                  ...prev,\n                  [question.id]: value,\n                }));\n              }}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'checkbox') {\n          return (\n            <CheckboxGroup\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOptions={selectedCheckboxOptions[question.id] || []}\n              onChange={(value) => {\n                setQuestionRenderCount((c) =>\n                  Math.max(c, indexOfAllQuestions + 1)\n                );\n                setSelectedCheckboxOptions((prev) => ({\n                  ...prev,\n                  [question.id]: value,\n                }));\n              }}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'text') {\n          return (\n            <TextInput\n              id={question.id}\n              key={question.id}\n              placeholder={question.placeholder}\n              onSubmit={(value) => {\n                setTextAnswers((prev) => ({\n                  ...prev,\n                  [question.id]: value,\n                }));\n                setQuestionRenderCount((c) =>\n                  Math.max(c, indexOfAllQuestions + 1)\n                );\n              }}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        if (question.type === 'dropdown') {\n          const answerValue = selectedRadioOptions[question.id] || null;\n          return (\n            <DropDown\n              id={question.id}\n              key={question.id}\n              options={question.options}\n              selectedOption={answerValue}\n              onChange={(value) => {\n                setSelectedRadioOptions((prev) => ({\n                  ...prev,\n                  [question.id]: value,\n                }));\n                setQuestionRenderCount((c) =>\n                  Math.max(c, indexOfAllQuestions + 1)\n                );\n              }}\n              title={question.title}\n              description={question.description}\n            />\n          );\n        }\n        throw new Error(`Unexpected question type ${question.type}`);\n      })}\n      {hasAnsweredAll && (\n        <Infrastructure\n          webApp={hasSelected(QUESTION_ID.storageType, 'webapp')}\n          shared={hasSelected(QUESTION_ID.aclPublic, BOOL_VALUE.TRUE)}\n          staging={hasSelected(QUESTION_ID.stagingEnv, BOOL_VALUE.TRUE)}\n          staticPage={hasSelected(QUESTION_ID.webappIsStatic, BOOL_VALUE.TRUE)}\n        />\n      )}\n    </Section>\n  );\n};\n","import { Question } from '../types';\nimport { QUESTION_ID, BOOL_VALUE, VALUES, AWS_REGIONS } from '../enums';\n\nconst questionData: Question[] = [\n  {\n    id: QUESTION_ID.domainName,\n    title: `What's our domain?`,\n    type: 'text',\n    placeholder: 'mydomain.store',\n    description: `We will use this as the S3 bucket name. The bucket name is permanent, but it doesn't have to match an actual domain. It does however have to be unique on S3, so \"example\" or \"my-bucket\" will not work.`,\n  },\n  {\n    id: QUESTION_ID.storageType,\n    title: 'What are we storing?',\n    type: 'radio',\n    description:\n      'Unlike normal file storage, webapps like React and Vue have a default path, and error pages.',\n    options: [\n      { value: 'webapp', label: 'A webapp' },\n      { value: 'files', label: 'Static files or media uploads' },\n    ],\n  },\n  {\n    id: QUESTION_ID.webappIsStatic,\n    title: 'Is the web app statically generated?',\n    type: 'radio',\n    description:\n      'Statically generated sites can be optimized for search engines by returning correct HTTP status codes. If you are uncertain, select No.',\n    options: [\n      { value: BOOL_VALUE.TRUE, label: 'Yes (e.g. Next, Gatsby, Nuxt)' },\n      { value: BOOL_VALUE.FALSE, label: 'No (e.g. plain Vue or React)' },\n    ],\n    showIf: [{ questionId: QUESTION_ID.storageType, value: 'webapp' }],\n  },\n  {\n    id: QUESTION_ID.aclPublic,\n    title: 'Should content be publicly available?',\n    type: 'radio',\n    description:\n      'If our files hold secret or personal information, we will need a stricter security policy than if we are storing publicly available files, e.g. media files for a CMS.',\n    options: [\n      { value: BOOL_VALUE.TRUE, label: 'Yes, make files public' },\n      {\n        value: BOOL_VALUE.FALSE,\n        label: 'No, let me control access to the files',\n      },\n    ],\n    showIf: [{ questionId: QUESTION_ID.storageType, value: 'files' }],\n  },\n\n  {\n    id: QUESTION_ID.configureDns,\n    title: 'Should AWS set up DNS pointers?',\n    type: 'radio',\n    description:\n      'Should we setup DNS pointers for your domain? (Recommended). Route 53 costs 1.5$ / month',\n    options: [\n      { value: BOOL_VALUE.TRUE, label: 'Yes, please do' },\n      {\n        value: BOOL_VALUE.FALSE,\n        label: `No, I'll '`,\n      },\n    ],\n    showIf: [{ questionId: QUESTION_ID.domainName, value: VALUES.NOT_EMPTY }],\n  },\n  {\n    id: QUESTION_ID.createCertificates,\n    title: 'Should AWS create certificates to support the domain?',\n    type: 'radio',\n    description:\n      'AWS can create HTTPS certificates for us. This is recommended and free of charge.',\n    options: [\n      { value: BOOL_VALUE.TRUE, label: 'Please do' },\n      {\n        value: BOOL_VALUE.FALSE,\n        label: 'No, I`ll configure certificates myself',\n      },\n    ],\n    showIf: [\n      { questionId: QUESTION_ID.domainName, value: VALUES.NOT_EMPTY },\n      { questionId: QUESTION_ID.configureDns, value: BOOL_VALUE.FALSE },\n    ],\n  },\n  {\n    id: QUESTION_ID.region,\n    title: 'In what region do you want to host the buckets?',\n    type: 'dropdown',\n    defaultValue: AWS_REGIONS.EU_NORTH_1,\n    description:\n      'A region closer to your users can give an extra performance boost.',\n    options: Object.entries(AWS_REGIONS).map(([value, label]) => ({\n      value,\n      label,\n    })),\n  },\n  {\n    id: QUESTION_ID.stagingEnv,\n    title: 'Want a test environment?',\n    type: 'radio',\n    description:\n      \"A staging (or test) environment would mean a duplicate set of buckets. If you're uncertain, select No. You can always create a staging environment later.\",\n    options: [\n      {\n        value: BOOL_VALUE.TRUE,\n        label: 'Yes, please create a separate set of buckets for testing',\n      },\n      { value: BOOL_VALUE.FALSE, label: \"No, I won't need that\" },\n    ],\n  },\n];\n\nexport default questionData;\n","import { Option, Question } from '../types';\nimport { QUESTION_ID } from '../enums';\nimport questionData from './questionData';\n\nexport const generateDefaultRadioSelectedOptions = (\n  radioQuestions: Question[]\n): RadioSelectionMap =>\n  radioQuestions\n    .filter((q) => q.type === 'radio' || q.type === 'dropdown')\n    .reduce(\n      (map, question) => ({\n        ...map,\n        [question.id]: getDefaultRadioOption(question),\n      }),\n      {}\n    );\n\nexport const generateDefaultCheckboxSelectedOptions = (\n  checkboxQuestions: Question[]\n): CheckboxSelectionMap =>\n  checkboxQuestions\n    .filter((q) => q.type === 'checkbox')\n    .reduce(\n      (map, question) => ({\n        ...map,\n        [question.id]: getDefaultCheckboxOption(question),\n      }),\n      {}\n    );\n\nexport const getDefaultRadioOption = (question: Question): Option | null => {\n  if (question.type === 'text') {\n    return null;\n  }\n  return (\n    question.options.find((o) => o?.value === question.defaultValue) || null\n  );\n};\n\nexport const getDefaultCheckboxOption = (question: Question): Option[] => {\n  if (question.type === 'text' || !question.defaultValue) {\n    return [];\n  }\n  if (typeof question.defaultValue === 'string') {\n    return question.options.filter((o) => o.value === question.defaultValue);\n  }\n  if (question.defaultValue instanceof Array) {\n    return question.options.filter((o) =>\n      (question.defaultValue as (string | number)[]).includes(o.value)\n    );\n  }\n  return [];\n};\n\nexport type RadioSelectionMap = Partial<\n  {\n    [questionId in QUESTION_ID]: Option | null;\n  }\n>;\nexport type CheckboxSelectionMap = Partial<\n  {\n    [questionId in QUESTION_ID]: Option[];\n  }\n>;\nexport type TextAnswerMap = Partial<\n  {\n    [questionId in QUESTION_ID]: string | null;\n  }\n>;\n\nexport const questions = questionData;\n"],"mappings":"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","sourceRoot":""}
{"version":3,"file":"static/webpack/static/development/pages/index.js.84eb31efe67ef4159774.hot-update.js","sources":["webpack:///./components/Infrastructure/LoadingIcon.tsx","webpack:///./components/Infrastructure/index.tsx","webpack:///./components/Infrastructure/utils.ts"],"sourcesContent":["import styled from 'styled-components';\n\nconst Svg = styled.svg`\n  margin: 5rem auto;\n  display: block;\n  shape-rendering: auto;\n\n  & path {\n    fill: ${(p) => p.theme.colors.primary};\n  }\n`;\n\nconst LoadingIcon = ({ size = 300 }: { size?: number }) => (\n  <Svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={`${size}px`}\n    height={`${size}px`}\n    viewBox=\"0 0 100 100\"\n    preserveAspectRatio=\"xMidYMid\">\n    <g transform=\"translate(50 50)\">\n      <g>\n        <animateTransform\n          attributeName=\"transform\"\n          type=\"rotate\"\n          values=\"0;45\"\n          keyTimes=\"0;1\"\n          dur=\"0.2s\"\n          repeatCount=\"indefinite\"\n        />\n        <path d=\"M29.491524206117255 -5.5 L37.491524206117255 -5.5 L37.491524206117255 5.5 L29.491524206117255 5.5 A30 30 0 0 1 24.742744050198738 16.964569457146712 L24.742744050198738 16.964569457146712 L30.399598299691117 22.621423706639092 L22.621423706639096 30.399598299691114 L16.964569457146716 24.742744050198734 A30 30 0 0 1 5.5 29.491524206117255 L5.5 29.491524206117255 L5.5 37.491524206117255 L-5.499999999999997 37.491524206117255 L-5.499999999999997 29.491524206117255 A30 30 0 0 1 -16.964569457146705 24.742744050198738 L-16.964569457146705 24.742744050198738 L-22.621423706639085 30.399598299691117 L-30.399598299691117 22.621423706639092 L-24.742744050198738 16.964569457146712 A30 30 0 0 1 -29.491524206117255 5.500000000000009 L-29.491524206117255 5.500000000000009 L-37.491524206117255 5.50000000000001 L-37.491524206117255 -5.500000000000001 L-29.491524206117255 -5.500000000000002 A30 30 0 0 1 -24.742744050198738 -16.964569457146705 L-24.742744050198738 -16.964569457146705 L-30.399598299691117 -22.621423706639085 L-22.621423706639092 -30.399598299691117 L-16.964569457146712 -24.742744050198738 A30 30 0 0 1 -5.500000000000011 -29.491524206117255 L-5.500000000000011 -29.491524206117255 L-5.500000000000012 -37.491524206117255 L5.499999999999998 -37.491524206117255 L5.5 -29.491524206117255 A30 30 0 0 1 16.964569457146702 -24.74274405019874 L16.964569457146702 -24.74274405019874 L22.62142370663908 -30.39959829969112 L30.399598299691117 -22.6214237066391 L24.742744050198738 -16.964569457146716 A30 30 0 0 1 29.491524206117255 -5.500000000000013 M0 -20A20 20 0 1 0 0 20 A20 20 0 1 0 0 -20\" />\n      </g>\n    </g>\n  </Svg>\n);\n\nexport default LoadingIcon;\n","import { useEffect, useState } from 'react';\nimport Description from '../forms/Description.style';\nimport Header from '../Header.style';\nimport { getTerraFormPackage } from './utils';\nimport Pre from './Pre.style';\nimport List from './List.style';\nimport ListItem from './ListItem.style';\nimport Mute from './Mute.style';\nimport LoadingIcon from './LoadingIcon';\n\ntype Props = {\n  webApp: boolean;\n  staging: boolean;\n  shared: boolean;\n  staticPage: boolean;\n};\n\nconst Infrastructure = (props: Props) => {\n  const { url, description } = getTerraFormPackage(props);\n  const [loading, setLoading] = useState<boolean>(true);\n  useEffect(() => {\n    setLoading(true);\n    setTimeout(() => setLoading(false), 800);\n  }, [url]);\n  if (loading) {\n    return <LoadingIcon />;\n  }\n  return (\n    <>\n      <Header as={'h1'}>Bucket is served!</Header>\n      Just run the script below!\n      <Pre>\n        mkdir infrastructure{'\\n'}\n        cd infrastructure{'\\n'}\n        cat &lt;&lt;EOT &gt;&gt; main.tf{'\\n'}\n        module &quot;main&quot; &#123;{'\\n'}\n        &nbsp;&nbsp;source = &quot;{url}&quot;{'\\n'}\n        &nbsp;&nbsp;bucket_name = var.bucket_name &nbsp;&nbsp;aws_region =\n        var.aws_region &#125;{'\\n'}\n        EOT{'\\n'}\n        terraform init{'\\n'}\n        terraform apply{'\\n'}\n      </Pre>\n      <Description>\n        The script above ask you for desired bucket name and AWS region.\n      </Description>\n      <Description>{description}</Description>\n      <h4>Prerequisites</h4>\n      <List>\n        <ListItem>\n          If you don&apos;t have an AWS account already, sign up at{' '}\n          <a href=\"https://portal.aws.amazon.com/billing/signup#/start\">\n            aws.amazon.com\n          </a>\n        </ListItem>\n        <ListItem>\n          If you don&apos;t have your <strong>AWS_SECRET_ACCESS_KEY</strong> and{' '}\n          <strong>AWS_ACCESS_KEY_ID</strong> handy, find those in the top right\n          corner under your name &gt; Security credentials. They should be\n          exported to your environment:\n          <Pre>\n            <Mute># Export AWS keys{'\\n'}</Mute>\n            export AWS_SECRET_ACCESS_KEY=yaAS$1...{'\\n'}\n            export AWS_ACCESS_KEY_ID=AKIA...\n          </Pre>\n        </ListItem>\n        <ListItem>\n          If you haven&apos;t already,{' '}\n          <a href=\"https://learn.hashicorp.com/tutorials/terraform/install-cli\">\n            install Terraform\n          </a>\n          {`\\n`}\n          <Pre>\n            <Mute># For Macs with homebrew{'\\n'}</Mute>\n            brew install hashicorp/tap/terraform\n          </Pre>\n          <Description>\n            See{' '}\n            <a href=\"https://learn.hashicorp.com/tutorials/terraform/install-cli\">\n              learn.hashicorp.com/tutorials/terraform/install-cli\n            </a>{' '}\n            for other platforms.\n          </Description>\n        </ListItem>\n      </List>\n    </>\n  );\n};\n\nexport default Infrastructure;\n","type Props = {\n  webApp: boolean;\n  staging: boolean;\n  shared: boolean;\n  staticPage: boolean;\n};\n\ntype TerraformPackage = {\n  url: string;\n  description?: string;\n};\n\nconst getTerraPackageUrl = ({\n  webApp,\n  staging,\n  shared,\n  staticPage,\n}: Props): string => {\n  const bucketType = webApp ? 'webapp' : 'files';\n  const count = staging ? 'double' : 'single';\n  const category = getBucketSubCategory({ webApp, shared, staticPage });\n  return `git::https://github.com/tomfa/terraform.git//${bucketType}/${category}/${count}`;\n};\n\nconst getTerraPackageDescription = ({\n  webApp,\n  staging,\n  shared,\n  staticPage,\n}: Props): string => {\n  const count = staging ? 'two sets of' : 'a';\n  const usecase = getUseCaseDescription({ webApp, staticPage, shared });\n  const iamUserInfo = staging\n    ? 'Two sets of AWS keys will be created that are able to upload to the buckets. One for test and one for production environment'\n    : 'A set of AWS keys will be created that is able to upload to the bucket';\n  return `Once run, it will create ${count} S3 bucket + Cloudfront, configured ${usecase}. ${iamUserInfo}.`;\n};\n\nconst getBucketSubCategory = ({\n  webApp,\n  staticPage,\n  shared,\n}: {\n  webApp: boolean;\n  shared: boolean;\n  staticPage: boolean;\n}): string => {\n  if (webApp) {\n    if (staticPage) {\n      return 'static';\n    }\n    return 'singlepage';\n  }\n  if (shared) {\n    return 'public';\n  }\n  return 'private';\n};\n\nconst getUseCaseDescription = ({\n  webApp,\n  staticPage,\n  shared,\n}: {\n  webApp: boolean;\n  shared: boolean;\n  staticPage: boolean;\n}): string => {\n  if (webApp) {\n    if (staticPage) {\n      return 'to serve a solid statically generated web app';\n    }\n    return 'to serve a blazingly fast single-page web app';\n  }\n  if (shared) {\n    return 'for hosting publicly available files';\n  }\n  return 'for storing and serving files for authorized requests';\n};\n\nexport const getTerraFormPackage = (props: Props): TerraformPackage => {\n  return {\n    url: getTerraPackageUrl(props),\n    description: getTerraPackageDescription(props),\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AACA;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;;;;;;;;;;;;AC7EA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;;;;;A","sourceRoot":""}
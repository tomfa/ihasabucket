{"version":3,"file":"static/webpack/static/development/pages/index.js.38015d61a08ce3236474.hot-update.js","sources":["webpack:///./components/Infrastructure/utils.ts","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///./node_modules/@babel/runtime/helpers/esm/slicedToArray.js"],"sourcesContent":["type Props = {\n  webApp: boolean;\n  staging: boolean;\n  shared: boolean;\n  staticPage: boolean;\n};\n\ntype TerraformPackage = {\n  mainTfContent: string[];\n  description?: string;\n};\n\nconst getMainTfContent = ({\n  webApp,\n  staging,\n  shared,\n  staticPage,\n}: Props): string[] => {\n  const source = webApp ? 'git::https://github.com/tomfa/terraform-sandbox.git//s3-webfiles-with-cloudfront' : 's3-privatefiles-with-cloudfront';\n  const modules = staging ? ['prodbucket', 'stagingbucket'] : ['bucket'];\n  const variables = {'var.bucket_name': 'var.bucket_name', 'var.aws_region': 'var.aws_region', 'var.aws_access_key': 'var.aws_access_key', 'var.aws_secret_key': 'var.aws_secret_key'}\n  // TODO: Remove aws_secret_key and access_key\n  // TODO: Add options for differentiating between static and shared\n\n  const lines: string[] = [];\n  modules.forEach(moduleName => {\n    lines.push(`module \"${moduleName}\" {`);\n    lines.push(`  source = \"${source}\"`)\n    Object.entries(variables).forEach(([key, value]) => {\n      lines.push(`  `)\n    })\n  })\n  return `git::https://github.com/tomfa/terraform.git//${bucketType}/${category}/${count}`;\n};\n\nconst getTerraPackageDescription = ({\n  webApp,\n  staging,\n  shared,\n  staticPage,\n}: Props): string => {\n  const count = staging ? 'two sets of' : 'a';\n  const usecase = getUseCaseDescription({ webApp, staticPage, shared });\n  const iamUserInfo = staging\n    ? 'Two sets of AWS keys will be created that are able to upload to the buckets. One for test and one for production environment'\n    : 'A set of AWS keys will be created that is able to upload to the bucket';\n  return `Once run, it will create ${count} S3 bucket + Cloudfront, configured ${usecase}. ${iamUserInfo}.`;\n};\n\nconst getBucketSubCategory = ({\n  webApp,\n  staticPage,\n  shared,\n}: {\n  webApp: boolean;\n  shared: boolean;\n  staticPage: boolean;\n}): string => {\n  if (webApp) {\n    if (staticPage) {\n      return 'static';\n    }\n    return 'singlepage';\n  }\n  if (shared) {\n    return 'public';\n  }\n  return 'private';\n};\n\nconst getUseCaseDescription = ({\n  webApp,\n  staticPage,\n  shared,\n}: {\n  webApp: boolean;\n  shared: boolean;\n  staticPage: boolean;\n}): string => {\n  if (webApp) {\n    if (staticPage) {\n      return 'to serve a solid statically generated web app';\n    }\n    return 'to serve a blazingly fast single-page web app';\n  }\n  if (shared) {\n    return 'for hosting publicly available files';\n  }\n  return 'for storing and serving files for authorized requests';\n};\n\nexport const getTerraFormPackage = (props: Props): TerraformPackage => {\n  return {\n    mainTfContent: getMainTfContent(props),\n    description: getTerraPackageDescription(props),\n  };\n};\n","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}"],"mappings":";;;;;;;;;;;;;;;AAYA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;AChGA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;ACFA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzBA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}